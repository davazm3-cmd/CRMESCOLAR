{"file_contents":{"design_guidelines.md":{"content":"# Diseño CRM Educativo - Guías de Diseño\n\n## Enfoque de Diseño\n**Sistema de Diseño:** Material Design adaptado para productividad educativa\n**Justificación:** Aplicación densa en información que requiere patrones establecidos para navegación clara entre múltiples dashboards y roles de usuario.\n\n## Elementos de Diseño Centrales\n\n### A. Paleta de Colores\n**Modo Claro:**\n- Primario: 210 85% 45% (azul académico profesional)\n- Secundario: 210 25% 95% (gris azulado claro)\n- Éxito: 142 76% 36% (verde aprobación)\n- Advertencia: 38 92% 50% (naranja atención)\n- Error: 0 84% 60% (rojo crítico)\n\n**Modo Oscuro:**\n- Primario: 210 85% 65% (azul más claro)\n- Fondo: 210 15% 12% (gris oscuro azulado)\n- Superficie: 210 10% 18% (cards y paneles)\n\n### B. Tipografía\n- **Fuente Principal:** Inter (Google Fonts) - legibilidad en datos y métricas\n- **Fuente Secundaria:** Roboto Mono (números y códigos)\n- **Jerarquía:** Títulos (text-2xl), Subtítulos (text-lg), Cuerpo (text-base), Métricas (text-sm)\n\n### C. Sistema de Espaciado\n**Unidades Tailwind:** Usar consistentemente 2, 4, 6, y 8\n- Elementos pequeños: p-2, m-2\n- Componentes medianos: p-4, gap-4\n- Secciones principales: p-6, mb-6\n- Separaciones grandes: p-8, mt-8\n\n### D. Biblioteca de Componentes\n\n**Navegación:**\n- Barra lateral colapsible con iconos (Heroicons CDN)\n- Breadcrumbs para navegación profunda\n- Tabs para vistas de dashboard por rol\n\n**Dashboard y Métricas:**\n- Cards con bordes sutiles y sombras ligeras\n- Gráficos integrados (Chart.js) con colores de marca\n- Tablas responsivas con ordenamiento\n- Indicadores KPI con iconos y colores semánticos\n\n**Formularios:**\n- Campos con labels flotantes\n- Validación en tiempo real con mensajes claros\n- Botones primarios (filled) y secundarios (outline)\n- Selectores de fecha/hora para seguimiento\n\n**Comunicaciones:**\n- Timeline de interacciones con timestamps\n- Modal para registro de llamadas y notas\n- Sistema de notificaciones discreto\n\n### E. Principios de UX\n\n**Jerarquía Visual:**\n- Dashboards con métricas principales prominentes\n- Uso de peso tipográfico para destacar KPIs críticos\n- Color semántico para estados (pendiente, completado, crítico)\n\n**Flujos de Trabajo:**\n- Navegación contextual entre prospectos y comunicaciones\n- Filtros persistentes en vistas de lista\n- Acciones rápidas accesibles desde cualquier vista\n\n**Personalización por Rol:**\n- Rector/Director: Visualizaciones ejecutivas y comparativas\n- Gerentes: Supervisión de equipos y reportes\n- Asesores: Herramientas operativas y gestión directa\n\n### Consideraciones Especiales\n- Textos en español con terminología educativa apropiada\n- Exportación clara de reportes con branding institucional\n- Sistema de permisos visual (elementos deshabilitados vs ocultos)\n- Responsive design para tablets usadas en reuniones\n\n### Imágenes\nNo se requiere imagen hero principal. Usar iconografía educativa sutil en estados vacíos y placeholders de datos, manteniendo el enfoque en la funcionalidad y métricas del CRM.","size_bytes":3036},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"// Implementación del sistema de autenticación para CRM educativo (basado en blueprint:javascript_auth_all_persistance)\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport { z } from \"zod\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst loginSchema = z.object({\n  username: z.string().min(3, \"El usuario debe tener al menos 3 caracteres\"),\n  password: z.string().min(6, \"La contraseña debe tener al menos 6 caracteres\"),\n});\n\nconst registerSchema = z.object({\n  username: z.string().min(3, \"El usuario debe tener al menos 3 caracteres\"),\n  password: z.string().min(6, \"La contraseña debe tener al menos 6 caracteres\"),\n  nombre: z.string().min(2, \"El nombre debe tener al menos 2 caracteres\"),\n  email: z.string().email(\"Debe ser un email válido\"),\n  rol: z.enum([\"director\", \"gerente\", \"asesor\"], {\n    errorMap: () => ({ message: \"El rol debe ser director, gerente o asesor\" }),\n  }),\n});\n\nexport function setupAuth(app: Express) {\n  if (!process.env.SESSION_SECRET) {\n    throw new Error(\"SESSION_SECRET must be set for authentication to work\");\n  }\n\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      httpOnly: true,\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(\n      {\n        usernameField: \"username\",\n        passwordField: \"password\",\n      },\n      async (username, password, done) => {\n        try {\n          const user = await storage.getUserByUsername(username);\n          if (!user) {\n            return done(null, false, { message: \"Usuario no encontrado\" });\n          }\n\n          const isValid = await storage.validateUserPassword(username, password);\n          if (!isValid) {\n            return done(null, false, { message: \"Contraseña incorrecta\" });\n          }\n\n          // No incluir la contraseña en la sesión\n          const { password: _, ...userWithoutPassword } = user;\n          return done(null, userWithoutPassword as SelectUser);\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  \n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      if (user) {\n        const { password: _, ...userWithoutPassword } = user;\n        done(null, userWithoutPassword as SelectUser);\n      } else {\n        done(null, false);\n      }\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Endpoint de registro\n  app.post(\"/api/register\", async (req, res) => {\n    try {\n      const validatedData = registerSchema.parse(req.body);\n      \n      const existingUser = await storage.getUserByUsername(validatedData.username);\n      if (existingUser) {\n        return res.status(400).json({ \n          error: \"El nombre de usuario ya está en uso\" \n        });\n      }\n\n      const user = await storage.createUser(validatedData);\n      const { password: _, ...userWithoutPassword } = user;\n\n      req.login(userWithoutPassword as SelectUser, (err) => {\n        if (err) {\n          console.error(\"Error during login after registration:\", err);\n          return res.status(500).json({ error: \"Error interno del servidor\" });\n        }\n        res.status(201).json(userWithoutPassword);\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          error: \"Datos de registro inválidos\", \n          details: error.errors \n        });\n      }\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Endpoint de login\n  app.post(\"/api/login\", (req, res, next) => {\n    const validation = loginSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({ \n        error: \"Datos de login inválidos\",\n        details: validation.error.errors\n      });\n    }\n\n    passport.authenticate(\"local\", (err: any, user: SelectUser | false, info: any) => {\n      if (err) {\n        console.error(\"Authentication error:\", err);\n        return res.status(500).json({ error: \"Error interno del servidor\" });\n      }\n      \n      if (!user) {\n        return res.status(401).json({ \n          error: info?.message || \"Credenciales inválidas\" \n        });\n      }\n\n      req.login(user, (err) => {\n        if (err) {\n          console.error(\"Login error:\", err);\n          return res.status(500).json({ error: \"Error interno del servidor\" });\n        }\n        res.status(200).json(user);\n      });\n    })(req, res, next);\n  });\n\n  // Endpoint de logout\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n        return res.status(500).json({ error: \"Error al cerrar sesión\" });\n      }\n      res.status(200).json({ message: \"Sesión cerrada exitosamente\" });\n    });\n  });\n\n  // Endpoint para obtener datos del usuario actual\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"No autenticado\" });\n    }\n    res.json(req.user);\n  });\n\n  // Middleware para proteger rutas por rol\n  app.use(\"/api/admin/*\", (req, res, next) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"No autenticado\" });\n    }\n    if (req.user?.rol !== \"director\") {\n      return res.status(403).json({ error: \"Acceso denegado: se requiere rol de Director\" });\n    }\n    next();\n  });\n\n  app.use(\"/api/manager/*\", (req, res, next) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"No autenticado\" });\n    }\n    if (![\"director\", \"gerente\"].includes(req.user?.rol || \"\")) {\n      return res.status(403).json({ error: \"Acceso denegado: se requiere rol de Director o Gerente\" });\n    }\n    next();\n  });\n}\n\n// Middleware helper para proteger rutas específicas\nexport function requireAuth(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"No autenticado\" });\n  }\n  next();\n}\n\nexport function requireRole(allowedRoles: string[]) {\n  return (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"No autenticado\" });\n    }\n    \n    if (!allowedRoles.includes(req.user?.rol || \"\")) {\n      return res.status(403).json({ \n        error: `Acceso denegado: se requiere uno de estos roles: ${allowedRoles.join(\", \")}` \n      });\n    }\n    \n    next();\n  };\n}","size_bytes":7044},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, requireAuth, requireRole } from \"./auth\";\nimport { insertComunicacionSchema, updateComunicacionSchema, insertCampanaSchema, updateCampanaSchema, insertReporteSchema, insertFormularioPublicoSchema, insertDocumentoAdmisionSchema, insertEstudianteSchema, insertPagoSchema, insertFormularioAdmisionSchema, updateDatosAcademicosSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configurar autenticación (basado en blueprint:javascript_auth_all_persistance)\n  // sets up /api/register, /api/login, /api/logout, /api/user\n  setupAuth(app);\n\n  // Rutas protegidas para prospectos\n  app.get(\"/api/prospectos\", requireAuth, async (req, res) => {\n    try {\n      const { asesorId, estatus, origen, nivelEducativo, search } = req.query;\n      \n      // Si es asesor, solo puede ver sus propios prospectos\n      const filters: any = {};\n      if (req.user?.rol === \"asesor\") {\n        filters.asesorId = req.user.id;\n      } else if (asesorId) {\n        filters.asesorId = asesorId as string;\n      }\n      \n      if (estatus) filters.estatus = estatus as string;\n      if (origen) filters.origen = origen as string;\n      if (nivelEducativo) filters.nivelEducativo = nivelEducativo as string;\n      if (search) filters.search = search as string;\n      \n      const prospectos = await storage.getProspectos(filters);\n      res.json(prospectos);\n    } catch (error) {\n      console.error(\"Error getting prospects:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  app.post(\"/api/prospectos\", requireAuth, async (req, res) => {\n    try {\n      const { nombre, email, telefono, nivelEducativo, origen, notas, estatus, prioridad } = req.body;\n      \n      if (!nombre || !email || !telefono) {\n        return res.status(400).json({ error: \"Nombre, email y teléfono son requeridos\" });\n      }\n\n      const prospecto = await storage.createProspecto({\n        nombre,\n        email,\n        telefono,\n        nivelEducativo: nivelEducativo || \"bachillerato\",\n        origen: origen || \"web\",\n        estatus: estatus || \"contacto_inicial\",\n        asesorId: req.user!.id,\n        prioridad: prioridad || \"media\",\n        notas\n      });\n      \n      res.status(201).json(prospecto);\n    } catch (error) {\n      console.error(\"Error creating prospect:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Obtener prospecto individual\n  app.get(\"/api/prospectos/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const prospecto = await storage.getProspecto(id);\n      \n      if (!prospecto) {\n        return res.status(404).json({ error: \"Prospecto no encontrado\" });\n      }\n      \n      // Verificar autorización: asesores solo pueden ver sus prospectos\n      if (req.user?.rol === \"asesor\" && prospecto.asesorId !== req.user.id) {\n        return res.status(403).json({ error: \"Acceso denegado\" });\n      }\n      \n      res.json(prospecto);\n    } catch (error) {\n      console.error(\"Error getting prospect:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Actualizar prospecto\n  app.put(\"/api/prospectos/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { nombre, email, telefono, estatus, prioridad, notas, fechaCita } = req.body;\n      \n      const prospectoExistente = await storage.getProspecto(id);\n      if (!prospectoExistente) {\n        return res.status(404).json({ error: \"Prospecto no encontrado\" });\n      }\n      \n      // Verificar autorización: asesores solo pueden actualizar sus prospectos\n      if (req.user?.rol === \"asesor\" && prospectoExistente.asesorId !== req.user.id) {\n        return res.status(403).json({ error: \"Acceso denegado\" });\n      }\n\n      const updateData: any = {};\n      if (nombre) updateData.nombre = nombre;\n      if (email) updateData.email = email;\n      if (telefono) updateData.telefono = telefono;\n      if (estatus) updateData.estatus = estatus;\n      if (prioridad) updateData.prioridad = prioridad;\n      if (notas) updateData.notas = notas;\n      if (fechaCita) updateData.fechaCita = new Date(fechaCita);\n\n      const prospectoActualizado = await storage.updateProspecto(id, updateData);\n      res.json(prospectoActualizado);\n    } catch (error) {\n      console.error(\"Error updating prospect:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Eliminar prospecto (solo gerente y director)\n  app.delete(\"/api/prospectos/:id\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      const prospectoExistente = await storage.getProspecto(id);\n      if (!prospectoExistente) {\n        return res.status(404).json({ error: \"Prospecto no encontrado\" });\n      }\n\n      const eliminado = await storage.deleteProspecto(id);\n      if (eliminado) {\n        res.json({ message: \"Prospecto eliminado exitosamente\" });\n      } else {\n        res.status(500).json({ error: \"No se pudo eliminar el prospecto\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting prospect:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Asignar prospecto a asesor (solo gerente y director)\n  app.post(\"/api/prospectos/:id/asignar\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { asesorId } = req.body;\n      \n      if (!asesorId) {\n        return res.status(400).json({ error: \"ID de asesor requerido\" });\n      }\n\n      const prospectoExistente = await storage.getProspecto(id);\n      if (!prospectoExistente) {\n        return res.status(404).json({ error: \"Prospecto no encontrado\" });\n      }\n      \n      // Verificar que el asesor existe\n      const asesor = await storage.getUser(asesorId);\n      if (!asesor || asesor.rol !== \"asesor\") {\n        return res.status(400).json({ error: \"Asesor no válido\" });\n      }\n\n      const prospectoActualizado = await storage.updateProspecto(id, { asesorId });\n      res.json(prospectoActualizado);\n    } catch (error) {\n      console.error(\"Error assigning prospect:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Obtener lista de asesores (solo gerente y director)\n  app.get(\"/api/asesores\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const asesores = await storage.getUsersByRole(\"asesor\");\n      // No incluir contraseñas en la respuesta\n      const asesoresSinPassword = asesores.map(({ password, ...asesor }) => asesor);\n      res.json(asesoresSinPassword);\n    } catch (error) {\n      console.error(\"Error getting advisors:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Estadísticas de prospectos (para dashboard)\n  app.get(\"/api/prospectos/stats\", requireAuth, async (req, res) => {\n    try {\n      const { asesorId } = req.query;\n      \n      // Si es asesor, solo puede ver sus estadísticas\n      const filtroAsesor = req.user?.rol === \"asesor\" ? req.user.id : asesorId as string;\n      \n      const stats = await storage.getProspectosStats(filtroAsesor);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error getting prospect stats:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Métricas del director (solo directores)\n  app.get(\"/api/metrics/director\", requireRole([\"director\"]), async (req, res) => {\n    try {\n      const metrics = await storage.getMetricasDirector();\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error getting director metrics:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Métricas del gerente (gerentes y directores)\n  app.get(\"/api/metrics/gerente\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const metrics = await storage.getMetricasGerente();\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error getting manager metrics:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Métricas del asesor (todos los roles, pero filtradas por usuario)\n  app.get(\"/api/metrics/asesor\", requireAuth, async (req, res) => {\n    try {\n      const asesorId = req.user?.rol === \"asesor\" ? req.user.id : (req.query.asesorId as string);\n      \n      if (!asesorId) {\n        return res.status(400).json({ error: \"ID de asesor requerido\" });\n      }\n      \n      const metrics = await storage.getMetricasAsesor(asesorId);\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error getting advisor metrics:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Rutas de comunicaciones\n  app.get(\"/api/comunicaciones\", requireAuth, async (req, res) => {\n    try {\n      const { prospectoId, asesorId, tipo, fechaDesde, fechaHasta } = req.query;\n      \n      // Si se especifica un prospecto, obtener sus comunicaciones\n      if (prospectoId) {\n        // Verificar acceso al prospecto\n        const prospecto = await storage.getProspecto(prospectoId as string);\n        if (!prospecto) {\n          return res.status(404).json({ error: \"Prospecto no encontrado\" });\n        }\n        \n        // Asesores solo pueden ver comunicaciones de sus prospectos\n        if (req.user?.rol === \"asesor\" && prospecto.asesorId !== req.user.id) {\n          return res.status(403).json({ error: \"Acceso denegado\" });\n        }\n        \n        const comunicaciones = await storage.getComunicacionesByProspecto(prospectoId as string);\n        res.json(comunicaciones);\n      } \n      // Si es asesor sin filtros, ver solo sus comunicaciones\n      else if (req.user?.rol === \"asesor\") {\n        const comunicaciones = await storage.getComunicacionesByAsesor(req.user.id);\n        res.json(comunicaciones);\n      } \n      // Gerentes y directores pueden ver todas las comunicaciones con filtros\n      else if ([\"gerente\", \"director\"].includes(req.user!.rol)) {\n        const comunicaciones = await storage.getComunicacionesConFiltros({\n          asesorId: asesorId as string,\n          tipo: tipo as string,\n          fechaDesde: fechaDesde as string,\n          fechaHasta: fechaHasta as string\n        });\n        res.json(comunicaciones);\n      } else {\n        res.status(400).json({ error: \"Parámetros insuficientes\" });\n      }\n    } catch (error) {\n      console.error(\"Error getting communications:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  app.post(\"/api/comunicaciones\", requireAuth, async (req, res) => {\n    try {\n      // Validar datos con Zod\n      const validationResult = insertComunicacionSchema.safeParse({\n        ...req.body,\n        usuarioId: req.user!.id // Agregar usuario del token\n      });\n      \n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Datos inválidos\", \n          details: validationResult.error.issues \n        });\n      }\n      \n      const { prospectoId, tipo, contenido, resultado, duracion, direccion, estado } = validationResult.data;\n\n      // Verificar que el prospecto existe y el asesor puede acceder\n      const prospecto = await storage.getProspecto(prospectoId);\n      if (!prospecto) {\n        return res.status(404).json({ error: \"Prospecto no encontrado\" });\n      }\n\n      // Solo asesores pueden comunicarse con sus prospectos asignados\n      if (req.user?.rol === \"asesor\" && prospecto.asesorId !== req.user.id) {\n        return res.status(403).json({ error: \"No tienes permiso para comunicarte con este prospecto\" });\n      }\n\n      const comunicacion = await storage.createComunicacion({\n        prospectoId,\n        usuarioId: req.user!.id,\n        tipo,\n        direccion: direccion || \"enviado\",\n        contenido,\n        resultado: resultado || null,\n        duracion: duracion || null,\n        estado: estado || \"completado\"\n      });\n      \n      res.status(201).json(comunicacion);\n    } catch (error) {\n      console.error(\"Error creating communication:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Actualizar comunicación\n  app.put(\"/api/comunicaciones/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validar datos con Zod\n      const validationResult = updateComunicacionSchema.safeParse(req.body);\n      \n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Datos inválidos\", \n          details: validationResult.error.issues \n        });\n      }\n\n      const comunicacionExistente = await storage.getComunicacion(id);\n      if (!comunicacionExistente) {\n        return res.status(404).json({ error: \"Comunicación no encontrada\" });\n      }\n\n      // Solo el usuario que creó la comunicación puede actualizarla\n      if (comunicacionExistente.usuarioId !== req.user!.id) {\n        return res.status(403).json({ error: \"No tienes permiso para actualizar esta comunicación\" });\n      }\n\n      const comunicacionActualizada = await storage.updateComunicacion(id, validationResult.data);\n      res.json(comunicacionActualizada);\n    } catch (error) {\n      console.error(\"Error updating communication:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Obtener comunicación específica\n  app.get(\"/api/comunicaciones/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const comunicacion = await storage.getComunicacion(id);\n\n      if (!comunicacion) {\n        return res.status(404).json({ error: \"Comunicación no encontrada\" });\n      }\n\n      // Verificar acceso - asesores solo pueden ver comunicaciones de sus prospectos\n      if (req.user?.rol === \"asesor\") {\n        const prospecto = await storage.getProspecto(comunicacion.prospectoId);\n        if (!prospecto || prospecto.asesorId !== req.user.id) {\n          return res.status(403).json({ error: \"Acceso denegado\" });\n        }\n      }\n\n      res.json(comunicacion);\n    } catch (error) {\n      console.error(\"Error getting communication:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Eliminar comunicación\n  app.delete(\"/api/comunicaciones/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      const comunicacionExistente = await storage.getComunicacion(id);\n      if (!comunicacionExistente) {\n        return res.status(404).json({ error: \"Comunicación no encontrada\" });\n      }\n\n      // Verificar autorización: el creador, gerentes o directores pueden eliminar\n      const isCreator = comunicacionExistente.usuarioId === req.user!.id;\n      const isManagerOrDirector = [\"gerente\", \"director\"].includes(req.user!.rol);\n      \n      if (!isCreator && !isManagerOrDirector) {\n        return res.status(403).json({ error: \"No tienes permiso para eliminar esta comunicación\" });\n      }\n\n      const eliminado = await storage.deleteComunicacion(id);\n      if (eliminado) {\n        res.json({ message: \"Comunicación eliminada exitosamente\" });\n      } else {\n        res.status(500).json({ error: \"No se pudo eliminar la comunicación\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting communication:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Estadísticas de comunicaciones\n  app.get(\"/api/comunicaciones/stats\", requireAuth, async (req, res) => {\n    try {\n      const { asesorId, fechaDesde, fechaHasta } = req.query;\n      \n      // Si es asesor, solo puede ver sus estadísticas\n      const filtroAsesor = req.user?.rol === \"asesor\" ? req.user.id : asesorId as string;\n      \n      const stats = await storage.getComunicacionesStats(\n        filtroAsesor, \n        fechaDesde as string, \n        fechaHasta as string\n      );\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error getting communication stats:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Rutas de campañas (solo gerentes y directores)\n  app.get(\"/api/campanas\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { activas } = req.query;\n      const isActive = activas === \"true\" ? true : activas === \"false\" ? false : undefined;\n      const campanas = await storage.getCampanas(isActive);\n      res.json(campanas);\n    } catch (error) {\n      console.error(\"Error getting campaigns:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  app.post(\"/api/campanas\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      // Preparar datos para validación con fechas convertidas\n      const datosValidacion = {\n        ...req.body,\n        fechaInicio: req.body.fechaInicio ? new Date(req.body.fechaInicio) : new Date(),\n        fechaFin: req.body.fechaFin ? new Date(req.body.fechaFin) : new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n        presupuesto: req.body.presupuesto ? req.body.presupuesto.toString() : \"0\",\n        gastado: \"0\",\n        estado: \"activa\"\n      };\n\n      // Validar datos con Zod\n      const validationResult = insertCampanaSchema.safeParse(datosValidacion);\n      \n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Datos inválidos\", \n          details: validationResult.error.issues \n        });\n      }\n\n      const campana = await storage.createCampana(validationResult.data);\n      res.status(201).json(campana);\n    } catch (error) {\n      console.error(\"Error creating campaign:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Obtener campaña específica\n  app.get(\"/api/campanas/:id\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const campana = await storage.getCampana(id);\n      \n      if (!campana) {\n        return res.status(404).json({ error: \"Campaña no encontrada\" });\n      }\n      \n      res.json(campana);\n    } catch (error) {\n      console.error(\"Error getting campaign:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Actualizar campaña\n  app.put(\"/api/campanas/:id\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      const campanaExistente = await storage.getCampana(id);\n      if (!campanaExistente) {\n        return res.status(404).json({ error: \"Campaña no encontrada\" });\n      }\n\n      // Preparar datos para validación\n      const datosValidacion: any = {};\n      if (req.body.nombre) datosValidacion.nombre = req.body.nombre;\n      if (req.body.descripcion) datosValidacion.descripcion = req.body.descripcion;\n      if (req.body.canal) datosValidacion.canal = req.body.canal;\n      if (req.body.presupuesto !== undefined) datosValidacion.presupuesto = req.body.presupuesto.toString();\n      if (req.body.gastado !== undefined) datosValidacion.gastado = req.body.gastado.toString();\n      if (req.body.estado) datosValidacion.estado = req.body.estado;\n      if (req.body.fechaInicio) datosValidacion.fechaInicio = new Date(req.body.fechaInicio);\n      if (req.body.fechaFin) datosValidacion.fechaFin = new Date(req.body.fechaFin);\n      if (req.body.metaProspectos) datosValidacion.metaProspectos = req.body.metaProspectos;\n      if (req.body.metaInscritos) datosValidacion.metaInscritos = req.body.metaInscritos;\n      if (req.body.configuracion) datosValidacion.configuracion = req.body.configuracion;\n\n      // Validar datos con Zod\n      const validationResult = updateCampanaSchema.safeParse(datosValidacion);\n      \n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Datos inválidos\", \n          details: validationResult.error.issues \n        });\n      }\n\n      const campanaActualizada = await storage.updateCampana(id, validationResult.data);\n      res.json(campanaActualizada);\n    } catch (error) {\n      console.error(\"Error updating campaign:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Eliminar campaña (solo director)\n  app.delete(\"/api/campanas/:id\", requireRole([\"director\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      const campanaExistente = await storage.getCampana(id);\n      if (!campanaExistente) {\n        return res.status(404).json({ error: \"Campaña no encontrada\" });\n      }\n\n      const eliminada = await storage.deleteCampana(id);\n      if (eliminada) {\n        res.json({ message: \"Campaña eliminada exitosamente\" });\n      } else {\n        res.status(500).json({ error: \"No se pudo eliminar la campaña\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting campaign:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Vincular prospecto a campaña\n  app.post(\"/api/campanas/:id/prospectos\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { prospectoId } = req.body;\n\n      if (!prospectoId) {\n        return res.status(400).json({ error: \"ID de prospecto requerido\" });\n      }\n\n      const campana = await storage.getCampana(id);\n      if (!campana) {\n        return res.status(404).json({ error: \"Campaña no encontrada\" });\n      }\n\n      const prospecto = await storage.getProspecto(prospectoId);\n      if (!prospecto) {\n        return res.status(404).json({ error: \"Prospecto no encontrado\" });\n      }\n\n      const vinculado = await storage.linkProspectoACampana(prospectoId, id);\n      if (vinculado) {\n        res.json({ message: \"Prospecto vinculado a campaña exitosamente\" });\n      } else {\n        res.status(500).json({ error: \"No se pudo vincular el prospecto a la campaña\" });\n      }\n    } catch (error) {\n      console.error(\"Error linking prospect to campaign:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Desvincular prospecto de campaña\n  app.delete(\"/api/campanas/:id/prospectos/:prospectoId\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { id, prospectoId } = req.params;\n\n      const desvinculado = await storage.unlinkProspectoACampana(prospectoId, id);\n      if (desvinculado) {\n        res.json({ message: \"Prospecto desvinculado de campaña exitosamente\" });\n      } else {\n        res.status(500).json({ error: \"No se pudo desvincular el prospecto de la campaña\" });\n      }\n    } catch (error) {\n      console.error(\"Error unlinking prospect from campaign:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Obtener prospectos de una campaña\n  app.get(\"/api/campanas/:id/prospectos\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      const campana = await storage.getCampana(id);\n      if (!campana) {\n        return res.status(404).json({ error: \"Campaña no encontrada\" });\n      }\n\n      const prospectos = await storage.getProspectosByCampana(id);\n      res.json(prospectos);\n    } catch (error) {\n      console.error(\"Error getting campaign prospects:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // ROI y métricas por canal - estadísticas detalladas de campañas\n  app.get(\"/api/campanas/stats\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { fechaDesde, fechaHasta, canal } = req.query;\n      \n      const stats = await storage.getCampanasStats(\n        fechaDesde as string, \n        fechaHasta as string, \n        canal as string\n      );\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error getting campaign stats:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Métricas específicas de una campaña\n  app.get(\"/api/campanas/:id/stats\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      const campana = await storage.getCampana(id);\n      if (!campana) {\n        return res.status(404).json({ error: \"Campaña no encontrada\" });\n      }\n\n      const stats = await storage.getCampanaStats(id);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error getting individual campaign stats:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // ================ SISTEMA DE REPORTES ================\n\n  // Obtener reportes (solo gerente y director)\n  app.get(\"/api/reportes\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const reportes = await storage.getReportes();\n      res.json(reportes);\n    } catch (error) {\n      console.error(\"Error getting reports:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Crear reporte programado\n  app.post(\"/api/reportes\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      // Validar datos de entrada con Zod\n      const validation = insertReporteSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          error: \"Datos inválidos\", \n          details: validation.error.errors \n        });\n      }\n\n      const { nombre, tipo, frecuencia, destinatarios, configuracion } = validation.data;\n\n      const reporte = await storage.createReporte({\n        nombre,\n        tipo,\n        frecuencia,\n        destinatarios,\n        configuracion,\n        activo: true\n      });\n      \n      res.status(201).json(reporte);\n    } catch (error) {\n      console.error(\"Error creating report:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Actualizar reporte\n  app.put(\"/api/reportes/:id\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { nombre, tipo, frecuencia, destinatarios, configuracion, activo } = req.body;\n\n      const reporteExistente = await storage.getReporte(id);\n      if (!reporteExistente) {\n        return res.status(404).json({ error: \"Reporte no encontrado\" });\n      }\n\n      const updateData: any = {};\n      if (nombre) updateData.nombre = nombre;\n      if (tipo) updateData.tipo = tipo;\n      if (frecuencia) updateData.frecuencia = frecuencia;\n      if (destinatarios) updateData.destinatarios = destinatarios; // jsonb field - don't stringify\n      if (configuracion !== undefined) updateData.configuracion = configuracion; // jsonb field - don't stringify\n      if (activo !== undefined) updateData.activo = activo;\n\n      const reporteActualizado = await storage.updateReporte(id, updateData);\n      res.json(reporteActualizado);\n    } catch (error) {\n      console.error(\"Error updating report:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Eliminar reporte (solo director)\n  app.delete(\"/api/reportes/:id\", requireRole([\"director\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      const reporteExistente = await storage.getReporte(id);\n      if (!reporteExistente) {\n        return res.status(404).json({ error: \"Reporte no encontrado\" });\n      }\n\n      const eliminado = await storage.deleteReporte(id);\n      if (eliminado) {\n        res.json({ message: \"Reporte eliminado exitosamente\" });\n      } else {\n        res.status(500).json({ error: \"No se pudo eliminar el reporte\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting report:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Generar reporte inmediato con exportación\n  app.post(\"/api/reportes/generar\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { tipo, formato, filtros } = req.body;\n      \n      if (!tipo || !formato) {\n        return res.status(400).json({ error: \"Tipo y formato son requeridos\" });\n      }\n\n      if (![\"pdf\", \"excel\", \"csv\"].includes(formato)) {\n        return res.status(400).json({ error: \"Formato debe ser pdf, excel o csv\" });\n      }\n\n      const reporteData = await storage.generarDatosReporte(tipo, filtros);\n      const archivoGenerado = await storage.exportarReporte(reporteData, formato, tipo);\n      \n      res.json({\n        message: \"Reporte generado exitosamente\",\n        archivo: archivoGenerado,\n        datos: reporteData\n      });\n    } catch (error) {\n      console.error(\"Error generating report:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Ejecutar reporte programado manualmente\n  app.post(\"/api/reportes/:id/ejecutar\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      const reporte = await storage.getReporte(id);\n      if (!reporte) {\n        return res.status(404).json({ error: \"Reporte no encontrado\" });\n      }\n\n      const resultado = await storage.ejecutarReporte(id);\n      if (resultado) {\n        res.json({ message: \"Reporte ejecutado exitosamente\" });\n      } else {\n        res.status(500).json({ error: \"No se pudo ejecutar el reporte\" });\n      }\n    } catch (error) {\n      console.error(\"Error executing report:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Dashboard de reportes - métricas generales\n  app.get(\"/api/reportes/dashboard\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const dashboard = await storage.getDashboardReportes();\n      res.json(dashboard);\n    } catch (error) {\n      console.error(\"Error getting reports dashboard:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // ====== RUTAS PARA FORMULARIOS PÚBLICOS ======\n  \n  // Gestión de formularios públicos (solo directores y gerentes)\n  app.get(\"/api/formularios-publicos\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const activos = req.query.activos === 'true' ? true : req.query.activos === 'false' ? false : undefined;\n      const formularios = await storage.getFormulariosPublicos(activos);\n      res.json(formularios);\n    } catch (error) {\n      console.error(\"Error getting public forms:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  app.post(\"/api/formularios-publicos\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const parsedData = insertFormularioPublicoSchema.parse(req.body);\n      const formulario = await storage.createFormularioPublico(parsedData);\n      res.status(201).json(formulario);\n    } catch (error) {\n      console.error(\"Error creating public form:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  app.get(\"/api/formularios-publicos/:id\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const formulario = await storage.getFormularioPublico(id);\n      \n      if (!formulario) {\n        return res.status(404).json({ error: \"Formulario público no encontrado\" });\n      }\n      \n      res.json(formulario);\n    } catch (error) {\n      console.error(\"Error getting public form:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  app.put(\"/api/formularios-publicos/:id\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const parsedData = insertFormularioPublicoSchema.partial().parse(req.body);\n      const formulario = await storage.updateFormularioPublico(id, parsedData);\n      res.json(formulario);\n    } catch (error) {\n      console.error(\"Error updating public form:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  app.delete(\"/api/formularios-publicos/:id\", requireRole([\"director\", \"gerente\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteFormularioPublico(id);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"Formulario público no encontrado\" });\n      }\n      \n      res.json({ message: \"Formulario público eliminado exitosamente\" });\n    } catch (error) {\n      console.error(\"Error deleting public form:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Ruta pública para obtener formulario por enlace (NO requiere autenticación)\n  app.get(\"/api/public/form/:enlace\", async (req, res) => {\n    try {\n      const { enlace } = req.params;\n      const formulario = await storage.getFormularioPublicoByEnlace(enlace);\n      \n      if (!formulario || !formulario.activo) {\n        return res.status(404).json({ error: \"Formulario no encontrado o inactivo\" });\n      }\n      \n      // Solo devolver información necesaria para el formulario público\n      const formularioPublico = {\n        id: formulario.id,\n        nombre: formulario.nombre,\n        descripcion: formulario.descripcion,\n        nivelEducativo: formulario.nivelEducativo,\n        configuracion: formulario.configuracion\n      };\n      \n      res.json(formularioPublico);\n    } catch (error) {\n      console.error(\"Error getting public form by link:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Ruta pública para enviar formulario (NO requiere autenticación)\n  app.post(\"/api/public/form/:enlace/submit\", async (req, res) => {\n    try {\n      const { enlace } = req.params;\n      const { nombre, email, telefono, datosExtra } = req.body;\n      \n      if (!nombre || !email || !telefono) {\n        return res.status(400).json({ error: \"Nombre, email y teléfono son requeridos\" });\n      }\n      \n      // Verificar que el formulario existe y está activo\n      const formulario = await storage.getFormularioPublicoByEnlace(enlace);\n      if (!formulario || !formulario.activo) {\n        return res.status(404).json({ error: \"Formulario no encontrado o inactivo\" });\n      }\n      \n      // Crear prospecto desde formulario público\n      const prospecto = await storage.procesarProspectoDesdeFormularioPublico({\n        nombre,\n        email,\n        telefono,\n        datosExtra\n      }, enlace);\n      \n      res.status(201).json({ \n        message: \"Formulario enviado exitosamente\",\n        prospectoId: prospecto.id\n      });\n    } catch (error) {\n      console.error(\"Error submitting public form:\", error);\n      res.status(500).json({ error: \"Error al procesar el formulario\" });\n    }\n  });\n\n  // ====== RUTAS PARA DOCUMENTOS DE ADMISIÓN ======\n  \n  app.get(\"/api/prospectos/:prospectoId/documentos\", requireAuth, async (req, res) => {\n    try {\n      const { prospectoId } = req.params;\n      const documentos = await storage.getDocumentosByProspecto(prospectoId);\n      res.json(documentos);\n    } catch (error) {\n      console.error(\"Error getting admission documents:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  app.post(\"/api/documentos-admision\", requireAuth, async (req, res) => {\n    try {\n      const parsedData = insertDocumentoAdmisionSchema.parse(req.body);\n      const documento = await storage.createDocumentoAdmision(parsedData);\n      res.status(201).json(documento);\n    } catch (error) {\n      console.error(\"Error creating admission document:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // ====== RUTAS PARA ESTUDIANTES ======\n  \n  app.get(\"/api/estudiantes\", requireAuth, async (req, res) => {\n    try {\n      const { estado } = req.query;\n      const estudiantes = await storage.getEstudiantes(estado as string);\n      res.json(estudiantes);\n    } catch (error) {\n      console.error(\"Error getting students:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  app.get(\"/api/estudiantes/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const estudiante = await storage.getEstudiante(id);\n      \n      if (!estudiante) {\n        return res.status(404).json({ error: \"Estudiante no encontrado\" });\n      }\n      \n      res.json(estudiante);\n    } catch (error) {\n      console.error(\"Error getting student:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Obtener estudiante por ID de prospecto\n  app.get(\"/api/estudiantes/por-prospecto/:prospectoId\", requireAuth, async (req, res) => {\n    try {\n      const { prospectoId } = req.params;\n      const estudiante = await storage.getEstudianteByProspecto(prospectoId);\n      \n      if (!estudiante) {\n        return res.status(404).json({ error: \"Estudiante no encontrado para este prospecto\" });\n      }\n      \n      res.json(estudiante);\n    } catch (error) {\n      console.error(\"Error getting student by prospect:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Actualizar datos académicos del estudiante\n  app.patch(\"/api/estudiantes/:id/datos-academicos\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validar datos académicos con el schema\n      const parsedData = updateDatosAcademicosSchema.parse(req.body);\n      \n      // Verificar que el estudiante existe\n      const estudianteExistente = await storage.getEstudiante(id);\n      if (!estudianteExistente) {\n        return res.status(404).json({ error: \"Estudiante no encontrado\" });\n      }\n\n      // Actualizar datos académicos\n      const estudianteActualizado = await storage.updateEstudiante(id, {\n        programa: parsedData.programa,\n        modalidad: parsedData.modalidad,\n        turno: parsedData.turno,\n        fechaInicio: parsedData.fechaInicio,\n      });\n\n      res.json(estudianteActualizado);\n    } catch (error) {\n      if (error instanceof Error && 'issues' in error) {\n        // Error de validación de Zod\n        return res.status(400).json({ \n          error: \"Datos de validación incorrectos\", \n          details: (error as any).issues \n        });\n      }\n      console.error(\"Error updating student academic data:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // ====== RUTAS PARA PAGOS ======\n  \n  app.get(\"/api/prospectos/:prospectoId/pagos\", requireAuth, async (req, res) => {\n    try {\n      const { prospectoId } = req.params;\n      const pagos = await storage.getPagosByProspecto(prospectoId);\n      res.json(pagos);\n    } catch (error) {\n      console.error(\"Error getting prospect payments:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  app.post(\"/api/pagos\", requireAuth, async (req, res) => {\n    try {\n      const parsedData = insertPagoSchema.parse(req.body);\n      const pago = await storage.createPago(parsedData);\n      res.status(201).json(pago);\n    } catch (error) {\n      console.error(\"Error creating payment:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // ====== RUTAS PARA FLUJO DE ADMISIÓN ======\n  \n  // Iniciar proceso de admisión para un prospecto\n  app.post(\"/api/prospectos/:prospectoId/iniciar-admision\", requireAuth, async (req, res) => {\n    try {\n      const { prospectoId } = req.params;\n      const formulario = await storage.iniciarProcesoAdmision(prospectoId);\n      res.status(201).json(formulario);\n    } catch (error) {\n      console.error(\"Error starting admission process:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Completar matrícula tras pago exitoso\n  app.post(\"/api/prospectos/:prospectoId/completar-matricula\", requireAuth, async (req, res) => {\n    try {\n      const { prospectoId } = req.params;\n      const { pagoId } = req.body;\n      \n      if (!pagoId) {\n        return res.status(400).json({ error: \"ID de pago es requerido\" });\n      }\n      \n      const estudiante = await storage.completarMatricula(prospectoId, pagoId);\n      res.status(201).json(estudiante);\n    } catch (error) {\n      console.error(\"Error completing enrollment:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":40843},"server/storage.ts":{"content":"import { \n  users, prospectos, comunicaciones, campanas, prospectosCampanas, reportes,\n  formulariosPublicos, documentosAdmision, estudiantes, pagos, formulariosAdmision,\n  type User, type InsertUser, type Prospecto, type InsertProspecto,\n  type Comunicacion, type InsertComunicacion, type Campana, type InsertCampana,\n  type FormularioPublico, type InsertFormularioPublico,\n  type DocumentoAdmision, type InsertDocumentoAdmision,\n  type Estudiante, type InsertEstudiante,\n  type Pago, type InsertPago,\n  type FormularioAdmision, type InsertFormularioAdmision\n} from \"@shared/schema\";\nimport { db, pool } from \"./db\";\nimport { eq, like, and, desc, count, sum, avg, sql } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport bcrypt from \"bcrypt\";\nimport PDFDocument from \"pdfkit\";\nimport * as ExcelJS from \"exceljs\";\nimport { createObjectCsvWriter } from \"csv-writer\";\nimport fs from \"fs-extra\";\nimport path from \"path\";\n\nconst PostgresSessionStore = connectPg(session);\n\n// Interfaz actualizada para todas las operaciones del CRM\nexport interface IStorage {\n  // Session store\n  sessionStore: session.Store;\n  // Usuarios\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getUsersByRole(role: string): Promise<User[]>;\n  validateUserPassword(username: string, password: string): Promise<boolean>;\n  \n  // Prospectos\n  getProspecto(id: string): Promise<Prospecto | undefined>;\n  createProspecto(prospecto: InsertProspecto): Promise<Prospecto>;\n  updateProspecto(id: string, prospecto: Partial<InsertProspecto>): Promise<Prospecto>;\n  deleteProspecto(id: string): Promise<boolean>;\n  getProspectos(filters?: {\n    asesorId?: string;\n    estatus?: string;\n    origen?: string;\n    nivelEducativo?: string;\n    search?: string;\n  }): Promise<Prospecto[]>;\n  getProspectosStats(asesorId?: string): Promise<{\n    total: number;\n    porEstatus: any[];\n    porOrigen: any[];\n    porPrioridad: any[];\n    prospectosMes: number;\n  }>;\n  \n  // Comunicaciones\n  getComunicacion(id: string): Promise<Comunicacion | undefined>;\n  createComunicacion(comunicacion: InsertComunicacion): Promise<Comunicacion>;\n  updateComunicacion(id: string, comunicacion: Partial<InsertComunicacion>): Promise<Comunicacion>;\n  deleteComunicacion(id: string): Promise<boolean>;\n  getComunicacionesByProspecto(prospectoId: string): Promise<Comunicacion[]>;\n  getComunicacionesByAsesor(usuarioId: string): Promise<Comunicacion[]>;\n  getComunicacionesConFiltros(filters?: {\n    asesorId?: string;\n    tipo?: string;\n    fechaDesde?: string;\n    fechaHasta?: string;\n  }): Promise<Comunicacion[]>;\n  getComunicacionesStats(asesorId?: string, fechaDesde?: string, fechaHasta?: string): Promise<{\n    total: number;\n    porTipo: any[];\n    porResultado: any[];\n    duracionPromedio: number;\n    comunicacionesSemana: number;\n  }>;\n  \n  // Campañas\n  getCampana(id: string): Promise<Campana | undefined>;\n  createCampana(campana: InsertCampana): Promise<Campana>;\n  getCampanas(activas?: boolean): Promise<Campana[]>;\n  updateCampana(id: string, campana: Partial<InsertCampana>): Promise<Campana>;\n  deleteCampana(id: string): Promise<boolean>;\n  linkProspectoACampana(prospectoId: string, campanaId: string): Promise<boolean>;\n  unlinkProspectoACampana(prospectoId: string, campanaId: string): Promise<boolean>;\n  getProspectosByCampana(campanaId: string): Promise<Prospecto[]>;\n  getCampanasStats(fechaDesde?: string, fechaHasta?: string, canal?: string): Promise<{\n    totalCampanas: number;\n    campanasActivas: number;\n    presupuestoTotal: number;\n    gastadoTotal: number;\n    roi: number;\n    porCanal: any[];\n    prospectosPorCampana: any[];\n    conversionPorCampana: any[];\n  }>;\n  getCampanaStats(campanaId: string): Promise<{\n    prospectos: number;\n    inscripciones: number;\n    tasaConversion: number;\n    costoProspecto: number;\n    roi: number;\n    gastado: number;\n    presupuesto: number;\n  }>;\n  \n  // Reportes\n  getReporte(id: string): Promise<any>;\n  getReportes(): Promise<any[]>;\n  createReporte(reporte: any): Promise<any>;\n  updateReporte(id: string, reporte: any): Promise<any>;\n  deleteReporte(id: string): Promise<boolean>;\n  ejecutarReporte(id: string): Promise<boolean>;\n  generarDatosReporte(tipo: string, filtros?: any): Promise<any>;\n  exportarReporte(datos: any, formato: string, tipoReporte: string): Promise<string>;\n  getDashboardReportes(): Promise<{\n    totalReportes: number;\n    reportesActivos: number;\n    ultimasEjecuciones: any[];\n    reportesPendientes: number;\n  }>;\n\n  // Métricas y reportes\n  getMetricasDirector(): Promise<{\n    totalProspectos: number;\n    totalInscritos: number;\n    tasaConversion: number;\n    costoPromedio: number;\n    prospectosPorSemana: any[];\n    inscritosPorAsesor: any[];\n    origenesData: any[];\n  }>;\n  \n  getMetricasGerente(): Promise<{\n    asesoresPerformance: any[];\n    actividadSemanal: any[];\n  }>;\n  \n  getMetricasAsesor(asesorId: string): Promise<{\n    misProspectos: Prospecto[];\n    proximasCitas: any[];\n    metricsPersonales: any;\n  }>;\n\n  // ====== MÉTODOS PARA NUEVAS FUNCIONALIDADES ======\n  \n  // Formularios Públicos\n  getFormularioPublico(id: string): Promise<FormularioPublico | undefined>;\n  getFormularioPublicoByEnlace(enlace: string): Promise<FormularioPublico | undefined>;\n  createFormularioPublico(formulario: InsertFormularioPublico): Promise<FormularioPublico>;\n  getFormulariosPublicos(activos?: boolean): Promise<FormularioPublico[]>;\n  updateFormularioPublico(id: string, formulario: Partial<InsertFormularioPublico>): Promise<FormularioPublico>;\n  deleteFormularioPublico(id: string): Promise<boolean>;\n  \n  // Documentos de Admisión\n  getDocumentoAdmision(id: string): Promise<DocumentoAdmision | undefined>;\n  createDocumentoAdmision(documento: InsertDocumentoAdmision): Promise<DocumentoAdmision>;\n  getDocumentosByProspecto(prospectoId: string): Promise<DocumentoAdmision[]>;\n  updateDocumentoAdmision(id: string, documento: Partial<InsertDocumentoAdmision>): Promise<DocumentoAdmision>;\n  deleteDocumentoAdmision(id: string): Promise<boolean>;\n  \n  // Estudiantes\n  getEstudiante(id: string): Promise<Estudiante | undefined>;\n  getEstudianteByProspecto(prospectoId: string): Promise<Estudiante | undefined>;\n  createEstudiante(estudiante: InsertEstudiante): Promise<Estudiante>;\n  getEstudiantes(estado?: string): Promise<Estudiante[]>;\n  updateEstudiante(id: string, estudiante: Partial<InsertEstudiante>): Promise<Estudiante>;\n  deleteEstudiante(id: string): Promise<boolean>;\n  \n  // Pagos\n  getPago(id: string): Promise<Pago | undefined>;\n  createPago(pago: InsertPago): Promise<Pago>;\n  getPagosByProspecto(prospectoId: string): Promise<Pago[]>;\n  getPagosByEstudiante(estudianteId: string): Promise<Pago[]>;\n  updatePago(id: string, pago: Partial<InsertPago>): Promise<Pago>;\n  deletePago(id: string): Promise<boolean>;\n  \n  // Formularios de Admisión\n  getFormularioAdmision(id: string): Promise<FormularioAdmision | undefined>;\n  getFormularioAdmisionByProspecto(prospectoId: string): Promise<FormularioAdmision | undefined>;\n  createFormularioAdmision(formulario: InsertFormularioAdmision): Promise<FormularioAdmision>;\n  updateFormularioAdmision(id: string, formulario: Partial<InsertFormularioAdmision>): Promise<FormularioAdmision>;\n  deleteFormularioAdmision(id: string): Promise<boolean>;\n  \n  // Métodos especiales para el flujo de admisión\n  generarEnlaceFormularioPublico(): Promise<string>;\n  procesarProspectoDesdeFormularioPublico(datos: any, enlaceFormulario: string): Promise<Prospecto>;\n  iniciarProcesoAdmision(prospectoId: string): Promise<FormularioAdmision>;\n  completarMatricula(prospectoId: string, pagoId: string): Promise<Estudiante>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  public sessionStore: session.Store;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    });\n  }\n  // Métodos de usuarios\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // Hash the password before storing\n    const saltRounds = 12;\n    const hashedPassword = await bcrypt.hash(insertUser.password, saltRounds);\n    \n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        password: hashedPassword\n      })\n      .returning();\n    return user;\n  }\n\n  async validateUserPassword(username: string, password: string): Promise<boolean> {\n    const user = await this.getUserByUsername(username);\n    if (!user) {\n      return false;\n    }\n    \n    return await bcrypt.compare(password, user.password);\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return db.select().from(users).where(eq(users.rol, role));\n  }\n\n  // Métodos de prospectos\n  async getProspecto(id: string): Promise<Prospecto | undefined> {\n    const [prospecto] = await db.select().from(prospectos).where(eq(prospectos.id, id));\n    return prospecto || undefined;\n  }\n\n  async createProspecto(insertProspecto: InsertProspecto): Promise<Prospecto> {\n    const [prospecto] = await db\n      .insert(prospectos)\n      .values(insertProspecto)\n      .returning();\n    return prospecto;\n  }\n\n  async updateProspecto(id: string, updateData: Partial<InsertProspecto>): Promise<Prospecto> {\n    const [prospecto] = await db\n      .update(prospectos)\n      .set({ ...updateData, ultimaInteraccion: new Date() })\n      .where(eq(prospectos.id, id))\n      .returning();\n    return prospecto;\n  }\n\n  async deleteProspecto(id: string): Promise<boolean> {\n    try {\n      // First delete related communications\n      await db.delete(comunicaciones).where(eq(comunicaciones.prospectoId, id));\n      \n      // Delete prospect-campaign relationships\n      await db.delete(prospectosCampanas).where(eq(prospectosCampanas.prospectoId, id));\n      \n      // Finally delete the prospect\n      const result = await db.delete(prospectos).where(eq(prospectos.id, id));\n      return (result.rowCount || 0) > 0;\n    } catch (error) {\n      console.error('Error deleting prospect:', error);\n      return false;\n    }\n  }\n\n  async getProspectos(filters: {\n    asesorId?: string;\n    estatus?: string;\n    origen?: string;\n    nivelEducativo?: string;\n    search?: string;\n  } = {}): Promise<Prospecto[]> {\n    let query = db.select().from(prospectos);\n    \n    const conditions = [];\n    \n    if (filters.asesorId) {\n      conditions.push(eq(prospectos.asesorId, filters.asesorId));\n    }\n    \n    if (filters.estatus) {\n      conditions.push(eq(prospectos.estatus, filters.estatus));\n    }\n    \n    if (filters.origen) {\n      conditions.push(eq(prospectos.origen, filters.origen));\n    }\n    \n    if (filters.nivelEducativo) {\n      conditions.push(eq(prospectos.nivelEducativo, filters.nivelEducativo));\n    }\n    \n    if (filters.search) {\n      conditions.push(\n        sql`(${prospectos.nombre} ILIKE ${'%' + filters.search + '%'} OR \n             ${prospectos.email} ILIKE ${'%' + filters.search + '%'})`\n      );\n    }\n    \n    if (conditions.length > 0) {\n      return query.where(and(...conditions)).orderBy(desc(prospectos.ultimaInteraccion));\n    }\n    \n    return query.orderBy(desc(prospectos.ultimaInteraccion));\n  }\n\n  async getProspectosStats(asesorId?: string): Promise<{\n    total: number;\n    porEstatus: any[];\n    porOrigen: any[];\n    porPrioridad: any[];\n    prospectosMes: number;\n  }> {\n    const baseCondition = asesorId ? eq(prospectos.asesorId, asesorId) : undefined;\n    const firstOfMonth = new Date();\n    firstOfMonth.setDate(1);\n    firstOfMonth.setHours(0, 0, 0, 0);\n\n    // Total de prospectos\n    const totalResult = baseCondition \n      ? await db.select({ count: count() }).from(prospectos).where(baseCondition)\n      : await db.select({ count: count() }).from(prospectos);\n    const total = totalResult[0]?.count || 0;\n\n    // Prospectos por estatus\n    const porEstatus = baseCondition \n      ? await db.select({\n          estatus: prospectos.estatus,\n          count: count()\n        }).from(prospectos).where(baseCondition).groupBy(prospectos.estatus)\n      : await db.select({\n          estatus: prospectos.estatus,\n          count: count()\n        }).from(prospectos).groupBy(prospectos.estatus);\n\n    // Prospectos por origen\n    const porOrigen = baseCondition \n      ? await db.select({\n          origen: prospectos.origen,\n          count: count()\n        }).from(prospectos).where(baseCondition).groupBy(prospectos.origen)\n      : await db.select({\n          origen: prospectos.origen,\n          count: count()\n        }).from(prospectos).groupBy(prospectos.origen);\n\n    // Prospectos por prioridad\n    const porPrioridad = baseCondition \n      ? await db.select({\n          prioridad: prospectos.prioridad,\n          count: count()\n        }).from(prospectos).where(baseCondition).groupBy(prospectos.prioridad)\n      : await db.select({\n          prioridad: prospectos.prioridad,\n          count: count()\n        }).from(prospectos).groupBy(prospectos.prioridad);\n\n    // Prospectos del mes actual\n    const mesConditions = [sql`${prospectos.fechaRegistro} >= ${firstOfMonth}`];\n    if (baseCondition) {\n      mesConditions.push(baseCondition);\n    }\n    const mesResult = await db.select({ count: count() }).from(prospectos).where(and(...mesConditions));\n    const prospectosMes = mesResult[0]?.count || 0;\n\n    return {\n      total: Number(total),\n      porEstatus: porEstatus.map(e => ({ estatus: e.estatus, count: Number(e.count) })),\n      porOrigen: porOrigen.map(o => ({ origen: o.origen, count: Number(o.count) })),\n      porPrioridad: porPrioridad.map(p => ({ prioridad: p.prioridad, count: Number(p.count) })),\n      prospectosMes: Number(prospectosMes)\n    };\n  }\n\n  // Métodos de comunicaciones\n  async getComunicacion(id: string): Promise<Comunicacion | undefined> {\n    const [comunicacion] = await db.select().from(comunicaciones).where(eq(comunicaciones.id, id));\n    return comunicacion || undefined;\n  }\n\n  async createComunicacion(insertComunicacion: InsertComunicacion): Promise<Comunicacion> {\n    const [comunicacion] = await db\n      .insert(comunicaciones)\n      .values(insertComunicacion)\n      .returning();\n    \n    // Actualizar última interacción del prospecto\n    await db\n      .update(prospectos)\n      .set({ ultimaInteraccion: new Date() })\n      .where(eq(prospectos.id, insertComunicacion.prospectoId));\n    \n    return comunicacion;\n  }\n\n  async updateComunicacion(id: string, updateData: Partial<InsertComunicacion>): Promise<Comunicacion> {\n    const [comunicacion] = await db\n      .update(comunicaciones)\n      .set(updateData)\n      .where(eq(comunicaciones.id, id))\n      .returning();\n    return comunicacion;\n  }\n\n  async deleteComunicacion(id: string): Promise<boolean> {\n    try {\n      const result = await db.delete(comunicaciones).where(eq(comunicaciones.id, id));\n      return (result.rowCount || 0) > 0;\n    } catch (error) {\n      console.error('Error deleting communication:', error);\n      return false;\n    }\n  }\n\n  async getComunicacionesByProspecto(prospectoId: string): Promise<Comunicacion[]> {\n    return db.select()\n      .from(comunicaciones)\n      .where(eq(comunicaciones.prospectoId, prospectoId))\n      .orderBy(desc(comunicaciones.fechaHora));\n  }\n\n  async getComunicacionesByAsesor(usuarioId: string): Promise<Comunicacion[]> {\n    return db.select()\n      .from(comunicaciones)\n      .where(eq(comunicaciones.usuarioId, usuarioId))\n      .orderBy(desc(comunicaciones.fechaHora));\n  }\n\n  async getComunicacionesConFiltros(filters: {\n    asesorId?: string;\n    tipo?: string;\n    fechaDesde?: string;\n    fechaHasta?: string;\n  } = {}): Promise<Comunicacion[]> {\n    let query = db.select().from(comunicaciones);\n    \n    const conditions = [];\n    \n    if (filters.asesorId) {\n      conditions.push(eq(comunicaciones.usuarioId, filters.asesorId));\n    }\n    \n    if (filters.tipo) {\n      conditions.push(eq(comunicaciones.tipo, filters.tipo));\n    }\n    \n    if (filters.fechaDesde) {\n      conditions.push(sql`${comunicaciones.fechaHora} >= ${new Date(filters.fechaDesde)}`);\n    }\n    \n    if (filters.fechaHasta) {\n      conditions.push(sql`${comunicaciones.fechaHora} <= ${new Date(filters.fechaHasta)}`);\n    }\n    \n    if (conditions.length > 0) {\n      return query.where(and(...conditions)).orderBy(desc(comunicaciones.fechaHora));\n    }\n    \n    return query.orderBy(desc(comunicaciones.fechaHora));\n  }\n\n  async getComunicacionesStats(asesorId?: string, fechaDesde?: string, fechaHasta?: string): Promise<{\n    total: number;\n    porTipo: any[];\n    porResultado: any[];\n    duracionPromedio: number;\n    comunicacionesSemana: number;\n  }> {\n    const conditions = [];\n    \n    // Filtro por asesor\n    if (asesorId) {\n      conditions.push(eq(comunicaciones.usuarioId, asesorId));\n    }\n    \n    // Filtros de fecha\n    if (fechaDesde) {\n      conditions.push(sql`${comunicaciones.fechaHora} >= ${new Date(fechaDesde)}`);\n    }\n    \n    if (fechaHasta) {\n      conditions.push(sql`${comunicaciones.fechaHora} <= ${new Date(fechaHasta)}`);\n    }\n\n    const whereClause = conditions.length > 0 ? and(...conditions) : undefined;\n\n    // Total de comunicaciones\n    const totalResult = whereClause \n      ? await db.select({ count: count() }).from(comunicaciones).where(whereClause)\n      : await db.select({ count: count() }).from(comunicaciones);\n    const total = totalResult[0]?.count || 0;\n\n    // Comunicaciones por tipo\n    const porTipo = whereClause \n      ? await db.select({\n          tipo: comunicaciones.tipo,\n          count: count()\n        }).from(comunicaciones).where(whereClause).groupBy(comunicaciones.tipo)\n      : await db.select({\n          tipo: comunicaciones.tipo,\n          count: count()\n        }).from(comunicaciones).groupBy(comunicaciones.tipo);\n\n    // Comunicaciones por resultado\n    const porResultado = whereClause \n      ? await db.select({\n          resultado: comunicaciones.resultado,\n          count: count()\n        }).from(comunicaciones).where(whereClause).groupBy(comunicaciones.resultado)\n      : await db.select({\n          resultado: comunicaciones.resultado,\n          count: count()\n        }).from(comunicaciones).groupBy(comunicaciones.resultado);\n\n    // Duración promedio\n    const duracionResult = whereClause \n      ? await db.select({\n          promedio: avg(comunicaciones.duracion)\n        }).from(comunicaciones).where(and(whereClause, sql`${comunicaciones.duracion} IS NOT NULL`))\n      : await db.select({\n          promedio: avg(comunicaciones.duracion)\n        }).from(comunicaciones).where(sql`${comunicaciones.duracion} IS NOT NULL`);\n    const duracionPromedio = Number(duracionResult[0]?.promedio) || 0;\n\n    // Comunicaciones de la semana pasada\n    const weekAgo = new Date();\n    weekAgo.setDate(weekAgo.getDate() - 7);\n    weekAgo.setHours(0, 0, 0, 0);\n    \n    const semanaConditions = [sql`${comunicaciones.fechaHora} >= ${weekAgo}`];\n    if (asesorId) {\n      semanaConditions.push(eq(comunicaciones.usuarioId, asesorId));\n    }\n    const semanaResult = await db.select({ count: count() }).from(comunicaciones).where(and(...semanaConditions));\n    const comunicacionesSemana = semanaResult[0]?.count || 0;\n\n    return {\n      total: Number(total),\n      porTipo: porTipo.map(t => ({ tipo: t.tipo, count: Number(t.count) })),\n      porResultado: porResultado.map(r => ({ resultado: r.resultado, count: Number(r.count) })),\n      duracionPromedio,\n      comunicacionesSemana: Number(comunicacionesSemana)\n    };\n  }\n\n  // Métodos de campañas\n  async getCampana(id: string): Promise<Campana | undefined> {\n    const [campana] = await db.select().from(campanas).where(eq(campanas.id, id));\n    return campana || undefined;\n  }\n\n  async createCampana(insertCampana: InsertCampana): Promise<Campana> {\n    const [campana] = await db\n      .insert(campanas)\n      .values(insertCampana)\n      .returning();\n    return campana;\n  }\n\n  async getCampanas(activas?: boolean): Promise<Campana[]> {\n    let query = db.select().from(campanas);\n    \n    if (activas !== undefined) {\n      if (activas) {\n        return query.where(eq(campanas.estado, 'activa')).orderBy(desc(campanas.fechaCreacion));\n      } else {\n        // Para inactivas, incluir tanto pausadas como finalizadas\n        return query.where(\n          sql`${campanas.estado} IN ('pausada', 'finalizada')`\n        ).orderBy(desc(campanas.fechaCreacion));\n      }\n    }\n    \n    return query.orderBy(desc(campanas.fechaCreacion));\n  }\n\n  async updateCampana(id: string, updateData: Partial<InsertCampana>): Promise<Campana> {\n    const [campana] = await db\n      .update(campanas)\n      .set(updateData)\n      .where(eq(campanas.id, id))\n      .returning();\n    return campana;\n  }\n\n  async deleteCampana(id: string): Promise<boolean> {\n    try {\n      // Primero eliminar relaciones con prospectos\n      await db.delete(prospectosCampanas).where(eq(prospectosCampanas.campanaId, id));\n      \n      // Eliminar la campaña\n      const result = await db.delete(campanas).where(eq(campanas.id, id));\n      return (result.rowCount || 0) > 0;\n    } catch (error) {\n      console.error('Error deleting campaign:', error);\n      return false;\n    }\n  }\n\n  async linkProspectoACampana(prospectoId: string, campanaId: string): Promise<boolean> {\n    try {\n      await db\n        .insert(prospectosCampanas)\n        .values({ prospectoId, campanaId })\n        .onConflictDoNothing();\n      return true;\n    } catch (error) {\n      console.error('Error linking prospect to campaign:', error);\n      return false;\n    }\n  }\n\n  async unlinkProspectoACampana(prospectoId: string, campanaId: string): Promise<boolean> {\n    try {\n      const result = await db\n        .delete(prospectosCampanas)\n        .where(\n          and(\n            eq(prospectosCampanas.prospectoId, prospectoId),\n            eq(prospectosCampanas.campanaId, campanaId)\n          )\n        );\n      return (result.rowCount || 0) > 0;\n    } catch (error) {\n      console.error('Error unlinking prospect from campaign:', error);\n      return false;\n    }\n  }\n\n  async getProspectosByCampana(campanaId: string): Promise<Prospecto[]> {\n    return db\n      .select({\n        id: prospectos.id,\n        nombre: prospectos.nombre,\n        telefono: prospectos.telefono,\n        email: prospectos.email,\n        nivelEducativo: prospectos.nivelEducativo,\n        origen: prospectos.origen,\n        estatus: prospectos.estatus,\n        asesorId: prospectos.asesorId,\n        prioridad: prospectos.prioridad,\n        valorInscripcion: prospectos.valorInscripcion,\n        notas: prospectos.notas,\n        fechaRegistro: prospectos.fechaRegistro,\n        ultimaInteraccion: prospectos.ultimaInteraccion,\n        fechaCita: prospectos.fechaCita,\n        datosAdicionales: prospectos.datosAdicionales\n      })\n      .from(prospectos)\n      .innerJoin(prospectosCampanas, eq(prospectos.id, prospectosCampanas.prospectoId))\n      .where(eq(prospectosCampanas.campanaId, campanaId));\n  }\n\n  async getCampanasStats(fechaDesde?: string, fechaHasta?: string, canal?: string): Promise<{\n    totalCampanas: number;\n    campanasActivas: number;\n    presupuestoTotal: number;\n    gastadoTotal: number;\n    roi: number;\n    porCanal: any[];\n    prospectosPorCampana: any[];\n    conversionPorCampana: any[];\n  }> {\n    const conditions = [];\n    \n    if (fechaDesde) {\n      conditions.push(sql`${campanas.fechaCreacion} >= ${new Date(fechaDesde)}`);\n    }\n    \n    if (fechaHasta) {\n      conditions.push(sql`${campanas.fechaCreacion} <= ${new Date(fechaHasta)}`);\n    }\n    \n    if (canal) {\n      conditions.push(eq(campanas.canal, canal));\n    }\n\n    const whereClause = conditions.length > 0 ? and(...conditions) : undefined;\n\n    // Total campañas\n    const totalResult = whereClause \n      ? await db.select({ count: count() }).from(campanas).where(whereClause)\n      : await db.select({ count: count() }).from(campanas);\n    const totalCampanas = totalResult[0]?.count || 0;\n\n    // Campañas activas\n    const activasConditions = [eq(campanas.estado, \"activa\")];\n    if (whereClause) {\n      activasConditions.push(whereClause);\n    }\n    const activasResult = await db.select({ count: count() }).from(campanas).where(and(...activasConditions));\n    const campanasActivas = activasResult[0]?.count || 0;\n\n    // Presupuesto total\n    const presupuestoResult = whereClause \n      ? await db.select({ \n          sum: sql<string>`COALESCE(SUM(CAST(${campanas.presupuesto} AS DECIMAL)), 0)` \n        }).from(campanas).where(whereClause)\n      : await db.select({ \n          sum: sql<string>`COALESCE(SUM(CAST(${campanas.presupuesto} AS DECIMAL)), 0)` \n        }).from(campanas);\n    const presupuestoTotal = Number(presupuestoResult[0]?.sum) || 0;\n\n    // Gastado total\n    const gastadoResult = whereClause \n      ? await db.select({ \n          sum: sql<string>`COALESCE(SUM(CAST(${campanas.gastado} AS DECIMAL)), 0)` \n        }).from(campanas).where(whereClause)\n      : await db.select({ \n          sum: sql<string>`COALESCE(SUM(CAST(${campanas.gastado} AS DECIMAL)), 0)` \n        }).from(campanas);\n    const gastadoTotal = Number(gastadoResult[0]?.sum) || 0;\n\n    // ROI calculado con ingresos reales de inscripciones\n    // Calcular ingresos totales de prospectos inscritos\n    let ingresosQuery = db\n      .select({\n        ingresos: sql<string>`COALESCE(SUM(CAST(${prospectos.valorInscripcion} AS DECIMAL)), 0)`\n      })\n      .from(prospectos)\n      .innerJoin(prospectosCampanas, eq(prospectos.id, prospectosCampanas.prospectoId))\n      .innerJoin(campanas, eq(prospectosCampanas.campanaId, campanas.id))\n      .where(\n        and(\n          eq(prospectos.estatus, 'inscrito'),\n          whereClause ? whereClause : sql`true`\n        )\n      );\n\n    const ingresosResult = await ingresosQuery;\n    const ingresosTotal = Number(ingresosResult[0]?.ingresos) || 0;\n\n    // ROI = ((Ingresos - Costos) / Costos) * 100\n    const roi = gastadoTotal > 0 ? ((ingresosTotal - gastadoTotal) / gastadoTotal) * 100 : 0;\n\n    // Campañas por canal\n    const porCanal = whereClause \n      ? await db.select({\n          canal: campanas.canal,\n          count: count(),\n          presupuesto: sql<string>`COALESCE(SUM(CAST(${campanas.presupuesto} AS DECIMAL)), 0)`,\n          gastado: sql<string>`COALESCE(SUM(CAST(${campanas.gastado} AS DECIMAL)), 0)`\n        }).from(campanas).where(whereClause).groupBy(campanas.canal)\n      : await db.select({\n          canal: campanas.canal,\n          count: count(),\n          presupuesto: sql<string>`COALESCE(SUM(CAST(${campanas.presupuesto} AS DECIMAL)), 0)`,\n          gastado: sql<string>`COALESCE(SUM(CAST(${campanas.gastado} AS DECIMAL)), 0)`\n        }).from(campanas).groupBy(campanas.canal);\n\n    return {\n      totalCampanas: Number(totalCampanas),\n      campanasActivas: Number(campanasActivas),\n      presupuestoTotal,\n      gastadoTotal,\n      roi,\n      porCanal: porCanal.map(c => ({\n        canal: c.canal,\n        count: Number(c.count),\n        presupuesto: Number(c.presupuesto),\n        gastado: Number(c.gastado)\n      })),\n      prospectosPorCampana: [], // Implementar si necesario\n      conversionPorCampana: []   // Implementar si necesario\n    };\n  }\n\n  async getCampanaStats(campanaId: string): Promise<{\n    prospectos: number;\n    inscripciones: number;\n    tasaConversion: number;\n    costoProspecto: number;\n    roi: number;\n    gastado: number;\n    presupuesto: number;\n  }> {\n    // Obtener campaña\n    const campana = await this.getCampana(campanaId);\n    if (!campana) {\n      throw new Error('Campaña no encontrada');\n    }\n\n    const presupuesto = Number(campana.presupuesto);\n    const gastado = Number(campana.gastado);\n\n    // Contar prospectos vinculados\n    const [prospectosResult] = await db\n      .select({ count: count() })\n      .from(prospectosCampanas)\n      .where(eq(prospectosCampanas.campanaId, campanaId));\n\n    const prospectosCount = Number(prospectosResult.count);\n\n    // Contar inscripciones (prospectos con estatus inscrito)\n    const inscripcionesResult = await db\n      .select({ count: count() })\n      .from(prospectos)\n      .innerJoin(prospectosCampanas, eq(prospectos.id, prospectosCampanas.prospectoId))\n      .where(\n        and(\n          eq(prospectosCampanas.campanaId, campanaId),\n          eq(prospectos.estatus, 'inscrito')\n        )\n      );\n\n    const inscripciones = Number(inscripcionesResult[0]?.count) || 0;\n\n    // Calcular ingresos reales de inscripciones para ROI\n    const ingresosResult = await db\n      .select({\n        ingresos: sql<string>`COALESCE(SUM(CAST(${prospectos.valorInscripcion} AS DECIMAL)), 0)`\n      })\n      .from(prospectos)\n      .innerJoin(prospectosCampanas, eq(prospectos.id, prospectosCampanas.prospectoId))\n      .where(\n        and(\n          eq(prospectosCampanas.campanaId, campanaId),\n          eq(prospectos.estatus, 'inscrito')\n        )\n      );\n\n    const ingresos = Number(ingresosResult[0]?.ingresos) || 0;\n\n    // Calcular métricas\n    const tasaConversion = prospectosCount > 0 ? (inscripciones / prospectosCount) * 100 : 0;\n    const costoProspecto = prospectosCount > 0 ? gastado / prospectosCount : 0;\n    const roi = gastado > 0 ? ((ingresos - gastado) / gastado) * 100 : 0;\n\n    return {\n      prospectos: prospectosCount,\n      inscripciones,\n      tasaConversion,\n      costoProspecto,\n      roi,\n      gastado,\n      presupuesto\n    };\n  }\n\n  // Métricas para Dashboard Director\n  async getMetricasDirector(): Promise<{\n    totalProspectos: number;\n    totalInscritos: number;\n    tasaConversion: number;\n    costoPromedio: number;\n    prospectosPorSemana: any[];\n    inscritosPorAsesor: any[];\n    origenesData: any[];\n  }> {\n    // Total prospectos\n    const [totalProspectosResult] = await db\n      .select({ count: count() })\n      .from(prospectos);\n    \n    // Total inscritos\n    const [totalInscritosResult] = await db\n      .select({ count: count() })\n      .from(prospectos)\n      .where(eq(prospectos.estatus, 'inscrito'));\n    \n    const totalProspectos = totalProspectosResult.count;\n    const totalInscritos = totalInscritosResult.count;\n    const tasaConversion = totalProspectos > 0 ? (totalInscritos / totalProspectos) * 100 : 0;\n    \n    // Prospectos por semana (últimas 4 semanas)\n    const prospectosPorSemana = await db\n      .select({\n        semana: sql`EXTRACT(WEEK FROM ${prospectos.fechaRegistro})`,\n        count: count()\n      })\n      .from(prospectos)\n      .where(sql`${prospectos.fechaRegistro} >= NOW() - INTERVAL '4 weeks'`)\n      .groupBy(sql`EXTRACT(WEEK FROM ${prospectos.fechaRegistro})`)\n      .orderBy(sql`EXTRACT(WEEK FROM ${prospectos.fechaRegistro})`);\n    \n    // Inscritos por asesor\n    const inscritosPorAsesor = await db\n      .select({\n        asesor: users.nombre,\n        inscritos: count()\n      })\n      .from(prospectos)\n      .leftJoin(users, eq(prospectos.asesorId, users.id))\n      .where(eq(prospectos.estatus, 'inscrito'))\n      .groupBy(users.nombre);\n    \n    // Orígenes de prospectos\n    const origenesData = await db\n      .select({\n        origen: prospectos.origen,\n        count: count()\n      })\n      .from(prospectos)\n      .groupBy(prospectos.origen);\n\n    // Calculate average cost from active campaigns\n    const [costoPromedioResult] = await db\n      .select({\n        promedio: avg(campanas.gastado)\n      })\n      .from(campanas)\n      .where(eq(campanas.estado, 'activa'));\n    \n    const costoPromedio = costoPromedioResult?.promedio ? \n      parseFloat(costoPromedioResult.promedio.toString()) : 0;\n\n    return {\n      totalProspectos,\n      totalInscritos,\n      tasaConversion,\n      costoPromedio,\n      prospectosPorSemana,\n      inscritosPorAsesor,\n      origenesData\n    };\n  }\n\n  // Métricas para Dashboard Gerente\n  async getMetricasGerente(): Promise<{\n    asesoresPerformance: any[];\n    actividadSemanal: any[];\n  }> {\n    // Performance por asesor\n    const asesoresPerformance = await db\n      .select({\n        nombre: users.nombre,\n        prospectos: count(prospectos.id),\n        inscritos: sql`COUNT(CASE WHEN ${prospectos.estatus} = 'inscrito' THEN 1 END)`,\n        comunicaciones: sql`(SELECT COUNT(*) FROM ${comunicaciones} WHERE ${comunicaciones.usuarioId} = ${users.id})`\n      })\n      .from(users)\n      .leftJoin(prospectos, eq(users.id, prospectos.asesorId))\n      .where(eq(users.rol, 'asesor'))\n      .groupBy(users.id, users.nombre);\n    \n    // Actividad semanal del equipo\n    const actividadSemanal = await db\n      .select({\n        semana: sql`EXTRACT(WEEK FROM ${comunicaciones.fechaHora})`,\n        llamadas: sql`COUNT(CASE WHEN ${comunicaciones.tipo} = 'llamada' THEN 1 END)`,\n        emails: sql`COUNT(CASE WHEN ${comunicaciones.tipo} = 'email' THEN 1 END)`,\n        whatsapp: sql`COUNT(CASE WHEN ${comunicaciones.tipo} = 'whatsapp' THEN 1 END)`\n      })\n      .from(comunicaciones)\n      .where(sql`${comunicaciones.fechaHora} >= NOW() - INTERVAL '4 weeks'`)\n      .groupBy(sql`EXTRACT(WEEK FROM ${comunicaciones.fechaHora})`)\n      .orderBy(sql`EXTRACT(WEEK FROM ${comunicaciones.fechaHora})`);\n\n    return {\n      asesoresPerformance,\n      actividadSemanal\n    };\n  }\n\n  // Métricas para Dashboard Asesor\n  async getMetricasAsesor(asesorId: string): Promise<{\n    misProspectos: Prospecto[];\n    proximasCitas: any[];\n    metricsPersonales: any;\n  }> {\n    // Mis prospectos\n    const misProspectos = await this.getProspectos({ asesorId });\n    \n    // Próximas citas\n    const proximasCitas = await db\n      .select({\n        prospecto: prospectos.nombre,\n        fecha: prospectos.fechaCita,\n        telefono: prospectos.telefono\n      })\n      .from(prospectos)\n      .where(\n        and(\n          eq(prospectos.asesorId, asesorId),\n          sql`${prospectos.fechaCita} >= NOW()`,\n          eq(prospectos.estatus, 'cita_agendada')\n        )\n      )\n      .orderBy(prospectos.fechaCita);\n    \n    // Métricas personales\n    const [metricsResult] = await db\n      .select({\n        totalProspectos: count(),\n        inscritos: sql`COUNT(CASE WHEN ${prospectos.estatus} = 'inscrito' THEN 1 END)`,\n        comunicaciones: sql`(SELECT COUNT(*) FROM ${comunicaciones} WHERE ${comunicaciones.usuarioId} = ${asesorId})`\n      })\n      .from(prospectos)\n      .where(eq(prospectos.asesorId, asesorId));\n\n    return {\n      misProspectos,\n      proximasCitas,\n      metricsPersonales: metricsResult\n    };\n  }\n\n  // MÉTODOS DE REPORTES\n  \n  // Obtener reporte individual\n  async getReporte(id: string): Promise<any> {\n    const [reporte] = await db.select().from(reportes).where(eq(reportes.id, id));\n    return reporte || undefined;\n  }\n\n  // Obtener todos los reportes\n  async getReportes(): Promise<any[]> {\n    return db.select().from(reportes).orderBy(desc(reportes.fechaCreacion));\n  }\n\n  // Crear nuevo reporte\n  async createReporte(insertReporte: any): Promise<any> {\n    // Calcular próxima ejecución basada en frecuencia\n    const proximaEjecucion = this.calcularProximaEjecucion(insertReporte.frecuencia);\n    \n    const [reporte] = await db\n      .insert(reportes)\n      .values({\n        ...insertReporte,\n        proximaEjecucion\n      })\n      .returning();\n      \n    return reporte;\n  }\n\n  // Actualizar reporte\n  async updateReporte(id: string, updateData: any): Promise<any> {\n    // Si se actualiza la frecuencia, recalcular próxima ejecución\n    if (updateData.frecuencia) {\n      updateData.proximaEjecucion = this.calcularProximaEjecucion(updateData.frecuencia);\n    }\n    \n    const [reporte] = await db\n      .update(reportes)\n      .set(updateData)\n      .where(eq(reportes.id, id))\n      .returning();\n      \n    return reporte;\n  }\n\n  // Eliminar reporte\n  async deleteReporte(id: string): Promise<boolean> {\n    try {\n      const result = await db.delete(reportes).where(eq(reportes.id, id));\n      return (result.rowCount || 0) > 0;\n    } catch (error) {\n      console.error('Error deleting report:', error);\n      return false;\n    }\n  }\n\n  // Ejecutar reporte específico\n  async ejecutarReporte(id: string): Promise<boolean> {\n    try {\n      const reporte = await this.getReporte(id);\n      if (!reporte) {\n        console.error('Report not found:', id);\n        return false;\n      }\n\n      // Generar datos del reporte\n      const datos = await this.generarDatosReporte(reporte.tipo, reporte.configuracion);\n      \n      // Aquí se podría enviar por email a los destinatarios\n      // Por ahora solo actualizamos la fecha de ejecución\n      \n      const ahora = new Date();\n      const proximaEjecucion = this.calcularProximaEjecucion(reporte.frecuencia, ahora);\n      \n      await db\n        .update(reportes)\n        .set({\n          ultimaEjecucion: ahora,\n          proximaEjecucion\n        })\n        .where(eq(reportes.id, id));\n        \n      console.log(`Report ${reporte.nombre} executed successfully`);\n      return true;\n    } catch (error) {\n      console.error('Error executing report:', error);\n      return false;\n    }\n  }\n\n  // Generar datos específicos por tipo de reporte\n  async generarDatosReporte(tipo: string, filtros?: any): Promise<any> {\n    const ahora = new Date();\n    const fechaDesde = filtros?.fechaDesde ? new Date(filtros.fechaDesde) : new Date(ahora.getFullYear(), ahora.getMonth() - 1, 1);\n    const fechaHasta = filtros?.fechaHasta ? new Date(filtros.fechaHasta) : ahora;\n\n    switch (tipo) {\n      case 'ejecutivo':\n        return await this.generarReporteEjecutivo(fechaDesde, fechaHasta, filtros);\n      \n      case 'asesores':\n        return await this.generarReporteAsesores(fechaDesde, fechaHasta, filtros);\n      \n      case 'campanas':\n        return await this.generarReporteCampanas(fechaDesde, fechaHasta, filtros);\n      \n      case 'conversiones':\n        return await this.generarReporteConversiones(fechaDesde, fechaHasta, filtros);\n      \n      default:\n        throw new Error(`Tipo de reporte no soportado: ${tipo}`);\n    }\n  }\n\n  // Exportar reporte en formato específico\n  async exportarReporte(datos: any, formato: string, tipoReporte: string): Promise<string> {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const fileName = `reporte_${tipoReporte}_${timestamp}.${formato.toLowerCase()}`;\n    \n    try {\n      switch (formato.toLowerCase()) {\n        case 'csv':\n          return this.exportarCSV(datos, fileName);\n        \n        case 'pdf':\n          return this.exportarPDF(datos, fileName, tipoReporte);\n        \n        case 'excel':\n          return this.exportarExcel(datos, fileName);\n        \n        default:\n          throw new Error(`Formato no soportado: ${formato}`);\n      }\n    } catch (error) {\n      console.error('Error exporting report:', error);\n      throw error;\n    }\n  }\n\n  // Dashboard de reportes\n  async getDashboardReportes(): Promise<{\n    totalReportes: number;\n    reportesActivos: number;\n    ultimasEjecuciones: any[];\n    reportesPendientes: number;\n  }> {\n    // Total de reportes\n    const [totalResult] = await db.select({ count: count() }).from(reportes);\n    const totalReportes = Number(totalResult?.count || 0);\n\n    // Reportes activos\n    const [activosResult] = await db\n      .select({ count: count() })\n      .from(reportes)\n      .where(eq(reportes.activo, true));\n    const reportesActivos = Number(activosResult?.count || 0);\n\n    // Últimas ejecuciones\n    const ultimasEjecuciones = await db\n      .select({\n        id: reportes.id,\n        nombre: reportes.nombre,\n        tipo: reportes.tipo,\n        ultimaEjecucion: reportes.ultimaEjecucion,\n        proximaEjecucion: reportes.proximaEjecucion\n      })\n      .from(reportes)\n      .where(sql`${reportes.ultimaEjecucion} IS NOT NULL`)\n      .orderBy(desc(reportes.ultimaEjecucion))\n      .limit(10);\n\n    // Reportes pendientes de ejecución\n    const [pendientesResult] = await db\n      .select({ count: count() })\n      .from(reportes)\n      .where(\n        and(\n          eq(reportes.activo, true),\n          sql`${reportes.proximaEjecucion} <= NOW()`\n        )\n      );\n    const reportesPendientes = Number(pendientesResult?.count || 0);\n\n    return {\n      totalReportes,\n      reportesActivos,\n      ultimasEjecuciones,\n      reportesPendientes\n    };\n  }\n\n  // MÉTODOS AUXILIARES PARA REPORTES\n\n  // Calcular próxima ejecución basada en frecuencia\n  private calcularProximaEjecucion(frecuencia: string, desde?: Date): Date {\n    const base = desde || new Date();\n    const proxima = new Date(base);\n\n    switch (frecuencia) {\n      case 'diario':\n        proxima.setDate(proxima.getDate() + 1);\n        break;\n      case 'semanal':\n        proxima.setDate(proxima.getDate() + 7);\n        break;\n      case 'mensual':\n        proxima.setMonth(proxima.getMonth() + 1);\n        break;\n      default:\n        // Default a semanal si no se reconoce la frecuencia\n        proxima.setDate(proxima.getDate() + 7);\n    }\n\n    return proxima;\n  }\n\n  // Generar reporte ejecutivo\n  private async generarReporteEjecutivo(fechaDesde: Date, fechaHasta: Date, filtros?: any): Promise<any> {\n    const metricas = await this.getMetricasDirector();\n    \n    // Estadísticas adicionales por período\n    const [prospectosPerido] = await db\n      .select({ count: count() })\n      .from(prospectos)\n      .where(\n        and(\n          sql`${prospectos.fechaRegistro} >= ${fechaDesde}`,\n          sql`${prospectos.fechaRegistro} <= ${fechaHasta}`\n        )\n      );\n\n    const [inscritosPeriodo] = await db\n      .select({ count: count() })\n      .from(prospectos)\n      .where(\n        and(\n          eq(prospectos.estatus, 'inscrito'),\n          sql`${prospectos.ultimaInteraccion} >= ${fechaDesde}`,\n          sql`${prospectos.ultimaInteraccion} <= ${fechaHasta}`\n        )\n      );\n\n    const [gastoCampanas] = await db\n      .select({ total: sum(campanas.gastado) })\n      .from(campanas)\n      .where(\n        and(\n          sql`${campanas.fechaInicio} <= ${fechaHasta}`,\n          sql`${campanas.fechaFin} >= ${fechaDesde}`\n        )\n      );\n\n    return {\n      periodo: {\n        desde: fechaDesde,\n        hasta: fechaHasta\n      },\n      resumenGeneral: {\n        ...metricas,\n        prospectosPeriodo: Number(prospectosPerido?.count || 0),\n        inscritosPeriodo: Number(inscritosPeriodo?.count || 0),\n        gastoCampanas: parseFloat(gastoCampanas?.total?.toString() || '0')\n      },\n      generadoEn: new Date()\n    };\n  }\n\n  // Generar reporte de asesores\n  private async generarReporteAsesores(fechaDesde: Date, fechaHasta: Date, filtros?: any): Promise<any> {\n    const asesores = await db\n      .select({\n        id: users.id,\n        nombre: users.nombre,\n        email: users.email,\n        prospectos: sql`COUNT(DISTINCT ${prospectos.id})`,\n        inscritos: sql`COUNT(DISTINCT CASE WHEN ${prospectos.estatus} = 'inscrito' THEN ${prospectos.id} END)`,\n        comunicaciones: sql`COUNT(DISTINCT ${comunicaciones.id})`,\n        promedioTiempo: sql`AVG(EXTRACT(EPOCH FROM (${prospectos.ultimaInteraccion} - ${prospectos.fechaRegistro})) / 86400)` // días\n      })\n      .from(users)\n      .leftJoin(prospectos, eq(users.id, prospectos.asesorId))\n      .leftJoin(comunicaciones, eq(users.id, comunicaciones.usuarioId))\n      .where(\n        and(\n          eq(users.rol, 'asesor'),\n          filtros?.asesorId ? eq(users.id, filtros.asesorId) : sql`1=1`,\n          sql`${prospectos.fechaRegistro} >= ${fechaDesde}`,\n          sql`${prospectos.fechaRegistro} <= ${fechaHasta}`\n        )\n      )\n      .groupBy(users.id, users.nombre, users.email);\n\n    // Performance comparativa\n    const performance = asesores.map(asesor => ({\n      ...asesor,\n      tasaConversion: Number(asesor.inscritos) / Math.max(Number(asesor.prospectos), 1) * 100,\n      comunicacionesPorProspecto: Number(asesor.comunicaciones) / Math.max(Number(asesor.prospectos), 1),\n      tiempoPromedioConversion: parseFloat(asesor.promedioTiempo?.toString() || '0')\n    }));\n\n    return {\n      periodo: { desde: fechaDesde, hasta: fechaHasta },\n      asesores: performance,\n      resumen: {\n        totalAsesores: asesores.length,\n        mejorAsesor: performance.reduce((best, current) => \n          current.tasaConversion > best.tasaConversion ? current : best, performance[0]),\n        promedioConversion: performance.reduce((sum, a) => sum + a.tasaConversion, 0) / performance.length\n      },\n      generadoEn: new Date()\n    };\n  }\n\n  // Generar reporte de campañas\n  private async generarReporteCampanas(fechaDesde: Date, fechaHasta: Date, filtros?: any): Promise<any> {\n    const campanasStats = await this.getCampanasStats(\n      fechaDesde.toISOString(),\n      fechaHasta.toISOString(),\n      filtros?.canal\n    );\n\n    // Detalle por campaña\n    const campanasDetalle = await db\n      .select({\n        id: campanas.id,\n        nombre: campanas.nombre,\n        canal: campanas.canal,\n        presupuesto: campanas.presupuesto,\n        gastado: campanas.gastado,\n        estado: campanas.estado,\n        prospectos: sql`COUNT(DISTINCT ${prospectosCampanas.prospectoId})`,\n        inscritos: sql`COUNT(DISTINCT CASE WHEN ${prospectos.estatus} = 'inscrito' THEN ${prospectos.id} END)`\n      })\n      .from(campanas)\n      .leftJoin(prospectosCampanas, eq(campanas.id, prospectosCampanas.campanaId))\n      .leftJoin(prospectos, eq(prospectosCampanas.prospectoId, prospectos.id))\n      .where(\n        and(\n          sql`${campanas.fechaInicio} <= ${fechaHasta}`,\n          sql`${campanas.fechaFin} >= ${fechaDesde}`,\n          filtros?.canal ? eq(campanas.canal, filtros.canal) : sql`1=1`\n        )\n      )\n      .groupBy(campanas.id, campanas.nombre, campanas.canal, campanas.presupuesto, campanas.gastado, campanas.estado);\n\n    return {\n      periodo: { desde: fechaDesde, hasta: fechaHasta },\n      resumenGeneral: campanasStats,\n      detalleCampanas: campanasDetalle.map(campana => ({\n        ...campana,\n        tasaConversion: Number(campana.inscritos) / Math.max(Number(campana.prospectos), 1) * 100,\n        costoProspecto: parseFloat(campana.gastado?.toString() || '0') / Math.max(Number(campana.prospectos), 1),\n        roi: (parseFloat(campana.gastado?.toString() || '0') > 0) ? \n          (Number(campana.inscritos) * 1000 - parseFloat(campana.gastado?.toString() || '0')) / parseFloat(campana.gastado?.toString() || '1') * 100 : 0\n      })),\n      generadoEn: new Date()\n    };\n  }\n\n  // Generar reporte de conversiones\n  private async generarReporteConversiones(fechaDesde: Date, fechaHasta: Date, filtros?: any): Promise<any> {\n    // Embudo de conversión por estatus\n    const embudo = await db\n      .select({\n        estatus: prospectos.estatus,\n        count: count(),\n        origen: prospectos.origen\n      })\n      .from(prospectos)\n      .where(\n        and(\n          sql`${prospectos.fechaRegistro} >= ${fechaDesde}`,\n          sql`${prospectos.fechaRegistro} <= ${fechaHasta}`\n        )\n      )\n      .groupBy(prospectos.estatus, prospectos.origen);\n\n    // Tiempo promedio por etapa\n    const tiemposPorEtapa = await db\n      .select({\n        estatus: prospectos.estatus,\n        tiempoPromedio: sql`AVG(EXTRACT(EPOCH FROM (${prospectos.ultimaInteraccion} - ${prospectos.fechaRegistro})) / 86400)`\n      })\n      .from(prospectos)\n      .where(\n        and(\n          sql`${prospectos.fechaRegistro} >= ${fechaDesde}`,\n          sql`${prospectos.fechaRegistro} <= ${fechaHasta}`\n        )\n      )\n      .groupBy(prospectos.estatus);\n\n    // Conversiones por origen\n    const conversionesPorOrigen = await db\n      .select({\n        origen: prospectos.origen,\n        total: count(),\n        inscritos: sql`COUNT(CASE WHEN ${prospectos.estatus} = 'inscrito' THEN 1 END)`\n      })\n      .from(prospectos)\n      .where(\n        and(\n          sql`${prospectos.fechaRegistro} >= ${fechaDesde}`,\n          sql`${prospectos.fechaRegistro} <= ${fechaHasta}`\n        )\n      )\n      .groupBy(prospectos.origen);\n\n    return {\n      periodo: { desde: fechaDesde, hasta: fechaHasta },\n      embudoConversion: embudo,\n      tiemposPorEtapa: tiemposPorEtapa.map(t => ({\n        ...t,\n        tiempoPromedio: parseFloat(t.tiempoPromedio?.toString() || '0')\n      })),\n      conversionesPorOrigen: conversionesPorOrigen.map(c => ({\n        ...c,\n        tasaConversion: Number(c.inscritos) / Math.max(Number(c.total), 1) * 100\n      })),\n      generadoEn: new Date()\n    };\n  }\n\n  // Métodos de exportación\n  private async exportarCSV(datos: any, fileName: string): Promise<string> {\n    const reportsDir = path.join(process.cwd(), 'reports');\n    await fs.ensureDir(reportsDir);\n    const filePath = path.join(reportsDir, fileName);\n    \n    if (Array.isArray(datos.asesores) || Array.isArray(datos.detalleCampanas)) {\n      // Para reportes tabulares\n      const records = datos.asesores || datos.detalleCampanas || [];\n      if (records.length > 0) {\n        const headers = Object.keys(records[0]).map(key => ({ id: key, title: key.toUpperCase() }));\n        const csvWriter = createObjectCsvWriter({\n          path: filePath,\n          header: headers\n        });\n        await csvWriter.writeRecords(records);\n      }\n    } else {\n      // Para datos no tabulares, crear CSV simple\n      const csvContent = this.objetoACSV(datos);\n      await fs.writeFile(filePath, csvContent, 'utf8');\n    }\n    \n    console.log(`CSV generated: ${filePath}`);\n    return filePath;\n  }\n\n  private async exportarPDF(datos: any, fileName: string, tipoReporte: string): Promise<string> {\n    const reportsDir = path.join(process.cwd(), 'reports');\n    await fs.ensureDir(reportsDir);\n    const filePath = path.join(reportsDir, fileName);\n    \n    const doc = new PDFDocument({ margin: 50 });\n    const stream = fs.createWriteStream(filePath);\n    doc.pipe(stream);\n    \n    // Header\n    doc.fontSize(20).text('Reporte CRM Educativo', { align: 'center' });\n    doc.fontSize(16).text(this.getTituloReporte(tipoReporte), { align: 'center' });\n    doc.moveDown();\n    \n    if (datos.periodo) {\n      doc.fontSize(12).text(`Período: ${new Date(datos.periodo.desde).toLocaleDateString()} - ${new Date(datos.periodo.hasta).toLocaleDateString()}`);\n      doc.moveDown();\n    }\n    \n    // Content based on report type\n    switch (tipoReporte) {\n      case 'ejecutivo':\n        this.escribirReporteEjecutivoPDF(doc, datos);\n        break;\n      case 'asesores':\n        this.escribirReporteAsesoresPDF(doc, datos);\n        break;\n      case 'campanas':\n        this.escribirReporteCampanasPDF(doc, datos);\n        break;\n      default:\n        doc.text('Datos del reporte:', { underline: true });\n        doc.text(JSON.stringify(datos, null, 2));\n    }\n    \n    doc.end();\n    \n    return new Promise((resolve, reject) => {\n      stream.on('finish', () => {\n        console.log(`PDF generated: ${filePath}`);\n        resolve(filePath);\n      });\n      stream.on('error', reject);\n    });\n  }\n\n  private async exportarExcel(datos: any, fileName: string): Promise<string> {\n    const reportsDir = path.join(process.cwd(), 'reports');\n    await fs.ensureDir(reportsDir);\n    const filePath = path.join(reportsDir, fileName);\n    \n    const workbook = new ExcelJS.Workbook();\n    workbook.creator = 'CRM Educativo';\n    workbook.created = new Date();\n    \n    // Crear hoja principal\n    const worksheet = workbook.addWorksheet('Reporte');\n    \n    if (datos.asesores && Array.isArray(datos.asesores)) {\n      // Reporte de asesores\n      const headers = ['Nombre', 'Email', 'Prospectos', 'Inscritos', 'Tasa Conversión %', 'Comunicaciones'];\n      worksheet.addRow(headers);\n      \n      datos.asesores.forEach((asesor: any) => {\n        worksheet.addRow([\n          asesor.nombre,\n          asesor.email,\n          asesor.prospectos,\n          asesor.inscritos,\n          Number(asesor.tasaConversion).toFixed(2),\n          asesor.comunicaciones\n        ]);\n      });\n    } else if (datos.detalleCampanas && Array.isArray(datos.detalleCampanas)) {\n      // Reporte de campañas\n      const headers = ['Nombre', 'Canal', 'Estado', 'Presupuesto', 'Gastado', 'Prospectos', 'Inscritos', 'ROI %'];\n      worksheet.addRow(headers);\n      \n      datos.detalleCampanas.forEach((campana: any) => {\n        worksheet.addRow([\n          campana.nombre,\n          campana.canal,\n          campana.estado,\n          Number(campana.presupuesto),\n          Number(campana.gastado),\n          campana.prospectos,\n          campana.inscritos,\n          Number(campana.roi).toFixed(2)\n        ]);\n      });\n    } else {\n      // Reporte general con resumen\n      worksheet.addRow(['Métrica', 'Valor']);\n      \n      if (datos.resumenGeneral) {\n        const resumen = datos.resumenGeneral;\n        Object.entries(resumen).forEach(([key, value]) => {\n          if (typeof value === 'number' || typeof value === 'string') {\n            worksheet.addRow([key, value]);\n          }\n        });\n      }\n    }\n    \n    // Estilo de headers\n    worksheet.getRow(1).font = { bold: true };\n    worksheet.getRow(1).fill = {\n      type: 'pattern',\n      pattern: 'solid',\n      fgColor: { argb: 'FFE6F2FF' }\n    };\n    \n    // Auto-resize columns\n    worksheet.columns.forEach(column => {\n      if (column.header) {\n        column.width = Math.max(column.header.length + 2, 12);\n      }\n    });\n    \n    await workbook.xlsx.writeFile(filePath);\n    console.log(`Excel generated: ${filePath}`);\n    return filePath;\n  }\n\n  private objetoACSV(obj: any): string {\n    // Convertir objeto a CSV básico\n    if (Array.isArray(obj)) {\n      if (obj.length === 0) return '';\n      \n      const headers = Object.keys(obj[0]);\n      const csvHeaders = headers.join(',');\n      const csvRows = obj.map(row => \n        headers.map(header => `\"${row[header] || ''}\"`).join(',')\n      );\n      \n      return [csvHeaders, ...csvRows].join('\\n');\n    }\n    \n    // Para objetos simples\n    const entries = Object.entries(obj);\n    return entries.map(([key, value]) => `\"${key}\",\"${value}\"`).join('\\n');\n  }\n\n  // Método faltante: getTituloReporte\n  private getTituloReporte(tipoReporte: string): string {\n    switch (tipoReporte) {\n      case 'ejecutivo':\n        return 'Reporte Ejecutivo';\n      case 'asesores':\n        return 'Reporte de Performance de Asesores';\n      case 'campanas':\n        return 'Reporte de Campañas';\n      case 'conversiones':\n        return 'Reporte de Conversiones';\n      default:\n        return 'Reporte Personalizado';\n    }\n  }\n\n  // Método faltante: escribirReporteEjecutivoPDF\n  private escribirReporteEjecutivoPDF(doc: any, datos: any): void {\n    if (datos.resumenGeneral) {\n      const resumen = datos.resumenGeneral;\n      \n      doc.fontSize(14).text('Resumen Ejecutivo', { underline: true });\n      doc.moveDown();\n      \n      doc.fontSize(12);\n      doc.text(`Total de Prospectos: ${resumen.totalProspectos || 0}`);\n      doc.text(`Total Inscritos: ${resumen.totalInscritos || 0}`);\n      doc.text(`Tasa de Conversión: ${(resumen.tasaConversion || 0).toFixed(2)}%`);\n      doc.text(`Costo Promedio: $${(resumen.costoPromedio || 0).toFixed(2)}`);\n      \n      if (resumen.prospectosPeriodo !== undefined) {\n        doc.text(`Prospectos del Período: ${resumen.prospectosPeriodo}`);\n      }\n      if (resumen.inscritosPeriodo !== undefined) {\n        doc.text(`Inscritos del Período: ${resumen.inscritosPeriodo}`);\n      }\n      if (resumen.gastoCampanas !== undefined) {\n        doc.text(`Gasto en Campañas: $${resumen.gastoCampanas.toFixed(2)}`);\n      }\n      \n      doc.moveDown();\n    }\n    \n    if (datos.origenesData && Array.isArray(datos.origenesData)) {\n      doc.fontSize(14).text('Prospectos por Origen', { underline: true });\n      doc.moveDown();\n      doc.fontSize(12);\n      \n      datos.origenesData.forEach((origen: any) => {\n        doc.text(`${origen.origen}: ${origen.count} prospectos`);\n      });\n      doc.moveDown();\n    }\n  }\n\n  // Método faltante: escribirReporteAsesoresPDF\n  private escribirReporteAsesoresPDF(doc: any, datos: any): void {\n    if (datos.asesores && Array.isArray(datos.asesores)) {\n      doc.fontSize(14).text('Performance de Asesores', { underline: true });\n      doc.moveDown();\n      doc.fontSize(12);\n      \n      datos.asesores.forEach((asesor: any) => {\n        doc.text(`Asesor: ${asesor.nombre}`);\n        doc.text(`  Email: ${asesor.email}`);\n        doc.text(`  Prospectos: ${asesor.prospectos}`);\n        doc.text(`  Inscritos: ${asesor.inscritos}`);\n        doc.text(`  Tasa Conversión: ${(asesor.tasaConversion || 0).toFixed(2)}%`);\n        doc.text(`  Comunicaciones: ${asesor.comunicaciones}`);\n        doc.moveDown(0.5);\n      });\n    }\n    \n    if (datos.resumen) {\n      doc.fontSize(14).text('Resumen', { underline: true });\n      doc.moveDown();\n      doc.fontSize(12);\n      \n      doc.text(`Total Asesores: ${datos.resumen.totalAsesores}`);\n      doc.text(`Promedio Conversión: ${(datos.resumen.promedioConversion || 0).toFixed(2)}%`);\n      \n      if (datos.resumen.mejorAsesor) {\n        doc.text(`Mejor Asesor: ${datos.resumen.mejorAsesor.nombre} (${(datos.resumen.mejorAsesor.tasaConversion || 0).toFixed(2)}%)`);\n      }\n    }\n  }\n\n  // Método faltante: escribirReporteCampanasPDF\n  private escribirReporteCampanasPDF(doc: any, datos: any): void {\n    if (datos.resumenGeneral) {\n      const resumen = datos.resumenGeneral;\n      \n      doc.fontSize(14).text('Resumen de Campañas', { underline: true });\n      doc.moveDown();\n      doc.fontSize(12);\n      \n      doc.text(`Total Campañas: ${resumen.totalCampanas || 0}`);\n      doc.text(`Campañas Activas: ${resumen.campanasActivas || 0}`);\n      doc.text(`Presupuesto Total: $${(resumen.presupuestoTotal || 0).toFixed(2)}`);\n      doc.text(`Gastado Total: $${(resumen.gastadoTotal || 0).toFixed(2)}`);\n      doc.text(`ROI: ${(resumen.roi || 0).toFixed(2)}%`);\n      doc.moveDown();\n    }\n    \n    if (datos.detalleCampanas && Array.isArray(datos.detalleCampanas)) {\n      doc.fontSize(14).text('Detalle de Campañas', { underline: true });\n      doc.moveDown();\n      doc.fontSize(12);\n      \n      datos.detalleCampanas.forEach((campana: any) => {\n        doc.text(`Campaña: ${campana.nombre}`);\n        doc.text(`  Canal: ${campana.canal}`);\n        doc.text(`  Estado: ${campana.estado}`);\n        doc.text(`  Presupuesto: $${Number(campana.presupuesto || 0).toFixed(2)}`);\n        doc.text(`  Gastado: $${Number(campana.gastado || 0).toFixed(2)}`);\n        doc.text(`  Prospectos: ${campana.prospectos}`);\n        doc.text(`  Inscritos: ${campana.inscritos}`);\n        doc.text(`  Tasa Conversión: ${(campana.tasaConversion || 0).toFixed(2)}%`);\n        doc.text(`  ROI: ${(campana.roi || 0).toFixed(2)}%`);\n        doc.moveDown(0.5);\n      });\n    }\n  }\n\n  // ====== IMPLEMENTACIONES PARA NUEVAS FUNCIONALIDADES ======\n  \n  // Formularios Públicos\n  async getFormularioPublico(id: string): Promise<FormularioPublico | undefined> {\n    const [formulario] = await db.select().from(formulariosPublicos).where(eq(formulariosPublicos.id, id));\n    return formulario || undefined;\n  }\n\n  async getFormularioPublicoByEnlace(enlace: string): Promise<FormularioPublico | undefined> {\n    const [formulario] = await db.select().from(formulariosPublicos).where(eq(formulariosPublicos.enlace, enlace));\n    return formulario || undefined;\n  }\n\n  async createFormularioPublico(insertFormulario: InsertFormularioPublico): Promise<FormularioPublico> {\n    const enlace = await this.generarEnlaceFormularioPublico();\n    const [formulario] = await db\n      .insert(formulariosPublicos)\n      .values({\n        ...insertFormulario,\n        enlace\n      })\n      .returning();\n    return formulario;\n  }\n\n  async getFormulariosPublicos(activos?: boolean): Promise<FormularioPublico[]> {\n    const query = db.select().from(formulariosPublicos);\n    return activos !== undefined \n      ? await query.where(eq(formulariosPublicos.activo, activos))\n      : await query;\n  }\n\n  async updateFormularioPublico(id: string, formulario: Partial<InsertFormularioPublico>): Promise<FormularioPublico> {\n    const [updated] = await db\n      .update(formulariosPublicos)\n      .set(formulario)\n      .where(eq(formulariosPublicos.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteFormularioPublico(id: string): Promise<boolean> {\n    const result = await db.delete(formulariosPublicos).where(eq(formulariosPublicos.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Documentos de Admisión\n  async getDocumentoAdmision(id: string): Promise<DocumentoAdmision | undefined> {\n    const [documento] = await db.select().from(documentosAdmision).where(eq(documentosAdmision.id, id));\n    return documento || undefined;\n  }\n\n  async createDocumentoAdmision(insertDocumento: InsertDocumentoAdmision): Promise<DocumentoAdmision> {\n    const [documento] = await db\n      .insert(documentosAdmision)\n      .values(insertDocumento)\n      .returning();\n    return documento;\n  }\n\n  async getDocumentosByProspecto(prospectoId: string): Promise<DocumentoAdmision[]> {\n    return await db\n      .select()\n      .from(documentosAdmision)\n      .where(eq(documentosAdmision.prospectoId, prospectoId))\n      .orderBy(desc(documentosAdmision.fechaCarga));\n  }\n\n  async updateDocumentoAdmision(id: string, documento: Partial<InsertDocumentoAdmision>): Promise<DocumentoAdmision> {\n    const [updated] = await db\n      .update(documentosAdmision)\n      .set(documento)\n      .where(eq(documentosAdmision.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteDocumentoAdmision(id: string): Promise<boolean> {\n    const result = await db.delete(documentosAdmision).where(eq(documentosAdmision.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Estudiantes\n  async getEstudiante(id: string): Promise<Estudiante | undefined> {\n    const [estudiante] = await db.select().from(estudiantes).where(eq(estudiantes.id, id));\n    return estudiante || undefined;\n  }\n\n  async getEstudianteByProspecto(prospectoId: string): Promise<Estudiante | undefined> {\n    const [estudiante] = await db.select().from(estudiantes).where(eq(estudiantes.prospectoId, prospectoId));\n    return estudiante || undefined;\n  }\n\n  async createEstudiante(insertEstudiante: InsertEstudiante): Promise<Estudiante> {\n    const [estudiante] = await db\n      .insert(estudiantes)\n      .values(insertEstudiante)\n      .returning();\n    return estudiante;\n  }\n\n  async getEstudiantes(estado?: string): Promise<Estudiante[]> {\n    const query = db.select().from(estudiantes);\n    return estado\n      ? await query.where(eq(estudiantes.estado, estado))\n      : await query;\n  }\n\n  async updateEstudiante(id: string, estudiante: Partial<InsertEstudiante>): Promise<Estudiante> {\n    const [updated] = await db\n      .update(estudiantes)\n      .set(estudiante)\n      .where(eq(estudiantes.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteEstudiante(id: string): Promise<boolean> {\n    const result = await db.delete(estudiantes).where(eq(estudiantes.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Pagos\n  async getPago(id: string): Promise<Pago | undefined> {\n    const [pago] = await db.select().from(pagos).where(eq(pagos.id, id));\n    return pago || undefined;\n  }\n\n  async createPago(insertPago: InsertPago): Promise<Pago> {\n    const [pago] = await db\n      .insert(pagos)\n      .values(insertPago)\n      .returning();\n    return pago;\n  }\n\n  async getPagosByProspecto(prospectoId: string): Promise<Pago[]> {\n    return await db\n      .select()\n      .from(pagos)\n      .where(eq(pagos.prospectoId, prospectoId))\n      .orderBy(desc(pagos.fechaPago));\n  }\n\n  async getPagosByEstudiante(estudianteId: string): Promise<Pago[]> {\n    return await db\n      .select()\n      .from(pagos)\n      .where(eq(pagos.estudianteId, estudianteId))\n      .orderBy(desc(pagos.fechaPago));\n  }\n\n  async updatePago(id: string, pago: Partial<InsertPago>): Promise<Pago> {\n    const [updated] = await db\n      .update(pagos)\n      .set(pago)\n      .where(eq(pagos.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deletePago(id: string): Promise<boolean> {\n    const result = await db.delete(pagos).where(eq(pagos.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Formularios de Admisión\n  async getFormularioAdmision(id: string): Promise<FormularioAdmision | undefined> {\n    const [formulario] = await db.select().from(formulariosAdmision).where(eq(formulariosAdmision.id, id));\n    return formulario || undefined;\n  }\n\n  async getFormularioAdmisionByProspecto(prospectoId: string): Promise<FormularioAdmision | undefined> {\n    const [formulario] = await db.select().from(formulariosAdmision).where(eq(formulariosAdmision.prospectoId, prospectoId));\n    return formulario || undefined;\n  }\n\n  async createFormularioAdmision(insertFormulario: InsertFormularioAdmision): Promise<FormularioAdmision> {\n    const [formulario] = await db\n      .insert(formulariosAdmision)\n      .values(insertFormulario)\n      .returning();\n    return formulario;\n  }\n\n  async updateFormularioAdmision(id: string, formulario: Partial<InsertFormularioAdmision>): Promise<FormularioAdmision> {\n    const [updated] = await db\n      .update(formulariosAdmision)\n      .set(formulario)\n      .where(eq(formulariosAdmision.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteFormularioAdmision(id: string): Promise<boolean> {\n    const result = await db.delete(formulariosAdmision).where(eq(formulariosAdmision.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Métodos especiales para el flujo de admisión\n  async generarEnlaceFormularioPublico(): Promise<string> {\n    const crypto = await import('crypto');\n    const randomId = crypto.randomBytes(16).toString('hex');\n    const timestamp = Date.now().toString(36);\n    return `form-${timestamp}-${randomId}`;\n  }\n\n  async procesarProspectoDesdeFormularioPublico(datos: any, enlaceFormulario: string): Promise<Prospecto> {\n    // Obtener el formulario público para verificar que existe y está activo\n    const formulario = await this.getFormularioPublicoByEnlace(enlaceFormulario);\n    if (!formulario || !formulario.activo) {\n      throw new Error('Formulario público no encontrado o inactivo');\n    }\n\n    // Crear el prospecto con los datos del formulario\n    const nuevoProspecto: InsertProspecto = {\n      nombre: datos.nombre,\n      telefono: datos.telefono,\n      email: datos.email,\n      nivelEducativo: formulario.nivelEducativo,\n      origen: 'formulario_publico',\n      estatus: 'nuevo',\n      prioridad: 'media',\n      notas: `Prospecto creado desde formulario público: ${formulario.nombre}`,\n      datosAdicionales: {\n        formularioPublicoId: formulario.id,\n        enlaceFormulario: enlaceFormulario,\n        datosExtra: datos.datosExtra || {}\n      }\n    };\n\n    return await this.createProspecto(nuevoProspecto);\n  }\n\n  async iniciarProcesoAdmision(prospectoId: string): Promise<FormularioAdmision> {\n    // Verificar que el prospecto existe\n    const prospecto = await this.getProspecto(prospectoId);\n    if (!prospecto) {\n      throw new Error('Prospecto no encontrado');\n    }\n\n    // Verificar si ya tiene un formulario de admisión\n    const formularioExistente = await this.getFormularioAdmisionByProspecto(prospectoId);\n    if (formularioExistente) {\n      return formularioExistente;\n    }\n\n    // Crear formulario de admisión inicial\n    const nuevoFormulario: InsertFormularioAdmision = {\n      prospectoId: prospectoId,\n      datosPersonales: {\n        nombre: prospecto.nombre,\n        email: prospecto.email,\n        telefono: prospecto.telefono\n      },\n      datosContacto: {},\n      estado: 'borrador'\n    };\n\n    const formulario = await this.createFormularioAdmision(nuevoFormulario);\n\n    // Actualizar el estatus del prospecto a 'documentos'\n    await this.updateProspecto(prospectoId, { estatus: 'documentos' });\n\n    return formulario;\n  }\n\n  async completarMatricula(prospectoId: string, pagoId: string): Promise<Estudiante> {\n    // Verificar que el prospecto existe\n    const prospecto = await this.getProspecto(prospectoId);\n    if (!prospecto) {\n      throw new Error('Prospecto no encontrado');\n    }\n\n    // Verificar que el pago existe y está completado\n    const pago = await this.getPago(pagoId);\n    if (!pago || pago.estado !== 'completado') {\n      throw new Error('Pago no encontrado o no completado');\n    }\n\n    // Verificar que ya no sea estudiante\n    const estudianteExistente = await this.getEstudianteByProspecto(prospectoId);\n    if (estudianteExistente) {\n      return estudianteExistente;\n    }\n\n    // Generar matrícula única\n    const timestamp = Date.now().toString().slice(-8);\n    const randomNum = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\n    const matricula = `EST-${timestamp}-${randomNum}`;\n\n    // Crear estudiante\n    const nuevoEstudiante: InsertEstudiante = {\n      prospectoId: prospectoId,\n      matricula: matricula,\n      nivelEducativo: prospecto.nivelEducativo as 'primaria' | 'secundaria' | 'preparatoria' | 'universidad',\n      programa: 'Programa General', // Esto debería venir del formulario de admisión\n      modalidad: 'presencial', // Esto debería venir del formulario de admisión\n      fechaInicio: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 días desde ahora\n      estado: 'activo'\n    };\n\n    const estudiante = await this.createEstudiante(nuevoEstudiante);\n\n    // Actualizar el estatus del prospecto a 'matriculado'\n    await this.updateProspecto(prospectoId, { estatus: 'matriculado' });\n\n    return estudiante;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":69937},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Usuarios del sistema (Directores, Gerentes, Asesores)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  nombre: text(\"nombre\").notNull(),\n  email: text(\"email\").notNull(),\n  rol: text(\"rol\").notNull(), // 'director', 'gerente', 'asesor'\n  activo: boolean(\"activo\").default(true),\n  fechaCreacion: timestamp(\"fecha_creacion\").defaultNow(),\n});\n\n// Prospectos/Candidatos\nexport const prospectos = pgTable(\"prospectos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nombre: text(\"nombre\").notNull(),\n  telefono: text(\"telefono\").notNull(),\n  email: text(\"email\").notNull(),\n  nivelEducativo: text(\"nivel_educativo\").notNull(), // 'primaria', 'secundaria', 'preparatoria', 'universidad'\n  origen: text(\"origen\").notNull(), // 'facebook', 'google', 'referencias', 'eventos', etc.\n  estatus: text(\"estatus\").notNull().default('nuevo'), // 'nuevo', 'primer_contacto', 'cita_agendada', 'documentos', 'admitido', 'matriculado', 'no_interesado'\n  asesorId: varchar(\"asesor_id\").references(() => users.id),\n  prioridad: text(\"prioridad\").notNull().default('media'), // 'alta', 'media', 'baja'\n  valorInscripcion: decimal(\"valor_inscripcion\", { precision: 10, scale: 2 }), // Valor económico cuando se inscribe\n  notas: text(\"notas\"),\n  fechaRegistro: timestamp(\"fecha_registro\").defaultNow(),\n  ultimaInteraccion: timestamp(\"ultima_interaccion\").defaultNow(),\n  fechaCita: timestamp(\"fecha_cita\"),\n  datosAdicionales: jsonb(\"datos_adicionales\"), // Información extra personalizable\n});\n\n// Comunicaciones (llamadas, emails, WhatsApp, etc.)\nexport const comunicaciones = pgTable(\"comunicaciones\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  prospectoId: varchar(\"prospecto_id\").references(() => prospectos.id).notNull(),\n  usuarioId: varchar(\"usuario_id\").references(() => users.id).notNull(),\n  tipo: text(\"tipo\").notNull(), // 'llamada', 'email', 'whatsapp', 'presencial'\n  direccion: text(\"direccion\").notNull(), // 'enviado', 'recibido'\n  contenido: text(\"contenido\").notNull(),\n  resultado: text(\"resultado\"), // Resultado de la comunicación\n  duracion: integer(\"duracion\"), // En minutos para llamadas\n  fechaHora: timestamp(\"fecha_hora\").defaultNow(),\n  estado: text(\"estado\").default('completado'), // 'completado', 'pendiente', 'fallido'\n});\n\n// Campañas de marketing\nexport const campanas = pgTable(\"campanas\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nombre: text(\"nombre\").notNull(),\n  descripcion: text(\"descripcion\"),\n  canal: text(\"canal\").notNull(), // 'facebook', 'google', 'redes_sociales', 'eventos'\n  presupuesto: decimal(\"presupuesto\", { precision: 10, scale: 2 }).notNull(),\n  gastado: decimal(\"gastado\", { precision: 10, scale: 2 }).default('0'),\n  estado: text(\"estado\").notNull().default('activa'), // 'activa', 'pausada', 'finalizada'\n  fechaInicio: timestamp(\"fecha_inicio\").notNull(),\n  fechaFin: timestamp(\"fecha_fin\").notNull(),\n  metaProspectos: integer(\"meta_prospectos\"),\n  metaInscritos: integer(\"meta_inscritos\"),\n  configuracion: jsonb(\"configuracion\"), // Configuración específica del canal\n  fechaCreacion: timestamp(\"fecha_creacion\").defaultNow(),\n});\n\n// Relación entre prospectos y campañas (un prospecto puede venir de múltiples campañas)\nexport const prospectosCampanas = pgTable(\"prospectos_campanas\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  prospectoId: varchar(\"prospecto_id\").references(() => prospectos.id).notNull(),\n  campanaId: varchar(\"campana_id\").references(() => campanas.id).notNull(),\n  fechaAsociacion: timestamp(\"fecha_asociacion\").defaultNow(),\n});\n\n// Reportes programados\nexport const reportes = pgTable(\"reportes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nombre: text(\"nombre\").notNull(),\n  tipo: text(\"tipo\").notNull(), // 'ejecutivo', 'asesores', 'campanas', 'conversiones'\n  frecuencia: text(\"frecuencia\").notNull(), // 'diario', 'semanal', 'mensual'\n  destinatarios: jsonb(\"destinatarios\").notNull(), // Array de emails\n  configuracion: jsonb(\"configuracion\"), // Filtros y parámetros específicos\n  activo: boolean(\"activo\").default(true),\n  ultimaEjecucion: timestamp(\"ultima_ejecucion\"),\n  proximaEjecucion: timestamp(\"proxima_ejecucion\"),\n  fechaCreacion: timestamp(\"fecha_creacion\").defaultNow(),\n});\n\n// Definir relaciones\nexport const usersRelations = relations(users, ({ many }) => ({\n  prospectos: many(prospectos),\n  comunicaciones: many(comunicaciones),\n}));\n\nexport const prospectosRelations = relations(prospectos, ({ one, many }) => ({\n  asesor: one(users, {\n    fields: [prospectos.asesorId],\n    references: [users.id],\n  }),\n  comunicaciones: many(comunicaciones),\n  campanas: many(prospectosCampanas),\n}));\n\nexport const comunicacionesRelations = relations(comunicaciones, ({ one }) => ({\n  prospecto: one(prospectos, {\n    fields: [comunicaciones.prospectoId],\n    references: [prospectos.id],\n  }),\n  usuario: one(users, {\n    fields: [comunicaciones.usuarioId],\n    references: [users.id],\n  }),\n}));\n\nexport const campanasRelations = relations(campanas, ({ many }) => ({\n  prospectos: many(prospectosCampanas),\n}));\n\nexport const prospectosCampanasRelations = relations(prospectosCampanas, ({ one }) => ({\n  prospecto: one(prospectos, {\n    fields: [prospectosCampanas.prospectoId],\n    references: [prospectos.id],\n  }),\n  campana: one(campanas, {\n    fields: [prospectosCampanas.campanaId],\n    references: [campanas.id],\n  }),\n}));\n\n// Esquemas de inserción y tipos\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  fechaCreacion: true,\n});\n\nexport const insertProspectoSchema = createInsertSchema(prospectos).omit({\n  id: true,\n  fechaRegistro: true,\n  ultimaInteraccion: true,\n});\n\nexport const insertComunicacionSchema = createInsertSchema(comunicaciones).omit({\n  id: true,\n  fechaHora: true,\n}).extend({\n  tipo: z.enum([\"llamada\", \"email\", \"whatsapp\", \"presencial\"]),\n  direccion: z.enum([\"enviado\", \"recibido\"]),\n  estado: z.enum([\"completado\", \"pendiente\", \"fallido\"]).optional(),\n  resultado: z.string().optional().nullable(),\n  duracion: z.number().int().positive().optional().nullable(),\n}).refine((data) => {\n  // Si es una llamada, la duración debe ser un número positivo cuando se proporcione\n  if (data.tipo === \"llamada\" && data.duracion !== null && data.duracion !== undefined) {\n    return data.duracion > 0;\n  }\n  return true;\n}, {\n  message: \"La duración de las llamadas debe ser mayor que 0\",\n  path: [\"duracion\"]\n});\n\n// Schema específico para actualizar comunicaciones\nexport const updateComunicacionSchema = z.object({\n  contenido: z.string().min(1).optional(),\n  resultado: z.string().optional().nullable(),\n  duracion: z.number().int().positive().optional().nullable(),\n  estado: z.enum([\"completado\", \"pendiente\", \"fallido\"]).optional(),\n}).refine((data) => {\n  // Si se proporciona duración, debe ser positiva\n  if (data.duracion !== null && data.duracion !== undefined) {\n    return data.duracion > 0;\n  }\n  return true;\n}, {\n  message: \"La duración debe ser mayor que 0\",\n  path: [\"duracion\"]\n});\n\nexport const insertCampanaSchema = createInsertSchema(campanas).omit({\n  id: true,\n  fechaCreacion: true,\n}).extend({\n  canal: z.enum([\"facebook\", \"google\", \"redes_sociales\", \"eventos\", \"referencias\", \"telefono\", \"email\"]),\n  estado: z.enum([\"activa\", \"pausada\", \"finalizada\"]).optional(),\n  presupuesto: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Presupuesto debe ser un número válido\"),\n  gastado: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Gastado debe ser un número válido\").optional(),\n  fechaInicio: z.date(),\n  fechaFin: z.date(),\n  metaProspectos: z.number().int().positive().optional(),\n  metaInscritos: z.number().int().positive().optional(),\n}).refine((data) => {\n  // Fecha fin debe ser después de fecha inicio\n  return data.fechaFin > data.fechaInicio;\n}, {\n  message: \"La fecha de fin debe ser posterior a la fecha de inicio\",\n  path: [\"fechaFin\"]\n}).refine((data) => {\n  // Presupuesto debe ser mayor que gastado si se proporciona\n  if (data.gastado) {\n    return parseFloat(data.presupuesto) >= parseFloat(data.gastado);\n  }\n  return true;\n}, {\n  message: \"El presupuesto debe ser mayor o igual al monto gastado\",\n  path: [\"presupuesto\"]\n});\n\n// Schema para actualizar campañas\nexport const updateCampanaSchema = z.object({\n  nombre: z.string().min(1).optional(),\n  descripcion: z.string().optional(),\n  canal: z.enum([\"facebook\", \"google\", \"redes_sociales\", \"eventos\", \"referencias\", \"telefono\", \"email\"]).optional(),\n  estado: z.enum([\"activa\", \"pausada\", \"finalizada\"]).optional(),\n  presupuesto: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Presupuesto debe ser un número válido\").optional(),\n  gastado: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Gastado debe ser un número válido\").optional(),\n  fechaInicio: z.date().optional(),\n  fechaFin: z.date().optional(),\n  metaProspectos: z.number().int().positive().optional(),\n  metaInscritos: z.number().int().positive().optional(),\n  configuracion: z.any().optional(),\n}).refine((data) => {\n  // Si se proporcionan ambas fechas, validar orden\n  if (data.fechaInicio && data.fechaFin) {\n    return data.fechaFin > data.fechaInicio;\n  }\n  return true;\n}, {\n  message: \"La fecha de fin debe ser posterior a la fecha de inicio\",\n  path: [\"fechaFin\"]\n}).refine((data) => {\n  // Si se proporcionan presupuesto y gastado, validar que presupuesto >= gastado\n  if (data.presupuesto && data.gastado) {\n    return parseFloat(data.presupuesto) >= parseFloat(data.gastado);\n  }\n  return true;\n}, {\n  message: \"El presupuesto debe ser mayor o igual al monto gastado\",\n  path: [\"presupuesto\"]\n});\n\nexport const insertReporteSchema = createInsertSchema(reportes).omit({\n  id: true,\n  fechaCreacion: true,\n  ultimaEjecucion: true,\n});\n\n// Tipos TypeScript\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertProspecto = z.infer<typeof insertProspectoSchema>;\nexport type Prospecto = typeof prospectos.$inferSelect;\n\nexport type InsertComunicacion = z.infer<typeof insertComunicacionSchema>;\nexport type Comunicacion = typeof comunicaciones.$inferSelect;\n\nexport type InsertCampana = z.infer<typeof insertCampanaSchema>;\nexport type Campana = typeof campanas.$inferSelect;\n\nexport type InsertReporte = z.infer<typeof insertReporteSchema>;\nexport type Reporte = typeof reportes.$inferSelect;\n\n// ====== NUEVAS TABLAS PARA FUNCIONALIDADES AVANZADAS ======\n\n// Formularios públicos para captura de leads\nexport const formulariosPublicos = pgTable(\"formularios_publicos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nombre: text(\"nombre\").notNull(),\n  descripcion: text(\"descripcion\"),\n  enlace: text(\"enlace\").notNull().unique(), // URL única generada\n  nivelEducativo: text(\"nivel_educativo\").notNull(), // Para filtrar el tipo de prospectos\n  origen: text(\"origen\").notNull().default('formulario_publico'),\n  activo: boolean(\"activo\").default(true),\n  configuracion: jsonb(\"configuracion\"), // Campos personalizados del formulario\n  fechaCreacion: timestamp(\"fecha_creacion\").defaultNow(),\n  fechaExpiracion: timestamp(\"fecha_expiracion\"), // Opcional para formularios temporales\n});\n\n// Documentos de admisión cargados por prospectos\nexport const documentosAdmision = pgTable(\"documentos_admision\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  prospectoId: varchar(\"prospecto_id\").references(() => prospectos.id).notNull(),\n  tipoDocumento: text(\"tipo_documento\").notNull(), // 'identificacion', 'certificados', 'fotografias', etc.\n  nombreArchivo: text(\"nombre_archivo\").notNull(),\n  rutaArchivo: text(\"ruta_archivo\").notNull(),\n  tamano: integer(\"tamano\"), // En bytes\n  estado: text(\"estado\").notNull().default('pendiente'), // 'pendiente', 'aprobado', 'rechazado'\n  comentarios: text(\"comentarios\"),\n  fechaCarga: timestamp(\"fecha_carga\").defaultNow(),\n  fechaRevision: timestamp(\"fecha_revision\"),\n  revisadoPor: varchar(\"revisado_por\").references(() => users.id),\n});\n\n// Estudiantes (prospectos que completaron el proceso de admisión)\nexport const estudiantes = pgTable(\"estudiantes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  prospectoId: varchar(\"prospecto_id\").references(() => prospectos.id).notNull().unique(),\n  matricula: text(\"matricula\").notNull().unique(),\n  nivelEducativo: text(\"nivel_educativo\").notNull(),\n  programa: text(\"programa\").notNull(),\n  modalidad: text(\"modalidad\").notNull(), // 'presencial', 'virtual', 'hibrida'\n  turno: text(\"turno\").notNull(), // 'matutino', 'vespertino', 'nocturno', 'mixto'\n  fechaInicio: timestamp(\"fecha_inicio\").notNull(),\n  fechaMatricula: timestamp(\"fecha_matricula\").defaultNow(),\n  estado: text(\"estado\").notNull().default('activo'), // 'activo', 'suspendido', 'graduado', 'retirado'\n  datosAcademicos: jsonb(\"datos_academicos\"), // Información académica adicional\n});\n\n// Pagos y transacciones\nexport const pagos = pgTable(\"pagos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  prospectoId: varchar(\"prospecto_id\").references(() => prospectos.id).notNull(),\n  estudianteId: varchar(\"estudiante_id\").references(() => estudiantes.id),\n  concepto: text(\"concepto\").notNull(), // 'cuota_admision', 'matricula', 'mensualidad', etc.\n  monto: decimal(\"monto\", { precision: 10, scale: 2 }).notNull(),\n  moneda: text(\"moneda\").notNull().default('MXN'),\n  metodoPago: text(\"metodo_pago\").notNull(), // 'stripe', 'paypal', 'transferencia', 'efectivo'\n  estado: text(\"estado\").notNull().default('pendiente'), // 'pendiente', 'procesando', 'completado', 'fallido', 'cancelado'\n  transactionId: text(\"transaction_id\"), // ID de la transacción del proveedor de pago\n  datosPago: jsonb(\"datos_pago\"), // Información adicional de la transacción\n  fechaPago: timestamp(\"fecha_pago\").defaultNow(),\n  fechaVencimiento: timestamp(\"fecha_vencimiento\"),\n});\n\n// Formularios de admisión llenados\nexport const formulariosAdmision = pgTable(\"formularios_admision\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  prospectoId: varchar(\"prospecto_id\").references(() => prospectos.id).notNull(),\n  datosPersonales: jsonb(\"datos_personales\").notNull(), // Información personal del prospecto\n  datosAcademicos: jsonb(\"datos_academicos\"), // Historial académico\n  datosContacto: jsonb(\"datos_contacto\").notNull(), // Información de contacto de emergencia\n  preferenciasEstudio: jsonb(\"preferencias_estudio\"), // Horarios, modalidad, etc.\n  estado: text(\"estado\").notNull().default('borrador'), // 'borrador', 'enviado', 'aprobado', 'rechazado'\n  fechaCreacion: timestamp(\"fecha_creacion\").defaultNow(),\n  fechaEnvio: timestamp(\"fecha_envio\"),\n  fechaRevision: timestamp(\"fecha_revision\"),\n  revisadoPor: varchar(\"revisado_por\").references(() => users.id),\n});\n\n// ====== RELACIONES PARA LAS NUEVAS TABLAS ======\n\nexport const formulariosPublicosRelations = relations(formulariosPublicos, ({ many }) => ({\n  prospectos: many(prospectos),\n}));\n\nexport const documentosAdmisionRelations = relations(documentosAdmision, ({ one }) => ({\n  prospecto: one(prospectos, {\n    fields: [documentosAdmision.prospectoId],\n    references: [prospectos.id],\n  }),\n  revisor: one(users, {\n    fields: [documentosAdmision.revisadoPor],\n    references: [users.id],\n  }),\n}));\n\nexport const estudiantesRelations = relations(estudiantes, ({ one, many }) => ({\n  prospecto: one(prospectos, {\n    fields: [estudiantes.prospectoId],\n    references: [prospectos.id],\n  }),\n  pagos: many(pagos),\n}));\n\nexport const pagosRelations = relations(pagos, ({ one }) => ({\n  prospecto: one(prospectos, {\n    fields: [pagos.prospectoId],\n    references: [prospectos.id],\n  }),\n  estudiante: one(estudiantes, {\n    fields: [pagos.estudianteId],\n    references: [estudiantes.id],\n  }),\n}));\n\nexport const formulariosAdmisionRelations = relations(formulariosAdmision, ({ one }) => ({\n  prospecto: one(prospectos, {\n    fields: [formulariosAdmision.prospectoId],\n    references: [prospectos.id],\n  }),\n  revisor: one(users, {\n    fields: [formulariosAdmision.revisadoPor],\n    references: [users.id],\n  }),\n}));\n\n// Actualizar relaciones de prospectos para incluir las nuevas tablas\nexport const prospectosRelationsExtended = relations(prospectos, ({ one, many }) => ({\n  asesor: one(users, {\n    fields: [prospectos.asesorId],\n    references: [users.id],\n  }),\n  comunicaciones: many(comunicaciones),\n  campanas: many(prospectosCampanas),\n  documentos: many(documentosAdmision),\n  estudiante: one(estudiantes),\n  pagos: many(pagos),\n  formularioAdmision: one(formulariosAdmision),\n}));\n\n// ====== ESQUEMAS DE INSERCIÓN Y VALIDACIÓN ======\n\nexport const insertFormularioPublicoSchema = createInsertSchema(formulariosPublicos).omit({\n  id: true,\n  enlace: true,\n  fechaCreacion: true,\n}).extend({\n  nivelEducativo: z.enum([\"primaria\", \"secundaria\", \"preparatoria\", \"universidad\"]),\n  origen: z.string().default('formulario_publico'),\n});\n\nexport const insertDocumentoAdmisionSchema = createInsertSchema(documentosAdmision).omit({\n  id: true,\n  fechaCarga: true,\n  fechaRevision: true,\n}).extend({\n  tipoDocumento: z.enum([\"identificacion\", \"certificados\", \"fotografias\", \"comprobante_domicilio\", \"otros\"]),\n  estado: z.enum([\"pendiente\", \"aprobado\", \"rechazado\"]).optional(),\n});\n\nexport const insertEstudianteSchema = createInsertSchema(estudiantes).omit({\n  id: true,\n  fechaMatricula: true,\n}).extend({\n  nivelEducativo: z.enum([\"primaria\", \"secundaria\", \"preparatoria\", \"universidad\"]),\n  modalidad: z.enum([\"presencial\", \"virtual\", \"hibrida\"]),\n  turno: z.enum([\"matutino\", \"vespertino\", \"nocturno\", \"mixto\"]),\n  estado: z.enum([\"activo\", \"suspendido\", \"graduado\", \"retirado\"]).optional(),\n});\n\n// Schema específico para actualización de datos académicos\nexport const updateDatosAcademicosSchema = z.object({\n  programa: z.string().min(1, \"Programa académico es requerido\"),\n  modalidad: z.enum([\"presencial\", \"virtual\", \"hibrida\"], {\n    required_error: \"Modalidad es requerida\"\n  }),\n  turno: z.enum([\"matutino\", \"vespertino\", \"nocturno\", \"mixto\"], {\n    required_error: \"Turno es requerido\"\n  }),\n  fechaInicio: z.date({\n    required_error: \"Fecha de inicio es requerida\"\n  }),\n});\n\nexport const insertPagoSchema = createInsertSchema(pagos).omit({\n  id: true,\n  fechaPago: true,\n}).extend({\n  concepto: z.enum([\"cuota_admision\", \"matricula\", \"mensualidad\", \"otros\"]),\n  metodoPago: z.enum([\"stripe\", \"paypal\", \"transferencia\", \"efectivo\"]),\n  estado: z.enum([\"pendiente\", \"procesando\", \"completado\", \"fallido\", \"cancelado\"]).optional(),\n  monto: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Monto debe ser un número válido\"),\n});\n\nexport const insertFormularioAdmisionSchema = createInsertSchema(formulariosAdmision).omit({\n  id: true,\n  fechaCreacion: true,\n  fechaEnvio: true,\n  fechaRevision: true,\n}).extend({\n  estado: z.enum([\"borrador\", \"enviado\", \"aprobado\", \"rechazado\"]).optional(),\n});\n\n// ====== TIPOS TYPESCRIPT PARA LAS NUEVAS TABLAS ======\n\nexport type InsertFormularioPublico = z.infer<typeof insertFormularioPublicoSchema>;\nexport type FormularioPublico = typeof formulariosPublicos.$inferSelect;\n\nexport type InsertDocumentoAdmision = z.infer<typeof insertDocumentoAdmisionSchema>;\nexport type DocumentoAdmision = typeof documentosAdmision.$inferSelect;\n\nexport type InsertEstudiante = z.infer<typeof insertEstudianteSchema>;\nexport type Estudiante = typeof estudiantes.$inferSelect;\n\nexport type InsertPago = z.infer<typeof insertPagoSchema>;\nexport type Pago = typeof pagos.$inferSelect;\n\nexport type InsertFormularioAdmision = z.infer<typeof insertFormularioAdmisionSchema>;\nexport type FormularioAdmision = typeof formulariosAdmision.$inferSelect;","size_bytes":20124},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { DirectorDashboard } from \"@/components/director-dashboard\";\nimport { GerenteDashboard } from \"@/components/gerente-dashboard\";\nimport { AsesorDashboard } from \"@/components/asesor-dashboard\";\nimport { ProspectManager } from \"@/components/prospect-manager\";\nimport { CommunicationCenter } from \"@/components/communication-center\";\nimport { CampaignManager } from \"@/components/campaign-manager\";\nimport { ReportsCenter } from \"@/components/reports-center\";\nimport FormulariosPublicosManager from \"@/components/formularios-publicos-manager\";\nimport EstudiantesManager from \"@/components/estudiantes-manager\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport AuthPage from \"@/pages/auth-page\";\nimport FormularioPublicoPage from \"@/pages/formulario-publico-page\";\nimport ProcesoAdmisionPage from \"@/pages/proceso-admision-page\";\nimport { useState } from \"react\";\n\nfunction WelcomeScreen() {\n  const { user } = useAuth();\n  \n  return (\n    <div className=\"p-6\">\n      <Card className=\"max-w-4xl mx-auto\">\n        <CardHeader>\n          <CardTitle className=\"text-center text-3xl font-bold text-primary\">\n            ¡Bienvenido al CRM Educativo!\n          </CardTitle>\n          {user && (\n            <div className=\"text-center\">\n              <p className=\"text-muted-foreground mb-2\">\n                Hola <strong>{user.nombre}</strong>\n              </p>\n              <Badge variant=\"secondary\" className=\"text-sm\">\n                Rol: {user.rol.charAt(0).toUpperCase() + user.rol.slice(1)}\n              </Badge>\n            </div>\n          )}\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p className=\"text-center text-muted-foreground text-lg\">\n            Sistema integral de gestión para instituciones educativas\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-8\">\n            <div className=\"p-4 text-center border rounded-lg hover-elevate\">\n              <h3 className=\"font-semibold mb-2\">Gestión de Prospectos</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Administración centralizada de todos los candidatos a estudiantes\n              </p>\n            </div>\n            <div className=\"p-4 text-center border rounded-lg hover-elevate\">\n              <h3 className=\"font-semibold mb-2\">Dashboards por Rol</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Vistas personalizadas para Directores, Gerentes y Asesores\n              </p>\n            </div>\n            <div className=\"p-4 text-center border rounded-lg hover-elevate\">\n              <h3 className=\"font-semibold mb-2\">Análisis y Reportes</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Métricas actualizadas cada 3 horas con exportación\n              </p>\n            </div>\n          </div>\n\n          <div className=\"mt-8 p-4 bg-muted rounded-lg\">\n            <h4 className=\"font-semibold mb-2\">Navegación:</h4>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>• Use el menú lateral para acceder a las diferentes secciones</li>\n              <li>• Los dashboards por rol están en la sección inferior del menú</li>\n              <li>• Sus permisos están configurados según su rol: <strong>{user?.rol}</strong></li>\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction Router() {\n  const { user, isLoading } = useAuth();\n  \n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"h-8 w-8 animate-spin rounded-full border-4 border-primary border-r-transparent mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Cargando...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <Switch>\n      {/* Ruta pública para formularios - NO requiere autenticación */}\n      <Route path=\"/form/:enlace\" component={FormularioPublicoPage} />\n      {/* Ruta protegida para proceso de admisión */}\n      <ProtectedRoute path=\"/proceso-admision/:prospectoId\" component={ProcesoAdmisionPage} />\n      <ProtectedRoute path=\"/\" component={MainApp} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={() => <div>Página no encontrada</div>} />\n    </Switch>\n  );\n}\n\nfunction MainApp() {\n  const [activeSection, setActiveSection] = useState(\"dashboard\");\n  const { user, logoutMutation, isDirector, isGerente, isAsesor } = useAuth();\n\n  // Componente de acceso denegado\n  const AccessDenied = ({ requiredRole }: { requiredRole: string }) => (\n    <div className=\"p-6\">\n      <Card className=\"max-w-2xl mx-auto\">\n        <CardHeader>\n          <CardTitle className=\"text-destructive\">Acceso Denegado</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground mb-4\">\n            No tienes permisos para acceder a esta sección.\n          </p>\n          <div className=\"space-y-2\">\n            <p className=\"text-sm\">\n              <strong>Tu rol actual:</strong> {user?.rol}\n            </p>\n            <p className=\"text-sm\">\n              <strong>Rol requerido:</strong> {requiredRole}\n            </p>\n          </div>\n          <div className=\"mt-4\">\n            <button\n              onClick={() => setActiveSection(\"dashboard\")}\n              className=\"text-sm text-primary hover:underline\"\n              data-testid=\"button-back-dashboard\"\n            >\n              Volver al inicio\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderSection = () => {\n    switch (activeSection) {\n      case \"director\":\n        // Solo directores pueden ver este dashboard\n        if (!isDirector) {\n          return <AccessDenied requiredRole=\"Director\" />;\n        }\n        return <DirectorDashboard />;\n        \n      case \"gerente\":\n        // Solo gerentes y directores pueden ver este dashboard\n        if (!isGerente) {\n          return <AccessDenied requiredRole=\"Gerente o Director\" />;\n        }\n        return <GerenteDashboard />;\n        \n      case \"asesor\":\n        // Todos los roles autenticados pueden ver la vista asesor\n        if (!isAsesor) {\n          return <AccessDenied requiredRole=\"Asesor, Gerente o Director\" />;\n        }\n        return <AsesorDashboard />;\n        \n      case \"prospectos\":\n        return <ProspectManager />;\n      case \"estudiantes\":\n        return <EstudiantesManager />;\n      case \"comunicaciones\":\n        return <CommunicationCenter />;\n      case \"campanas\":\n        return <CampaignManager />;\n      case \"reportes\":\n        return <ReportsCenter />;\n      case \"formularios-publicos\":\n        // Solo directores y gerentes pueden gestionar formularios públicos\n        if (!isDirector && !isGerente) {\n          return <AccessDenied requiredRole=\"Director o Gerente\" />;\n        }\n        return <FormulariosPublicosManager />;\n      case \"configuracion\":\n        return (\n          <div className=\"p-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Configuración del Sistema</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Panel de configuración en desarrollo...\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        );\n      default:\n        return <WelcomeScreen />;\n    }\n  };\n\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar \n          activeSection={activeSection}\n          onSectionChange={setActiveSection}\n        />\n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between p-2 border-b\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <div className=\"flex items-center gap-4\">\n              {user && (\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\">\n                    {user.nombre} ({user.rol})\n                  </Badge>\n                  <button\n                    onClick={() => logoutMutation.mutate()}\n                    disabled={logoutMutation.isPending}\n                    className=\"text-sm text-muted-foreground hover:text-foreground\"\n                    data-testid=\"button-logout\"\n                  >\n                    {logoutMutation.isPending ? \"Cerrando...\" : \"Cerrar Sesión\"}\n                  </button>\n                </div>\n              )}\n              <ThemeToggle />\n            </div>\n          </header>\n          <main className=\"flex-1 overflow-auto\">\n            {renderSection()}\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Router />\n          <Toaster />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":9856},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 5% 98%;\n\n  --foreground: 210 10% 15%;\n\n  --border: 210 8% 88%;\n\n  --card: 210 3% 96%;\n\n  --card-foreground: 210 10% 15%;\n\n  --card-border: 210 8% 90%;\n\n  --sidebar: 210 4% 94%;\n\n  --sidebar-foreground: 210 10% 15%;\n\n  --sidebar-border: 210 8% 86%;\n\n  --sidebar-primary: 210 85% 45%;\n\n  --sidebar-primary-foreground: 210 85% 98%;\n\n  --sidebar-accent: 210 6% 90%;\n\n  --sidebar-accent-foreground: 210 10% 15%;\n\n  --sidebar-ring: 210 85% 45%;\n\n  --popover: 210 4% 92%;\n\n  --popover-foreground: 210 10% 15%;\n\n  --popover-border: 210 8% 84%;\n\n  --primary: 210 85% 45%;\n\n  --primary-foreground: 210 85% 98%;\n\n  --secondary: 210 6% 88%;\n\n  --secondary-foreground: 210 10% 15%;\n\n  --muted: 210 8% 90%;\n\n  --muted-foreground: 210 15% 40%;\n\n  --accent: 210 12% 85%;\n\n  --accent-foreground: 210 15% 25%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 210 15% 70%;\n  --ring: 210 85% 45%;\n  --chart-1: 210 85% 35%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 38 92% 45%;\n  --chart-4: 270 75% 50%;\n  --chart-5: 25 95% 53%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Roboto Mono, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 15% 25% / 0.02);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 15% 25% / 0.03);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 15% 25% / 0.04), 0px 1px 2px -1px hsl(210 15% 25% / 0.05);\n  --shadow: 0px 2px 0px 0px hsl(210 15% 25% / 0.05), 0px 1px 2px -1px hsl(210 15% 25% / 0.06);\n  --shadow-md: 0px 2px 0px 0px hsl(210 15% 25% / 0.06), 0px 2px 4px -1px hsl(210 15% 25% / 0.07);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 15% 25% / 0.07), 0px 4px 6px -1px hsl(210 15% 25% / 0.08);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 15% 25% / 0.08), 0px 8px 10px -1px hsl(210 15% 25% / 0.09);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 15% 25% / 0.10);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 15% 12%;\n\n  --foreground: 210 15% 88%;\n\n  --border: 210 12% 20%;\n\n  --card: 210 10% 18%;\n\n  --card-foreground: 210 15% 88%;\n\n  --card-border: 210 12% 26%;\n\n  --sidebar: 210 8% 15%;\n\n  --sidebar-foreground: 210 15% 88%;\n\n  --sidebar-border: 210 12% 22%;\n\n  --sidebar-primary: 210 85% 65%;\n\n  --sidebar-primary-foreground: 210 85% 98%;\n\n  --sidebar-accent: 210 8% 20%;\n\n  --sidebar-accent-foreground: 210 15% 88%;\n\n  --sidebar-ring: 210 85% 65%;\n\n  --popover: 210 8% 22%;\n\n  --popover-foreground: 210 15% 88%;\n\n  --popover-border: 210 12% 30%;\n\n  --primary: 210 85% 55%;\n\n  --primary-foreground: 210 85% 98%;\n\n  --secondary: 210 8% 25%;\n\n  --secondary-foreground: 210 15% 88%;\n\n  --muted: 210 8% 20%;\n\n  --muted-foreground: 210 15% 65%;\n\n  --accent: 210 12% 28%;\n\n  --accent-foreground: 210 15% 85%;\n\n  --destructive: 0 84% 65%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 210 15% 35%;\n  --ring: 210 85% 65%;\n  --chart-1: 210 85% 70%;\n  --chart-2: 142 76% 65%;\n  --chart-3: 38 92% 70%;\n  --chart-4: 270 75% 75%;\n  --chart-5: 25 95% 70%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 15% 5% / 0.20);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 15% 5% / 0.25);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 15% 5% / 0.30), 0px 1px 2px -1px hsl(210 15% 5% / 0.35);\n  --shadow: 0px 2px 0px 0px hsl(210 15% 5% / 0.35), 0px 1px 2px -1px hsl(210 15% 5% / 0.40);\n  --shadow-md: 0px 2px 0px 0px hsl(210 15% 5% / 0.40), 0px 2px 4px -1px hsl(210 15% 5% / 0.45);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 15% 5% / 0.45), 0px 4px 6px -1px hsl(210 15% 5% / 0.50);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 15% 5% / 0.50), 0px 8px 10px -1px hsl(210 15% 5% / 0.55);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 15% 5% / 0.60);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9844},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/app-sidebar.tsx":{"content":"import { \n  BookOpen, \n  Users, \n  MessageCircle, \n  BarChart3,\n  Target,\n  FileText,\n  GraduationCap,\n  Home,\n  Settings,\n  ExternalLink\n} from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\nimport { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nconst menuItems = [\n  {\n    title: \"Inicio\",\n    url: \"#dashboard\",\n    icon: Home,\n  },\n  {\n    title: \"Prospectos\",\n    url: \"#prospectos\", \n    icon: Users,\n  },\n  {\n    title: \"Estudiantes\",\n    url: \"#estudiantes\",\n    icon: GraduationCap,\n  },\n  {\n    title: \"Comunicaciones\",\n    url: \"#comunicaciones\",\n    icon: MessageCircle,\n  },\n  {\n    title: \"Campañas\",\n    url: \"#campanas\",\n    icon: Target,\n  },\n  {\n    title: \"Reportes\",\n    url: \"#reportes\",\n    icon: BarChart3,\n  },\n  {\n    title: \"Configuración\",\n    url: \"#configuracion\",\n    icon: Settings,\n  },\n];\n\nconst roleItems = [\n  {\n    title: \"Vista Director\",\n    url: \"#director\",\n    icon: GraduationCap,\n  },\n  {\n    title: \"Vista Gerente\",\n    url: \"#gerente\",\n    icon: FileText,\n  },\n  {\n    title: \"Vista Asesor\",\n    url: \"#asesor\",\n    icon: BookOpen,\n  },\n];\n\ninterface AppSidebarProps {\n  activeSection?: string;\n  onSectionChange?: (section: string) => void;\n}\n\nexport function AppSidebar({ activeSection = \"dashboard\", onSectionChange }: AppSidebarProps) {\n  const [currentSection, setCurrentSection] = useState(activeSection);\n  const { user, isDirector, isGerente, isAsesor } = useAuth();\n\n  const handleSectionClick = (section: string) => {\n    const cleanSection = section.replace('#', '');\n    setCurrentSection(cleanSection);\n    onSectionChange?.(cleanSection);\n  };\n\n  // Filtrar elementos del dashboard por rol\n  const getAvailableRoleItems = () => {\n    const availableItems = [];\n    \n    if (isDirector) {\n      availableItems.push({\n        title: \"Vista Director\",\n        url: \"#director\",\n        icon: GraduationCap,\n      });\n    }\n    \n    if (isGerente) {\n      availableItems.push({\n        title: \"Vista Gerente\",\n        url: \"#gerente\",\n        icon: FileText,\n      });\n    }\n    \n    if (isAsesor) {\n      availableItems.push({\n        title: \"Vista Asesor\",\n        url: \"#asesor\",\n        icon: BookOpen,\n      });\n    }\n    \n    return availableItems;\n  };\n\n  const availableRoleItems = getAvailableRoleItems();\n\n  // Elementos de administración solo para directores y gerentes\n  const getAdminItems = () => {\n    const adminItems = [];\n    \n    if (isDirector || isGerente) {\n      adminItems.push({\n        title: \"Formularios Públicos\",\n        url: \"#formularios-publicos\",\n        icon: ExternalLink,\n      });\n    }\n    \n    return adminItems;\n  };\n\n  const adminItems = getAdminItems();\n\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>CRM Educativo</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton \n                    asChild\n                    isActive={currentSection === item.url.replace('#', '')}\n                  >\n                    <button \n                      onClick={() => handleSectionClick(item.url)}\n                      data-testid={`button-nav-${item.url.replace('#', '')}`}\n                    >\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </button>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {/* Sección de administración solo para directores y gerentes */}\n        {adminItems.length > 0 && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Administración</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {adminItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton \n                      asChild\n                      isActive={currentSection === item.url.replace('#', '')}\n                    >\n                      <button \n                        onClick={() => handleSectionClick(item.url)}\n                        data-testid={`button-nav-${item.url.replace('#', '')}`}\n                      >\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </button>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n\n        {/* Solo mostrar dashboards disponibles según el rol */}\n        {availableRoleItems.length > 0 && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Dashboards Disponibles</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {availableRoleItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton \n                      asChild\n                      isActive={currentSection === item.url.replace('#', '')}\n                    >\n                      <button \n                        onClick={() => handleSectionClick(item.url)}\n                        data-testid={`button-nav-${item.url.replace('#', '')}`}\n                      >\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </button>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":5941},"client/src/components/asesor-dashboard.tsx":{"content":"import { StatsCard } from \"./stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Users, \n  Calendar,\n  Phone,\n  Mail,\n  MessageCircle,\n  Clock,\n  Plus,\n  Search\n} from \"lucide-react\";\nimport { useState } from \"react\";\n\n//todo: remove mock data functionality\nconst prospects = [\n  {\n    id: 1,\n    nombre: \"Ana Patricia Jiménez\",\n    telefono: \"+52 55 1234-5678\",\n    email: \"ana.jimenez@email.com\",\n    nivelEducativo: \"Preparatoria\",\n    origen: \"Facebook Ads\",\n    estatus: \"Cita Agendada\",\n    fechaCita: \"2024-01-15 10:00\",\n    tiempoRespuesta: \"2h\",\n    prioridad: \"alta\"\n  },\n  {\n    id: 2,\n    nombre: \"Carlos Eduardo Mendoza\",\n    telefono: \"+52 55 9876-5432\",\n    email: \"carlos.mendoza@email.com\",\n    nivelEducativo: \"Universidad\",\n    origen: \"Google Ads\",\n    estatus: \"Seguimiento\",\n    fechaCita: \"2024-01-16 14:30\",\n    tiempoRespuesta: \"1.5h\",\n    prioridad: \"media\"\n  },\n  {\n    id: 3,\n    nombre: \"María Elena Vásquez\",\n    telefono: \"+52 55 5555-1111\",\n    email: \"maria.vasquez@email.com\",\n    nivelEducativo: \"Secundaria\",\n    origen: \"Referencias\",\n    estatus: \"Primer Contacto\",\n    fechaCita: null,\n    tiempoRespuesta: \"3h\",\n    prioridad: \"alta\"\n  },\n];\n\nconst upcomingAppointments = [\n  {\n    id: 1,\n    prospecto: \"Ana Patricia Jiménez\",\n    fecha: \"Hoy 10:00\",\n    tipo: \"Presencial\",\n    estatus: \"Confirmada\"\n  },\n  {\n    id: 2,\n    prospecto: \"Carlos Eduardo Mendoza\",\n    fecha: \"Mañana 14:30\",\n    tipo: \"Video Llamada\",\n    estatus: \"Pendiente\"\n  },\n  {\n    id: 3,\n    prospecto: \"Roberto Silva\",\n    fecha: \"Mañana 16:00\",\n    tipo: \"Llamada\",\n    estatus: \"Confirmada\"\n  },\n];\n\nexport function AsesorDashboard() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedProspect, setSelectedProspect] = useState<number | null>(null);\n\n  const handleContactProspect = (prospectId: number, method: string) => {\n    console.log(`Contactando prospecto ${prospectId} via ${method}`);\n  };\n\n  const handleScheduleAppointment = (prospectId: number) => {\n    console.log(`Agendando cita con prospecto ${prospectId}`);\n  };\n\n  const handleAddNewProspect = () => {\n    console.log(\"Agregando nuevo prospecto\");\n  };\n\n  const filteredProspects = prospects.filter(prospect =>\n    prospect.nombre.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    prospect.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"alta\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      case \"media\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      default:\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-title-asesor\">\n            Dashboard Asesor Educativo\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Gestión de prospectos y seguimiento de citas\n          </p>\n        </div>\n        <Button \n          onClick={handleAddNewProspect}\n          data-testid=\"button-add-prospect\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Nuevo Prospecto\n        </Button>\n      </div>\n\n      {/* KPIs Personales */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <StatsCard\n          title=\"Mis Prospectos\"\n          value=\"23\"\n          icon={Users}\n          subtitle=\"Activos en seguimiento\"\n        />\n        <StatsCard\n          title=\"Citas Esta Semana\"\n          value=\"12\"\n          icon={Calendar}\n          change={{ value: \"+3 vs sem anterior\", type: \"positive\" }}\n        />\n        <StatsCard\n          title=\"Tasa Conversión\"\n          value=\"68.2%\"\n          icon={Clock}\n          change={{ value: \"+5.2% vs mes anterior\", type: \"positive\" }}\n        />\n        <StatsCard\n          title=\"Tiempo Respuesta Prom.\"\n          value=\"1.8h\"\n          icon={Phone}\n          change={{ value: \"-0.3h vs sem anterior\", type: \"positive\" }}\n        />\n      </div>\n\n      {/* Citas Próximas */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Mis Próximas Citas\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {upcomingAppointments.map((appointment) => (\n              <div \n                key={appointment.id} \n                className=\"flex items-center justify-between p-4 border rounded-lg hover-elevate\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                  <div>\n                    <p className=\"font-medium\">{appointment.prospecto}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {appointment.fecha} - {appointment.tipo}\n                    </p>\n                  </div>\n                </div>\n                <Badge \n                  variant={appointment.estatus === \"Confirmada\" ? \"default\" : \"secondary\"}\n                  className={appointment.estatus === \"Confirmada\" ? \"bg-green-500\" : \"bg-yellow-500\"}\n                >\n                  {appointment.estatus}\n                </Badge>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Gestión de Prospectos */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            Mis Prospectos\n            <div className=\"flex items-center gap-2\">\n              <Search className=\"h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Buscar prospecto...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-64\"\n                data-testid=\"input-search-prospects\"\n              />\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {filteredProspects.map((prospect) => (\n              <div \n                key={prospect.id} \n                className={`p-4 border rounded-lg hover-elevate cursor-pointer ${\n                  selectedProspect === prospect.id ? 'ring-2 ring-primary' : ''\n                }`}\n                onClick={() => setSelectedProspect(prospect.id)}\n                data-testid={`card-prospect-${prospect.id}`}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <h4 className=\"font-medium\">{prospect.nombre}</h4>\n                      <Badge \n                        variant=\"outline\" \n                        className={getPriorityColor(prospect.prioridad)}\n                      >\n                        {prospect.prioridad.toUpperCase()}\n                      </Badge>\n                      <Badge variant=\"secondary\">\n                        {prospect.estatus}\n                      </Badge>\n                    </div>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-muted-foreground\">\n                      <p>📞 {prospect.telefono}</p>\n                      <p>✉️ {prospect.email}</p>\n                      <p>🎓 {prospect.nivelEducativo}</p>\n                      <p>📈 {prospect.origen}</p>\n                      {prospect.fechaCita && (\n                        <p>📅 {prospect.fechaCita}</p>\n                      )}\n                      <p>⏱️ Respuesta: {prospect.tiempoRespuesta}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex flex-col gap-2\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleContactProspect(prospect.id, \"phone\");\n                      }}\n                      data-testid={`button-call-${prospect.id}`}\n                    >\n                      <Phone className=\"h-4 w-4 mr-1\" />\n                      Llamar\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleContactProspect(prospect.id, \"whatsapp\");\n                      }}\n                      data-testid={`button-whatsapp-${prospect.id}`}\n                    >\n                      <MessageCircle className=\"h-4 w-4 mr-1\" />\n                      WhatsApp\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleContactProspect(prospect.id, \"email\");\n                      }}\n                      data-testid={`button-email-${prospect.id}`}\n                    >\n                      <Mail className=\"h-4 w-4 mr-1\" />\n                      Email\n                    </Button>\n                    {!prospect.fechaCita && (\n                      <Button \n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleScheduleAppointment(prospect.id);\n                        }}\n                        data-testid={`button-schedule-${prospect.id}`}\n                      >\n                        <Calendar className=\"h-4 w-4 mr-1\" />\n                        Agendar\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10333},"client/src/components/campaign-manager.tsx":{"content":"import { StatsCard } from \"./stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Target, \n  DollarSign, \n  Users,\n  TrendingUp,\n  Plus,\n  Play,\n  Pause,\n  Eye\n} from \"lucide-react\";\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  LineChart,\n  Line\n} from \"recharts\";\n\n//todo: remove mock data functionality\nconst activeCampaigns = [\n  {\n    id: 1,\n    nombre: \"Promoción Preparatoria 2024\",\n    canal: \"Facebook Ads\",\n    presupuesto: 25000,\n    gastado: 18500,\n    prospectos: 324,\n    inscritos: 46,\n    costoProspecto: 57.10,\n    costoInscrito: 402.17,\n    roi: 285,\n    estado: \"Activa\",\n    fechaInicio: \"2024-01-01\",\n    fechaFin: \"2024-03-31\"\n  },\n  {\n    id: 2,\n    nombre: \"Universidad - Carreras Técnicas\",\n    canal: \"Google Ads\",\n    presupuesto: 30000,\n    gastado: 22100,\n    prospectos: 198,\n    inscritos: 31,\n    costoProspecto: 111.62,\n    costoInscrito: 712.90,\n    roi: 312,\n    estado: \"Activa\",\n    fechaInicio: \"2024-01-15\",\n    fechaFin: \"2024-04-15\"\n  },\n  {\n    id: 3,\n    nombre: \"Programa de Becas\",\n    canal: \"Redes Sociales\",\n    presupuesto: 15000,\n    gastado: 12800,\n    prospectos: 156,\n    inscritos: 28,\n    costoProspecto: 82.05,\n    costoInscrito: 457.14,\n    roi: 435,\n    estado: \"Pausada\",\n    fechaInicio: \"2024-01-10\",\n    fechaFin: \"2024-02-28\"\n  }\n];\n\nconst originData = [\n  { origen: \"Facebook Ads\", valor: 35, color: \"#3b82f6\" },\n  { origen: \"Google Ads\", valor: 28, color: \"#10b981\" },\n  { origen: \"Redes Sociales\", valor: 22, color: \"#f59e0b\" },\n  { origen: \"Referencias\", valor: 15, color: \"#ef4444\" },\n];\n\nconst performanceData = [\n  { mes: \"Ene\", prospectos: 324, inscritos: 46, costo: 18500 },\n  { mes: \"Feb\", prospectos: 298, inscritos: 52, costo: 22100 },\n  { mes: \"Mar\", prospectos: 356, inscritos: 38, costo: 19800 },\n  { mes: \"Abr\", prospectos: 412, inscritos: 61, costo: 24300 },\n];\n\nexport function CampaignManager() {\n  const handleCreateCampaign = () => {\n    console.log(\"Creando nueva campaña\");\n  };\n\n  const handleToggleCampaign = (campaignId: number, action: string) => {\n    console.log(`${action} campaña ${campaignId}`);\n  };\n\n  const handleViewCampaign = (campaignId: number) => {\n    console.log(`Viendo detalles de campaña ${campaignId}`);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Activa\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"Pausada\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      case \"Finalizada\":\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300\";\n      default:\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n    }\n  };\n\n  const totalBudget = activeCampaigns.reduce((sum, camp) => sum + camp.presupuesto, 0);\n  const totalSpent = activeCampaigns.reduce((sum, camp) => sum + camp.gastado, 0);\n  const totalProspects = activeCampaigns.reduce((sum, camp) => sum + camp.prospectos, 0);\n  const totalEnrolled = activeCampaigns.reduce((sum, camp) => sum + camp.inscritos, 0);\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-title-campaigns\">\n            Gestión de Campañas\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Seguimiento de origen de prospectos y ROI de marketing\n          </p>\n        </div>\n        <Button \n          onClick={handleCreateCampaign}\n          data-testid=\"button-create-campaign\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Nueva Campaña\n        </Button>\n      </div>\n\n      {/* KPIs Generales */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <StatsCard\n          title=\"Presupuesto Total\"\n          value={`$${totalBudget.toLocaleString()}`}\n          icon={DollarSign}\n          subtitle={`Gastado: $${totalSpent.toLocaleString()}`}\n        />\n        <StatsCard\n          title=\"Total Prospectos\"\n          value={totalProspects.toString()}\n          icon={Users}\n          change={{ value: \"+12% este mes\", type: \"positive\" }}\n        />\n        <StatsCard\n          title=\"Total Inscritos\"\n          value={totalEnrolled.toString()}\n          icon={Target}\n          change={{ value: \"+8% este mes\", type: \"positive\" }}\n        />\n        <StatsCard\n          title=\"ROI Promedio\"\n          value=\"344%\"\n          icon={TrendingUp}\n          change={{ value: \"+15% vs mes anterior\", type: \"positive\" }}\n        />\n      </div>\n\n      {/* Gráficos de Desempeño */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Distribución por Origen</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={originData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={60}\n                  outerRadius={100}\n                  paddingAngle={5}\n                  dataKey=\"valor\"\n                >\n                  {originData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n                <Legend />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Desempeño Mensual</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={performanceData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"mes\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"prospectos\" \n                  stroke=\"hsl(var(--chart-1))\" \n                  strokeWidth={2}\n                  name=\"Prospectos\"\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"inscritos\" \n                  stroke=\"hsl(var(--chart-2))\" \n                  strokeWidth={2}\n                  name=\"Inscritos\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Lista de Campañas Activas */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Campañas Activas</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {activeCampaigns.map((campaign) => (\n              <div key={campaign.id} className=\"p-4 border rounded-lg hover-elevate\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <h4 className=\"font-medium\">{campaign.nombre}</h4>\n                      <Badge \n                        variant=\"outline\" \n                        className={getStatusColor(campaign.estado)}\n                      >\n                        {campaign.estado}\n                      </Badge>\n                      <Badge variant=\"secondary\">\n                        {campaign.canal}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Presupuesto</p>\n                        <p className=\"font-medium\">${campaign.presupuesto.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Gastado</p>\n                        <p className=\"font-medium\">${campaign.gastado.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Prospectos</p>\n                        <p className=\"font-medium\">{campaign.prospectos}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Inscritos</p>\n                        <p className=\"font-medium\">{campaign.inscritos}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 text-sm mt-3\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Costo por Prospecto</p>\n                        <p className=\"font-medium\">${campaign.costoProspecto}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Costo por Inscrito</p>\n                        <p className=\"font-medium\">${campaign.costoInscrito}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">ROI</p>\n                        <p className=\"font-medium text-green-600\">{campaign.roi}%</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex flex-col gap-2 ml-4\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleViewCampaign(campaign.id)}\n                      data-testid={`button-view-campaign-${campaign.id}`}\n                    >\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      Ver\n                    </Button>\n                    {campaign.estado === \"Activa\" ? (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => handleToggleCampaign(campaign.id, \"pausar\")}\n                        data-testid={`button-pause-campaign-${campaign.id}`}\n                      >\n                        <Pause className=\"h-4 w-4 mr-1\" />\n                        Pausar\n                      </Button>\n                    ) : (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => handleToggleCampaign(campaign.id, \"reanudar\")}\n                        data-testid={`button-resume-campaign-${campaign.id}`}\n                      >\n                        <Play className=\"h-4 w-4 mr-1\" />\n                        Reanudar\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tabla de Análisis Detallado */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Análisis Detallado de ROI</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={activeCampaigns}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"nombre\" angle={-45} textAnchor=\"end\" height={100} />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar \n                dataKey=\"roi\" \n                fill=\"hsl(var(--chart-1))\" \n                name=\"ROI (%)\"\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11851},"client/src/components/communication-center.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Phone, \n  Mail, \n  MessageCircle,\n  Clock,\n  User,\n  Send,\n  Plus,\n  Filter\n} from \"lucide-react\";\nimport { useState } from \"react\";\n\n//todo: remove mock data functionality  \nconst communications = [\n  {\n    id: 1,\n    prospecto: \"Ana Patricia Jiménez\",\n    tipo: \"Llamada\",\n    fecha: \"2024-01-14 10:30\",\n    asesor: \"María García\",\n    duracion: \"15 min\",\n    resultado: \"Cita agendada para mañana\",\n    estado: \"Completado\"\n  },\n  {\n    id: 2,\n    prospecto: \"Carlos Eduardo Mendoza\",\n    tipo: \"WhatsApp\",\n    fecha: \"2024-01-14 09:45\",\n    asesor: \"Carlos López\",\n    duracion: \"5 min\",\n    resultado: \"Envió documentos solicitados\",\n    estado: \"Pendiente respuesta\"\n  },\n  {\n    id: 3,\n    prospecto: \"María Elena Vásquez\",\n    tipo: \"Email\",\n    fecha: \"2024-01-13 16:20\",\n    asesor: \"Ana Martínez\",\n    duracion: \"-\",\n    resultado: \"Información sobre becas enviada\",\n    estado: \"Entregado\"\n  },\n  {\n    id: 4,\n    prospecto: \"Roberto Silva Morales\",\n    tipo: \"Llamada\",\n    fecha: \"2024-01-13 14:15\",\n    asesor: \"Luis Rodríguez\",\n    duracion: \"25 min\",\n    resultado: \"Confirmó inscripción\",\n    estado: \"Completado\"\n  }\n];\n\nconst internalMessages = [\n  {\n    id: 1,\n    remitente: \"Dir. Académico\",\n    destinatario: \"Equipo Admisiones\",\n    asunto: \"Nueva promoción de becas\",\n    mensaje: \"Se aprobó promoción especial del 20% para nuevos estudiantes de preparatoria\",\n    fecha: \"2024-01-14 11:00\",\n    prioridad: \"Alta\"\n  },\n  {\n    id: 2,\n    remitente: \"María García\",\n    destinatario: \"Carlos López\",\n    asunto: \"Seguimiento prospecto Jiménez\",\n    mensaje: \"El prospecto Ana Jiménez preguntó por los horarios de clases vespertinas\",\n    fecha: \"2024-01-14 09:30\",\n    prioridad: \"Media\"\n  }\n];\n\nexport function CommunicationCenter() {\n  const [activeTab, setActiveTab] = useState(\"historial\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [selectedProspect, setSelectedProspect] = useState(\"\");\n  const [communicationType, setCommunicationType] = useState(\"phone\");\n\n  const handleSendCommunication = () => {\n    console.log(`Enviando ${communicationType} a ${selectedProspect}: ${newMessage}`);\n    setNewMessage(\"\");\n    setSelectedProspect(\"\");\n  };\n\n  const handleViewCommunication = (commId: number) => {\n    console.log(`Viendo detalles de comunicación ${commId}`);\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"Llamada\":\n        return <Phone className=\"h-4 w-4\" />;\n      case \"WhatsApp\":\n        return <MessageCircle className=\"h-4 w-4\" />;\n      case \"Email\":\n        return <Mail className=\"h-4 w-4\" />;\n      default:\n        return <User className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Completado\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"Entregado\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n      case \"Pendiente respuesta\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"Alta\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      case \"Media\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      default:\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-title-communications\">\n            Centro de Comunicaciones\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Gestión de llamadas, emails y mensajes internos\n          </p>\n        </div>\n      </div>\n\n      {/* Pestañas */}\n      <div className=\"flex space-x-1 border-b\">\n        <Button\n          variant={activeTab === \"historial\" ? \"default\" : \"ghost\"}\n          onClick={() => setActiveTab(\"historial\")}\n          data-testid=\"button-tab-history\"\n        >\n          Historial de Comunicaciones\n        </Button>\n        <Button\n          variant={activeTab === \"nuevo\" ? \"default\" : \"ghost\"}\n          onClick={() => setActiveTab(\"nuevo\")}\n          data-testid=\"button-tab-new\"\n        >\n          Nueva Comunicación\n        </Button>\n        <Button\n          variant={activeTab === \"interno\" ? \"default\" : \"ghost\"}\n          onClick={() => setActiveTab(\"interno\")}\n          data-testid=\"button-tab-internal\"\n        >\n          Mensajes Internos\n        </Button>\n      </div>\n\n      {/* Historial de Comunicaciones */}\n      {activeTab === \"historial\" && (\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2\">\n            <CardTitle>Historial de Comunicaciones</CardTitle>\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter-communications\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              Filtros\n            </Button>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {communications.map((comm) => (\n                <div key={comm.id} className=\"p-4 border rounded-lg hover-elevate\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      {getTypeIcon(comm.tipo)}\n                      <div>\n                        <h4 className=\"font-medium\">{comm.prospecto}</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {comm.asesor} • {comm.fecha}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\" className={getStatusColor(comm.estado)}>\n                        {comm.estado}\n                      </Badge>\n                      {comm.duracion !== \"-\" && (\n                        <Badge variant=\"secondary\">\n                          <Clock className=\"h-3 w-3 mr-1\" />\n                          {comm.duracion}\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"mt-2\">\n                    <p className=\"text-sm\">{comm.resultado}</p>\n                  </div>\n                  <div className=\"mt-3 flex justify-end\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleViewCommunication(comm.id)}\n                      data-testid={`button-view-comm-${comm.id}`}\n                    >\n                      Ver Detalles\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Nueva Comunicación */}\n      {activeTab === \"nuevo\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Registrar Nueva Comunicación</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Prospecto</label>\n                  <Input\n                    placeholder=\"Buscar prospecto...\"\n                    value={selectedProspect}\n                    onChange={(e) => setSelectedProspect(e.target.value)}\n                    data-testid=\"input-select-prospect\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Tipo de Comunicación</label>\n                  <select \n                    className=\"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm\"\n                    value={communicationType}\n                    onChange={(e) => setCommunicationType(e.target.value)}\n                    data-testid=\"select-communication-type\"\n                  >\n                    <option value=\"phone\">Llamada Telefónica</option>\n                    <option value=\"whatsapp\">WhatsApp</option>\n                    <option value=\"email\">Correo Electrónico</option>\n                    <option value=\"visit\">Visita Presencial</option>\n                  </select>\n                </div>\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Mensaje / Notas</label>\n                <Textarea\n                  placeholder=\"Describe el resultado de la comunicación...\"\n                  value={newMessage}\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  className=\"min-h-[100px]\"\n                  data-testid=\"textarea-communication-notes\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" data-testid=\"button-cancel-communication\">\n                  Cancelar\n                </Button>\n                <Button \n                  onClick={handleSendCommunication}\n                  data-testid=\"button-save-communication\"\n                >\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  Guardar Comunicación\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Mensajes Internos */}\n      {activeTab === \"interno\" && (\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Mensajes Internos del Equipo\n                <Button size=\"sm\" data-testid=\"button-new-internal-message\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Nuevo Mensaje\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {internalMessages.map((message) => (\n                  <div key={message.id} className=\"p-4 border rounded-lg hover-elevate\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h4 className=\"font-medium\">{message.asunto}</h4>\n                          <Badge \n                            variant=\"outline\" \n                            className={getPriorityColor(message.prioridad)}\n                          >\n                            {message.prioridad}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          De: {message.remitente} → Para: {message.destinatario}\n                        </p>\n                        <p className=\"text-sm\">{message.mensaje}</p>\n                        <p className=\"text-xs text-muted-foreground mt-2\">\n                          {message.fecha}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":11882},"client/src/components/director-dashboard.tsx":{"content":"import { StatsCard } from \"./stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Users, \n  TrendingUp, \n  DollarSign, \n  Target,\n  Download,\n  Calendar\n} from \"lucide-react\";\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell\n} from \"recharts\";\n\n//todo: remove mock data functionality\nconst weeklyData = [\n  { semana: \"Sem 1\", inscritos: 45, datos: 120 },\n  { semana: \"Sem 2\", inscritos: 52, datos: 98 },\n  { semana: \"Sem 3\", inscritos: 38, datos: 156 },\n  { semana: \"Sem 4\", inscritos: 61, datos: 134 },\n];\n\nconst advisorData = [\n  { asesor: \"María García\", inscritos: 28 },\n  { asesor: \"Carlos López\", inscritos: 24 },\n  { asesor: \"Ana Martínez\", inscritos: 19 },\n  { asesor: \"Luis Rodríguez\", inscritos: 16 },\n];\n\nconst originData = [\n  { origen: \"Redes Sociales\", valor: 35, color: \"#8884d8\" },\n  { origen: \"Referencias\", valor: 28, color: \"#82ca9d\" },\n  { origen: \"Publicidad Web\", valor: 22, color: \"#ffc658\" },\n  { origen: \"Eventos\", valor: 15, color: \"#ff7300\" },\n];\n\nexport function DirectorDashboard() {\n  const handleExportReport = (reportType: string) => {\n    console.log(`Exportando reporte: ${reportType}`);\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-title-director\">\n            Dashboard Director\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Vista ejecutiva y análisis comparativos\n          </p>\n        </div>\n        <Button \n          onClick={() => handleExportReport(\"ejecutivo\")}\n          data-testid=\"button-export-executive\"\n        >\n          <Download className=\"h-4 w-4 mr-2\" />\n          Exportar Reporte\n        </Button>\n      </div>\n\n      {/* KPIs Principales */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <StatsCard\n          title=\"Inscritos del Mes\"\n          value=\"196\"\n          icon={Users}\n          change={{ value: \"+12% vs mes anterior\", type: \"positive\" }}\n        />\n        <StatsCard\n          title=\"Tasa de Conversión\"\n          value=\"14.2%\"\n          icon={TrendingUp}\n          change={{ value: \"+2.3% vs mes anterior\", type: \"positive\" }}\n        />\n        <StatsCard\n          title=\"Costo por Inscrito\"\n          value=\"$2,450\"\n          icon={DollarSign}\n          change={{ value: \"-8% vs mes anterior\", type: \"positive\" }}\n        />\n        <StatsCard\n          title=\"ROI de Campañas\"\n          value=\"340%\"\n          icon={Target}\n          change={{ value: \"+15% vs mes anterior\", type: \"positive\" }}\n        />\n      </div>\n\n      {/* Gráficos Comparativos */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              Comportamiento Semanal: Datos vs Inscritos\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={weeklyData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"semana\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"inscritos\" \n                  stroke=\"hsl(var(--chart-1))\" \n                  strokeWidth={2}\n                  name=\"Inscritos\"\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"datos\" \n                  stroke=\"hsl(var(--chart-2))\" \n                  strokeWidth={2}\n                  name=\"Datos Recibidos\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Análisis de Orígenes de Datos</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={originData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={60}\n                  outerRadius={100}\n                  paddingAngle={5}\n                  dataKey=\"valor\"\n                >\n                  {originData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n                <Legend />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Comparación entre Asesores */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between gap-2\">\n          <CardTitle>Comparación Mensual: Inscritos por Asesor</CardTitle>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => handleExportReport(\"asesores\")}\n            data-testid=\"button-export-advisors\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Exportar\n          </Button>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={advisorData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"asesor\" />\n              <YAxis />\n              <Tooltip />\n              <Bar \n                dataKey=\"inscritos\" \n                fill=\"hsl(var(--chart-1))\" \n                name=\"Inscritos\"\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n\n      {/* Tabla de Costos e Inversión */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Costo Mensual: Datos vs Inversión Marketing</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left p-2\">Canal</th>\n                  <th className=\"text-left p-2\">Datos Obtenidos</th>\n                  <th className=\"text-left p-2\">Inversión ($)</th>\n                  <th className=\"text-left p-2\">Costo por Dato</th>\n                  <th className=\"text-left p-2\">Inscritos</th>\n                  <th className=\"text-left p-2\">ROI</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr className=\"border-b\">\n                  <td className=\"p-2 font-medium\">Facebook Ads</td>\n                  <td className=\"p-2\">324</td>\n                  <td className=\"p-2\">$28,500</td>\n                  <td className=\"p-2\">$87.96</td>\n                  <td className=\"p-2\">46</td>\n                  <td className=\"p-2 text-green-600\">285%</td>\n                </tr>\n                <tr className=\"border-b\">\n                  <td className=\"p-2 font-medium\">Google Ads</td>\n                  <td className=\"p-2\">198</td>\n                  <td className=\"p-2\">$22,100</td>\n                  <td className=\"p-2\">$111.62</td>\n                  <td className=\"p-2\">31</td>\n                  <td className=\"p-2 text-green-600\">312%</td>\n                </tr>\n                <tr className=\"border-b\">\n                  <td className=\"p-2 font-medium\">Referencias</td>\n                  <td className=\"p-2\">89</td>\n                  <td className=\"p-2\">$8,200</td>\n                  <td className=\"p-2\">$92.13</td>\n                  <td className=\"p-2\">28</td>\n                  <td className=\"p-2 text-green-600\">435%</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8009},"client/src/components/gerente-dashboard.tsx":{"content":"import { StatsCard } from \"./stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Users, \n  Target, \n  Phone,\n  Clock,\n  Award,\n  AlertTriangle\n} from \"lucide-react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  LineChart,\n  Line\n} from \"recharts\";\n\n//todo: remove mock data functionality\nconst advisorPerformance = [\n  { \n    nombre: \"María García\", \n    citasAtendidas: 45, \n    inscritos: 28, \n    conversion: 62.2,\n    meta: 25,\n    estatus: \"Superó meta\"\n  },\n  { \n    nombre: \"Carlos López\", \n    citasAtendidas: 38, \n    inscritos: 24, \n    conversion: 63.1,\n    meta: 22,\n    estatus: \"Superó meta\"\n  },\n  { \n    nombre: \"Ana Martínez\", \n    citasAtendidas: 32, \n    inscritos: 19, \n    conversion: 59.4,\n    meta: 20,\n    estatus: \"Bajo meta\"\n  },\n  { \n    nombre: \"Luis Rodríguez\", \n    citasAtendidas: 29, \n    inscritos: 16, \n    conversion: 55.2,\n    meta: 18,\n    estatus: \"Bajo meta\"\n  },\n];\n\nconst weeklyActivity = [\n  { semana: \"Sem 1\", llamadas: 156, citasAgendadas: 89, conversiones: 34 },\n  { semana: \"Sem 2\", llamadas: 142, citasAgendadas: 78, conversiones: 28 },\n  { semana: \"Sem 3\", llamadas: 168, citasAgendadas: 95, conversiones: 41 },\n  { semana: \"Sem 4\", llamadas: 175, citasAgendadas: 102, conversiones: 38 },\n];\n\nexport function GerenteDashboard() {\n  const handleAssignTask = (advisorName: string) => {\n    console.log(`Asignando tarea a: ${advisorName}`);\n  };\n\n  const handleViewDetails = (advisorName: string) => {\n    console.log(`Viendo detalles de: ${advisorName}`);\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-title-gerente\">\n            Dashboard Gerente de Admisión\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Supervisión de equipo y análisis de desempeño\n          </p>\n        </div>\n      </div>\n\n      {/* KPIs del Equipo */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <StatsCard\n          title=\"Total Asesores\"\n          value=\"4\"\n          icon={Users}\n          subtitle=\"Activos en el sistema\"\n        />\n        <StatsCard\n          title=\"Meta Mensual\"\n          value=\"85\"\n          icon={Target}\n          subtitle=\"Inscritos objetivo\"\n        />\n        <StatsCard\n          title=\"Progreso Meta\"\n          value=\"87\"\n          icon={Award}\n          change={{ value: \"102% completado\", type: \"positive\" }}\n        />\n        <StatsCard\n          title=\"Tiempo Respuesta Promedio\"\n          value=\"2.3h\"\n          icon={Clock}\n          change={{ value: \"-0.5h vs sem anterior\", type: \"positive\" }}\n        />\n      </div>\n\n      {/* Actividad Semanal del Equipo */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Actividad Semanal del Equipo</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={weeklyActivity}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"semana\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Line \n                type=\"monotone\" \n                dataKey=\"llamadas\" \n                stroke=\"hsl(var(--chart-1))\" \n                strokeWidth={2}\n                name=\"Llamadas Realizadas\"\n              />\n              <Line \n                type=\"monotone\" \n                dataKey=\"citasAgendadas\" \n                stroke=\"hsl(var(--chart-2))\" \n                strokeWidth={2}\n                name=\"Citas Agendadas\"\n              />\n              <Line \n                type=\"monotone\" \n                dataKey=\"conversiones\" \n                stroke=\"hsl(var(--chart-3))\" \n                strokeWidth={2}\n                name=\"Conversiones\"\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n\n      {/* Ranking y Desempeño de Asesores */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Ranking de Asesores - Conversión</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={advisorPerformance}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"nombre\" angle={-45} textAnchor=\"end\" height={80} />\n                <YAxis />\n                <Tooltip />\n                <Bar \n                  dataKey=\"conversion\" \n                  fill=\"hsl(var(--chart-1))\" \n                  name=\"% Conversión\"\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Cumplimiento de Metas</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {advisorPerformance.map((advisor, index) => {\n                const progress = (advisor.inscritos / advisor.meta) * 100;\n                const isOverTarget = progress >= 100;\n                \n                return (\n                  <div key={advisor.nombre} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <h4 className=\"font-medium\">{advisor.nombre}</h4>\n                        <Badge \n                          variant={isOverTarget ? \"default\" : \"secondary\"}\n                          className={isOverTarget ? \"bg-green-500\" : \"bg-yellow-500\"}\n                        >\n                          {advisor.estatus}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {advisor.inscritos}/{advisor.meta} inscritos ({progress.toFixed(1)}%)\n                      </p>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => handleViewDetails(advisor.nombre)}\n                        data-testid={`button-view-${advisor.nombre.replace(' ', '-').toLowerCase()}`}\n                      >\n                        Ver Detalles\n                      </Button>\n                      {!isOverTarget && (\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleAssignTask(advisor.nombre)}\n                          data-testid={`button-assign-${advisor.nombre.replace(' ', '-').toLowerCase()}`}\n                        >\n                          <AlertTriangle className=\"h-4 w-4 mr-1\" />\n                          Asignar Tarea\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tabla Detallada de Desempeño */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Reporte Detallado de Desempeño</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left p-2\">Asesor</th>\n                  <th className=\"text-left p-2\">Citas Atendidas</th>\n                  <th className=\"text-left p-2\">Inscritos</th>\n                  <th className=\"text-left p-2\">% Conversión</th>\n                  <th className=\"text-left p-2\">Meta</th>\n                  <th className=\"text-left p-2\">Estatus</th>\n                  <th className=\"text-left p-2\">Acciones</th>\n                </tr>\n              </thead>\n              <tbody>\n                {advisorPerformance.map((advisor) => (\n                  <tr key={advisor.nombre} className=\"border-b hover-elevate\">\n                    <td className=\"p-2 font-medium\">{advisor.nombre}</td>\n                    <td className=\"p-2\">{advisor.citasAtendidas}</td>\n                    <td className=\"p-2 font-bold\">{advisor.inscritos}</td>\n                    <td className=\"p-2\">\n                      <Badge variant=\"outline\">\n                        {advisor.conversion}%\n                      </Badge>\n                    </td>\n                    <td className=\"p-2\">{advisor.meta}</td>\n                    <td className=\"p-2\">\n                      <Badge \n                        variant={advisor.estatus === \"Superó meta\" ? \"default\" : \"secondary\"}\n                        className={advisor.estatus === \"Superó meta\" ? \"bg-green-500\" : \"bg-yellow-500\"}\n                      >\n                        {advisor.estatus}\n                      </Badge>\n                    </td>\n                    <td className=\"p-2\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => handleViewDetails(advisor.nombre)}\n                        data-testid={`button-details-${advisor.nombre.replace(' ', '-').toLowerCase()}`}\n                      >\n                        <Phone className=\"h-4 w-4 mr-1\" />\n                        Contactar\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9865},"client/src/components/prospect-manager.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Plus, \n  Search, \n  Filter,\n  Download,\n  UserPlus,\n  Phone,\n  Mail,\n  MessageCircle,\n  Calendar,\n  List,\n  LayoutGrid,\n  GraduationCap,\n  TrendingUp,\n  UserCheck,\n  FileCheck\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ProspectKanban } from \"./prospect-kanban\";\nimport type { Prospecto } from \"@shared/schema\";\n\nexport function ProspectManager() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"Todos\");\n  const [selectedProspects, setSelectedProspects] = useState<string[]>([]);\n  const [, setLocation] = useLocation();\n  const [viewMode, setViewMode] = useState<'list' | 'kanban'>('list');\n\n  const statusOptions = [\"Todos\", \"Nuevo\", \"Primer Contacto\", \"Cita Agendada\", \"Documentos\", \"Admitido\", \"Matriculado\"];\n\n  // Mapear nombres de estatus para display\n  const statusDisplayMap = {\n    \"nuevo\": \"Nuevo\",\n    \"primer_contacto\": \"Primer Contacto\",\n    \"cita_agendada\": \"Cita Agendada\",\n    \"documentos\": \"Documentos\",\n    \"admitido\": \"Admitido\",\n    \"matriculado\": \"Matriculado\"\n  } as const;\n\n  // Query para obtener prospectos reales\n  const { data: allProspects = [], isLoading, error } = useQuery<Prospecto[]>({\n    queryKey: [\"/api/prospectos\"],\n    staleTime: 30000\n  });\n\n  const filteredProspects = allProspects.filter(prospect => {\n    const matchesSearch = prospect.nombre.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         prospect.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = filterStatus === \"Todos\" || statusDisplayMap[prospect.estatus as keyof typeof statusDisplayMap] === filterStatus;\n    return matchesSearch && matchesStatus;\n  });\n\n  const handleAddProspect = () => {\n    console.log(\"Agregando nuevo prospecto\");\n  };\n\n  const handleExportData = () => {\n    console.log(\"Exportando datos de prospectos\");\n  };\n\n  const handleContactProspect = (prospectId: string, method: string) => {\n    console.log(`Contactando prospecto ${prospectId} via ${method}`);\n  };\n\n  const handleBulkAction = (action: string) => {\n    console.log(`Acción masiva: ${action} en prospectos:`, selectedProspects);\n  };\n\n  const toggleProspectSelection = (prospectId: string) => {\n    setSelectedProspects(prev => \n      prev.includes(prospectId) \n        ? prev.filter(id => id !== prospectId)\n        : [...prev, prospectId]\n    );\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Inscrito\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"Cita Agendada\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n      case \"Seguimiento\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      case \"No Interesado\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-title-prospects\">\n            Gestión de Prospectos\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Administración centralizada de todos los prospectos\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          {/* Toggle de vista */}\n          <div className=\"flex bg-muted rounded-lg p-1\">\n            <Button\n              variant={viewMode === 'list' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('list')}\n              data-testid=\"button-view-list\"\n            >\n              <List className=\"h-4 w-4 mr-1\" />\n              Lista\n            </Button>\n            <Button\n              variant={viewMode === 'kanban' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('kanban')}\n              data-testid=\"button-view-kanban\"\n            >\n              <LayoutGrid className=\"h-4 w-4 mr-1\" />\n              Tablero\n            </Button>\n          </div>\n          <Button \n            variant=\"outline\"\n            onClick={handleExportData}\n            data-testid=\"button-export-prospects\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Exportar\n          </Button>\n          <Button \n            onClick={handleAddProspect}\n            data-testid=\"button-add-prospect\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Nuevo Prospecto\n          </Button>\n        </div>\n      </div>\n\n      {/* Filtros y Búsqueda */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Filtros</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Buscar por nombre, email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-9\"\n                  data-testid=\"input-search-all-prospects\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <select \n                className=\"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:w-48\"\n                value={filterStatus}\n                onChange={(e) => setFilterStatus(e.target.value)}\n                data-testid=\"select-filter-status\"\n              >\n                {statusOptions.map(status => (\n                  <option key={status} value={status}>{status}</option>\n                ))}\n              </select>\n              <Button variant=\"outline\" data-testid=\"button-advanced-filters\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Más Filtros\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Acciones Masivas */}\n      {selectedProspects.length > 0 && (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm text-muted-foreground\">\n                {selectedProspects.length} prospecto(s) seleccionado(s)\n              </p>\n              <div className=\"flex gap-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => handleBulkAction(\"asignar\")}\n                  data-testid=\"button-bulk-assign\"\n                >\n                  <UserPlus className=\"h-4 w-4 mr-1\" />\n                  Asignar Asesor\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => handleBulkAction(\"exportar\")}\n                  data-testid=\"button-bulk-export\"\n                >\n                  <Download className=\"h-4 w-4 mr-1\" />\n                  Exportar Selección\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => setSelectedProspects([])}\n                  data-testid=\"button-clear-selection\"\n                >\n                  Limpiar Selección\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Vista condicional: Lista o Kanban */}\n      {viewMode === 'list' ? (\n        /* Vista Lista */\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              Prospectos ({isLoading ? '...' : filteredProspects.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">Cargando prospectos...</p>\n              </div>\n            ) : error ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-destructive\">Error al cargar prospectos</p>\n              </div>\n            ) : filteredProspects.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">No hay prospectos que coincidan con los filtros</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredProspects.map((prospect) => (\n                <div \n                  key={prospect.id} \n                  className={`p-4 border rounded-lg hover-elevate ${\n                    selectedProspects.includes(prospect.id) ? 'ring-2 ring-primary' : ''\n                  }`}\n                  data-testid={`card-prospect-${prospect.id}`}\n                >\n                  <div className=\"flex items-center gap-4\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedProspects.includes(prospect.id)}\n                      onChange={() => toggleProspectSelection(prospect.id)}\n                      className=\"h-4 w-4\"\n                      data-testid={`checkbox-prospect-${prospect.id}`}\n                    />\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <h4 className=\"font-medium\">{prospect.nombre}</h4>\n                        <Badge \n                          variant=\"outline\" \n                          className={getStatusColor(statusDisplayMap[prospect.estatus as keyof typeof statusDisplayMap])}\n                        >\n                          {statusDisplayMap[prospect.estatus as keyof typeof statusDisplayMap]}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2 text-sm text-muted-foreground\">\n                        <div>\n                          <p className=\"flex items-center gap-2\">\n                            <Phone className=\"h-3 w-3\" />\n                            {prospect.telefono}\n                          </p>\n                          <p className=\"flex items-center gap-2\">\n                            <Mail className=\"h-3 w-3\" />\n                            {prospect.email}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"flex items-center gap-2\">\n                            <GraduationCap className=\"h-3 w-3\" />\n                            {prospect.nivelEducativo}\n                          </p>\n                          <p className=\"flex items-center gap-2\">\n                            <TrendingUp className=\"h-3 w-3\" />\n                            Origen: {prospect.origen}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"flex items-center gap-2\">\n                            <UserCheck className=\"h-3 w-3\" />\n                            Asesor: {prospect.asesorId || 'Sin asignar'}\n                          </p>\n                          <p className=\"flex items-center gap-2\">\n                            <Calendar className=\"h-3 w-3\" />\n                            Registro: {prospect.fechaRegistro ? new Date(prospect.fechaRegistro).toLocaleDateString() : 'N/A'}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex flex-col gap-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => handleContactProspect(prospect.id, \"phone\")}\n                        data-testid={`button-call-prospect-${prospect.id}`}\n                      >\n                        <Phone className=\"h-4 w-4 mr-1\" />\n                        Llamar\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => handleContactProspect(prospect.id, \"whatsapp\")}\n                        data-testid={`button-whatsapp-prospect-${prospect.id}`}\n                      >\n                        <MessageCircle className=\"h-4 w-4 mr-1\" />\n                        WhatsApp\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => handleContactProspect(prospect.id, \"email\")}\n                        data-testid={`button-email-prospect-${prospect.id}`}\n                      >\n                        <Mail className=\"h-4 w-4 mr-1\" />\n                        Email\n                      </Button>\n                      {/* Botón para proceso de admisión - solo visible para etapas apropiadas */}\n                      {['cita_agendada', 'documentos', 'admitido', 'matriculado'].includes(prospect.estatus) && (\n                        <Button \n                          variant=\"default\" \n                          size=\"sm\"\n                          onClick={() => setLocation(`/proceso-admision/${prospect.id}`)}\n                          data-testid={`button-proceso-admision-${prospect.id}`}\n                        >\n                          <FileCheck className=\"h-4 w-4 mr-1\" />\n                          Proceso Admisión\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        /* Vista Kanban */\n        <Card className=\"h-[calc(100vh-300px)]\">\n          <CardHeader>\n            <CardTitle>\n              Pipeline de Prospectos ({filteredProspects.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"h-full\">\n            <ProspectKanban className=\"h-full\" prospects={filteredProspects} />\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":14988},"client/src/components/reports-center.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Download, \n  Calendar,\n  FileText,\n  TrendingUp,\n  Users,\n  DollarSign,\n  Target,\n  Clock\n} from \"lucide-react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell\n} from \"recharts\";\n\n//todo: remove mock data functionality\nconst reportTypes = [\n  {\n    id: 1,\n    nombre: \"Reporte Ejecutivo Mensual\",\n    descripcion: \"Análisis completo de métricas clave para dirección\",\n    frecuencia: \"Mensual\",\n    ultimaActualizacion: \"2024-01-14 08:00\",\n    disponible: true\n  },\n  {\n    id: 2,\n    nombre: \"Desempeño de Asesores\",\n    descripcion: \"Ranking y métricas de cada asesor educativo\",\n    frecuencia: \"Semanal\",\n    ultimaActualizacion: \"2024-01-14 06:00\",\n    disponible: true\n  },\n  {\n    id: 3,\n    nombre: \"Análisis de Campañas\",\n    descripcion: \"ROI y efectividad por canal de marketing\",\n    frecuencia: \"Quincenal\",\n    ultimaActualizacion: \"2024-01-13 18:00\",\n    disponible: true\n  },\n  {\n    id: 4,\n    nombre: \"Conversión por Origen\",\n    descripcion: \"Tasas de conversión según fuente de prospectos\",\n    frecuencia: \"Semanal\",\n    ultimaActualizacion: \"En proceso...\",\n    disponible: false\n  }\n];\n\nconst kpiData = [\n  { mes: \"Oct\", prospectos: 298, inscritos: 42, inversion: 32000 },\n  { mes: \"Nov\", prospectos: 356, inscritos: 51, inversion: 28500 },\n  { mes: \"Dic\", prospectos: 412, inscritos: 58, inversion: 31200 },\n  { mes: \"Ene\", prospectos: 445, inscritos: 67, inversion: 29800 },\n];\n\nconst conversionData = [\n  { origen: \"Facebook Ads\", conversion: 14.2 },\n  { origen: \"Google Ads\", conversion: 15.7 },\n  { origen: \"Referencias\", conversion: 31.4 },\n  { origen: \"Eventos\", conversion: 22.8 },\n];\n\nconst sourceData = [\n  { name: \"Facebook Ads\", value: 35, color: \"#3b82f6\" },\n  { name: \"Google Ads\", value: 28, color: \"#10b981\" },\n  { name: \"Referencias\", value: 22, color: \"#f59e0b\" },\n  { name: \"Eventos\", value: 15, color: \"#ef4444\" },\n];\n\nexport function ReportsCenter() {\n  const handleDownloadReport = (reportId: number, format: string) => {\n    console.log(`Descargando reporte ${reportId} en formato ${format}`);\n  };\n\n  const handleScheduleReport = (reportId: number) => {\n    console.log(`Programando reporte ${reportId}`);\n  };\n\n  const handleCustomReport = () => {\n    console.log(\"Creando reporte personalizado\");\n  };\n\n  const getFrequencyColor = (frequency: string) => {\n    switch (frequency) {\n      case \"Mensual\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n      case \"Semanal\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"Quincenal\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-title-reports\">\n            Centro de Reportes\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Análisis y reportes actualizados cada 3 horas\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Badge variant=\"outline\" className=\"bg-green-100 text-green-800\">\n            <Clock className=\"h-3 w-3 mr-1\" />\n            Actualizado: 08:00\n          </Badge>\n          <Button \n            variant=\"outline\"\n            onClick={handleCustomReport}\n            data-testid=\"button-custom-report\"\n          >\n            Reporte Personalizado\n          </Button>\n        </div>\n      </div>\n\n      {/* Reportes Disponibles */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            Reportes Disponibles\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4\">\n            {reportTypes.map((report) => (\n              <div key={report.id} className=\"p-4 border rounded-lg hover-elevate\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <h4 className=\"font-medium\">{report.nombre}</h4>\n                      <Badge \n                        variant=\"outline\" \n                        className={getFrequencyColor(report.frecuencia)}\n                      >\n                        {report.frecuencia}\n                      </Badge>\n                      {!report.disponible && (\n                        <Badge variant=\"secondary\">En proceso</Badge>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      {report.descripcion}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Última actualización: {report.ultimaActualizacion}\n                    </p>\n                  </div>\n                  \n                  <div className=\"flex flex-col gap-2 ml-4\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      disabled={!report.disponible}\n                      onClick={() => handleDownloadReport(report.id, \"pdf\")}\n                      data-testid={`button-download-pdf-${report.id}`}\n                    >\n                      <Download className=\"h-4 w-4 mr-1\" />\n                      PDF\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      disabled={!report.disponible}\n                      onClick={() => handleDownloadReport(report.id, \"excel\")}\n                      data-testid={`button-download-excel-${report.id}`}\n                    >\n                      <Download className=\"h-4 w-4 mr-1\" />\n                      Excel\n                    </Button>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => handleScheduleReport(report.id)}\n                      data-testid={`button-schedule-${report.id}`}\n                    >\n                      <Calendar className=\"h-4 w-4 mr-1\" />\n                      Programar\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Vista Previa de KPIs */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Tendencia Mensual de KPIs</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={kpiData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"mes\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"prospectos\" \n                  stroke=\"hsl(var(--chart-1))\" \n                  strokeWidth={2}\n                  name=\"Prospectos\"\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"inscritos\" \n                  stroke=\"hsl(var(--chart-2))\" \n                  strokeWidth={2}\n                  name=\"Inscritos\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Conversión por Origen</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={conversionData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"origen\" />\n                <YAxis />\n                <Tooltip />\n                <Bar \n                  dataKey=\"conversion\" \n                  fill=\"hsl(var(--chart-1))\" \n                  name=\"% Conversión\"\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Distribución de Fuentes */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Distribución de Fuentes de Prospectos</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col lg:flex-row items-center gap-6\">\n            <div className=\"flex-1\">\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={sourceData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={60}\n                    outerRadius={120}\n                    paddingAngle={5}\n                    dataKey=\"value\"\n                  >\n                    {sourceData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                  <Legend />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n            \n            <div className=\"flex-1\">\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium\">Resumen de Fuentes</h4>\n                {sourceData.map((source) => (\n                  <div key={source.name} className=\"flex items-center justify-between p-2 border rounded\">\n                    <div className=\"flex items-center gap-2\">\n                      <div \n                        className=\"w-3 h-3 rounded-full\" \n                        style={{ backgroundColor: source.color }}\n                      />\n                      <span className=\"text-sm\">{source.name}</span>\n                    </div>\n                    <Badge variant=\"outline\">{source.value}%</Badge>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Métricas en Tiempo Real */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Métricas en Tiempo Real</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div className=\"p-4 text-center border rounded-lg\">\n              <Users className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n              <p className=\"text-2xl font-bold\">1,234</p>\n              <p className=\"text-sm text-muted-foreground\">Prospectos Totales</p>\n            </div>\n            <div className=\"p-4 text-center border rounded-lg\">\n              <Target className=\"h-8 w-8 mx-auto mb-2 text-green-500\" />\n              <p className=\"text-2xl font-bold\">187</p>\n              <p className=\"text-sm text-muted-foreground\">Inscritos del Mes</p>\n            </div>\n            <div className=\"p-4 text-center border rounded-lg\">\n              <DollarSign className=\"h-8 w-8 mx-auto mb-2 text-yellow-500\" />\n              <p className=\"text-2xl font-bold\">$89,500</p>\n              <p className=\"text-sm text-muted-foreground\">Inversión Marketing</p>\n            </div>\n            <div className=\"p-4 text-center border rounded-lg\">\n              <TrendingUp className=\"h-8 w-8 mx-auto mb-2 text-blue-500\" />\n              <p className=\"text-2xl font-bold\">15.1%</p>\n              <p className=\"text-sm text-muted-foreground\">Tasa Conversión</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11951},"client/src/components/stats-card.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  change?: {\n    value: string;\n    type: \"positive\" | \"negative\" | \"neutral\";\n  };\n  subtitle?: string;\n  className?: string;\n}\n\nexport function StatsCard({ \n  title, \n  value, \n  icon: Icon, \n  change, \n  subtitle, \n  className = \"\" \n}: StatsCardProps) {\n  const getChangeColor = (type: \"positive\" | \"negative\" | \"neutral\") => {\n    switch (type) {\n      case \"positive\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"negative\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300\";\n    }\n  };\n\n  return (\n    <Card className={`hover-elevate ${className}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n          {title}\n        </CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex flex-col gap-2\">\n          <div className=\"text-2xl font-bold\" data-testid={`text-value-${title.toLowerCase()}`}>\n            {value}\n          </div>\n          {subtitle && (\n            <div className=\"text-sm text-muted-foreground\">\n              {subtitle}\n            </div>\n          )}\n          {change && (\n            <Badge \n              variant=\"secondary\" \n              className={`w-fit ${getChangeColor(change.type)}`}\n              data-testid={`badge-change-${title.toLowerCase()}`}\n            >\n              {change.value}\n            </Badge>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":1958},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\n\nexport function ThemeToggle() {\n  const [isDark, setIsDark] = useState(false);\n\n  useEffect(() => {\n    const theme = localStorage.getItem(\"theme\");\n    const systemDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const shouldBeDark = theme === \"dark\" || (!theme && systemDark);\n    \n    setIsDark(shouldBeDark);\n    document.documentElement.classList.toggle(\"dark\", shouldBeDark);\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = isDark ? \"light\" : \"dark\";\n    setIsDark(!isDark);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", !isDark);\n    console.log(`Tema cambiado a: ${newTheme}`);\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {isDark ? (\n        <Sun className=\"h-5 w-5\" />\n      ) : (\n        <Moon className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}","size_bytes":1086},"client/src/hooks/use-auth.tsx":{"content":"// Hook de autenticación para CRM educativo (basado en blueprint:javascript_auth_all_persistance)\nimport { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n  isDirector: boolean;\n  isGerente: boolean;\n  isAsesor: boolean;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  \n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.error || \"Error de autenticación\");\n      }\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"¡Bienvenido!\",\n        description: `Hola ${user.nombre}, has iniciado sesión exitosamente.`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error de inicio de sesión\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.error || \"Error de registro\");\n      }\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"¡Registro exitoso!\",\n        description: `Bienvenido ${user.nombre}, tu cuenta ha sido creada exitosamente.`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error de registro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/logout\");\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.error || \"Error al cerrar sesión\");\n      }\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Sesión cerrada\",\n        description: \"Has cerrado sesión exitosamente.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error al cerrar sesión\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Helper para verificar roles\n  const isDirector = user?.rol === \"director\";\n  const isGerente = user?.rol === \"gerente\" || isDirector;\n  const isAsesor = user?.rol === \"asesor\" || isGerente;\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n        isDirector,\n        isGerente,\n        isAsesor,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":4117},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"// Componente de rutas protegidas para CRM educativo (basado en blueprint:javascript_auth_all_persistance)\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\ninterface ProtectedRouteProps {\n  path: string;\n  component: () => React.JSX.Element;\n  allowedRoles?: string[];\n}\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n  allowedRoles = [],\n}: ProtectedRouteProps) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"text-center\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">Cargando...</p>\n          </div>\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  // Si se especifican roles permitidos, verificar que el usuario tenga uno de ellos\n  if (allowedRoles.length > 0 && !allowedRoles.includes(user.rol)) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"text-center max-w-md\">\n            <h2 className=\"text-2xl font-bold text-destructive mb-2\">\n              Acceso Denegado\n            </h2>\n            <p className=\"text-muted-foreground mb-4\">\n              No tienes permisos suficientes para acceder a esta sección.\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              Tu rol actual: <strong>{user.rol}</strong>\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              Roles requeridos: <strong>{allowedRoles.join(\", \")}</strong>\n            </p>\n          </div>\n        </div>\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}\n\n// Componente helper para rutas que requieren rol específico\nexport function DirectorRoute({ path, component }: { path: string; component: () => React.JSX.Element }) {\n  return <ProtectedRoute path={path} component={component} allowedRoles={[\"director\"]} />;\n}\n\nexport function GerenteRoute({ path, component }: { path: string; component: () => React.JSX.Element }) {\n  return <ProtectedRoute path={path} component={component} allowedRoles={[\"director\", \"gerente\"]} />;\n}\n\nexport function AsesorRoute({ path, component }: { path: string; component: () => React.JSX.Element }) {\n  return <ProtectedRoute path={path} component={component} allowedRoles={[\"director\", \"gerente\", \"asesor\"]} />;\n}","size_bytes":2663},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { GraduationCap, Users, BarChart3, MessageCircle } from \"lucide-react\";\nimport { useEffect } from \"react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(3, \"El usuario debe tener al menos 3 caracteres\"),\n  password: z.string().min(6, \"La contraseña debe tener al menos 6 caracteres\"),\n});\n\nconst registerSchema = z.object({\n  username: z.string().min(3, \"El usuario debe tener al menos 3 caracteres\"),\n  password: z.string().min(6, \"La contraseña debe tener al menos 6 caracteres\"),\n  nombre: z.string().min(2, \"El nombre debe tener al menos 2 caracteres\"),\n  email: z.string().email(\"Debe ser un email válido\"),\n  rol: z.enum([\"director\", \"gerente\", \"asesor\"], {\n    errorMap: () => ({ message: \"Debes seleccionar un rol válido\" }),\n  }),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const [isLogin, setIsLogin] = useState(true);\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Redirigir si ya está autenticado\n  useEffect(() => {\n    if (user) {\n      setLocation(\"/\");\n    }\n  }, [user, setLocation]);\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      nombre: \"\",\n      email: \"\",\n      rol: \"asesor\",\n    },\n  });\n\n  const onLogin = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n  // Prevenir render si ya está autenticado\n  if (user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Formulario de autenticación */}\n      <div className=\"flex-1 flex items-center justify-center p-6 bg-background\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"text-center\">\n              {isLogin ? \"Iniciar Sesión\" : \"Crear Cuenta\"}\n            </CardTitle>\n            <p className=\"text-center text-muted-foreground\">\n              {isLogin \n                ? \"Accede a tu cuenta del CRM Educativo\"\n                : \"Registrate en el CRM Educativo\"\n              }\n            </p>\n          </CardHeader>\n          <CardContent>\n            {isLogin ? (\n              <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"login-username\">Usuario</Label>\n                  <Input\n                    id=\"login-username\"\n                    type=\"text\"\n                    {...loginForm.register(\"username\")}\n                    data-testid=\"input-login-username\"\n                  />\n                  {loginForm.formState.errors.username && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {loginForm.formState.errors.username.message}\n                    </p>\n                  )}\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"login-password\">Contraseña</Label>\n                  <Input\n                    id=\"login-password\"\n                    type=\"password\"\n                    {...loginForm.register(\"password\")}\n                    data-testid=\"input-login-password\"\n                  />\n                  {loginForm.formState.errors.password && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {loginForm.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? \"Iniciando sesión...\" : \"Iniciar Sesión\"}\n                </Button>\n              </form>\n            ) : (\n              <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"register-username\">Usuario</Label>\n                    <Input\n                      id=\"register-username\"\n                      type=\"text\"\n                      {...registerForm.register(\"username\")}\n                      data-testid=\"input-register-username\"\n                    />\n                    {registerForm.formState.errors.username && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {registerForm.formState.errors.username.message}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"register-nombre\">Nombre Completo</Label>\n                    <Input\n                      id=\"register-nombre\"\n                      type=\"text\"\n                      {...registerForm.register(\"nombre\")}\n                      data-testid=\"input-register-nombre\"\n                    />\n                    {registerForm.formState.errors.nombre && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {registerForm.formState.errors.nombre.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"register-email\">Email</Label>\n                  <Input\n                    id=\"register-email\"\n                    type=\"email\"\n                    {...registerForm.register(\"email\")}\n                    data-testid=\"input-register-email\"\n                  />\n                  {registerForm.formState.errors.email && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {registerForm.formState.errors.email.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"register-password\">Contraseña</Label>\n                  <Input\n                    id=\"register-password\"\n                    type=\"password\"\n                    {...registerForm.register(\"password\")}\n                    data-testid=\"input-register-password\"\n                  />\n                  {registerForm.formState.errors.password && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {registerForm.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"register-rol\">Rol en la Institución</Label>\n                  <select \n                    id=\"register-rol\"\n                    className=\"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\"\n                    {...registerForm.register(\"rol\")}\n                    data-testid=\"select-register-rol\"\n                  >\n                    <option value=\"asesor\">Asesor Educativo</option>\n                    <option value=\"gerente\">Gerente de Admisión</option>\n                    <option value=\"director\">Director/Rector</option>\n                  </select>\n                  {registerForm.formState.errors.rol && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {registerForm.formState.errors.rol.message}\n                    </p>\n                  )}\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={registerMutation.isPending}\n                  data-testid=\"button-register\"\n                >\n                  {registerMutation.isPending ? \"Creando cuenta...\" : \"Crear Cuenta\"}\n                </Button>\n              </form>\n            )}\n\n            <div className=\"mt-4 text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                {isLogin ? \"¿No tienes una cuenta?\" : \"¿Ya tienes una cuenta?\"}\n              </p>\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsLogin(!isLogin)}\n                data-testid=\"button-toggle-auth-mode\"\n              >\n                {isLogin ? \"Crear cuenta nueva\" : \"Iniciar sesión\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Hero section */}\n      <div className=\"hidden lg:flex flex-1 bg-primary/5 items-center justify-center p-12\">\n        <div className=\"text-center max-w-lg\">\n          <GraduationCap className=\"h-16 w-16 text-primary mx-auto mb-6\" />\n          <h1 className=\"text-3xl font-bold mb-4\">\n            CRM Educativo\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Sistema integral de gestión para instituciones educativas\n          </p>\n          \n          <div className=\"grid grid-cols-1 gap-6\">\n            <div className=\"flex items-center gap-3\">\n              <Users className=\"h-8 w-8 text-primary\" />\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Gestión de Prospectos</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Administra candidatos desde primer contacto hasta inscripción\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <BarChart3 className=\"h-8 w-8 text-primary\" />\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Dashboards por Rol</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Vistas personalizadas para Directores, Gerentes y Asesores\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <MessageCircle className=\"h-8 w-8 text-primary\" />\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Comunicaciones Integradas</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Registro de llamadas, emails y mensajes internos\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11225},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/app-sidebar.tsx":{"content":"import { AppSidebar } from '../app-sidebar';\n\nexport default function AppSidebarExample() {\n  return (\n    <div className=\"h-screen w-64\">\n      <AppSidebar \n        activeSection=\"dashboard\" \n        onSectionChange={(section) => console.log('Navegando a:', section)} \n      />\n    </div>\n  );\n}","size_bytes":296},"client/src/components/examples/asesor-dashboard.tsx":{"content":"import { AsesorDashboard } from '../asesor-dashboard';\n\nexport default function AsesorDashboardExample() {\n  return <AsesorDashboard />;\n}","size_bytes":138},"client/src/components/examples/campaign-manager.tsx":{"content":"import { CampaignManager } from '../campaign-manager';\n\nexport default function CampaignManagerExample() {\n  return <CampaignManager />;\n}","size_bytes":138},"client/src/components/examples/communication-center.tsx":{"content":"import { CommunicationCenter } from '../communication-center';\n\nexport default function CommunicationCenterExample() {\n  return <CommunicationCenter />;\n}","size_bytes":154},"client/src/components/examples/director-dashboard.tsx":{"content":"import { DirectorDashboard } from '../director-dashboard';\n\nexport default function DirectorDashboardExample() {\n  return <DirectorDashboard />;\n}","size_bytes":146},"client/src/components/examples/gerente-dashboard.tsx":{"content":"import { GerenteDashboard } from '../gerente-dashboard';\n\nexport default function GerenteDashboardExample() {\n  return <GerenteDashboard />;\n}","size_bytes":142},"client/src/components/examples/prospect-manager.tsx":{"content":"import { ProspectManager } from '../prospect-manager';\n\nexport default function ProspectManagerExample() {\n  return <ProspectManager />;\n}","size_bytes":138},"client/src/components/examples/reports-center.tsx":{"content":"import { ReportsCenter } from '../reports-center';\n\nexport default function ReportsCenterExample() {\n  return <ReportsCenter />;\n}","size_bytes":130},"client/src/components/examples/stats-card.tsx":{"content":"import { StatsCard } from '../stats-card';\nimport { Users } from 'lucide-react';\n\nexport default function StatsCardExample() {\n  return (\n    <div className=\"p-4\">\n      <StatsCard\n        title=\"Total Estudiantes\"\n        value=\"1,234\"\n        icon={Users}\n        change={{ value: \"+15% este mes\", type: \"positive\" }}\n        subtitle=\"Activos en el sistema\"\n      />\n    </div>\n  );\n}","size_bytes":387},"client/src/components/examples/theme-toggle.tsx":{"content":"import { ThemeToggle } from '../theme-toggle';\n\nexport default function ThemeToggleExample() {\n  return <ThemeToggle />;\n}","size_bytes":122},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/formularios-publicos-manager.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { \n  Plus, \n  Eye,\n  Edit,\n  Trash2,\n  Copy,\n  Link,\n  QrCode,\n  Users,\n  Settings\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\n// Esquemas de validación para formularios\nconst formularioSchema = z.object({\n  nombre: z.string().min(1, \"El nombre es requerido\"),\n  descripcion: z.string().optional(),\n  nivelEducativo: z.enum([\"primaria\", \"secundaria\", \"preparatoria\", \"universidad\"]),\n  activo: z.boolean().default(true),\n  configuracion: z.object({\n    mostrarTelefono: z.boolean().default(true),\n    mostrarNivelEducativo: z.boolean().default(true),\n    camposExtra: z.array(z.string()).default([]),\n    mensajeBienvenida: z.string().default(\"¡Bienvenido! Completa este formulario para comenzar tu proceso de admisión.\"),\n    mensajeExito: z.string().default(\"¡Gracias! Hemos recibido tu información. Nos contactaremos contigo pronto.\")\n  }).default({})\n});\n\ntype FormularioFormData = z.infer<typeof formularioSchema>;\n\ninterface FormularioPublico {\n  id: string;\n  nombre: string;\n  descripcion?: string;\n  nivelEducativo: string;\n  enlace: string;\n  activo: boolean;\n  configuracion: any;\n  fechaCreacion: string;\n}\n\nexport default function FormulariosPublicosManager() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingFormulario, setEditingFormulario] = useState<FormularioPublico | null>(null);\n  const [selectedNivel, setSelectedNivel] = useState<string>(\"\");\n\n  // Query para obtener formularios públicos\n  const { data: formularios = [], isLoading } = useQuery<FormularioPublico[]>({\n    queryKey: [\"/api/formularios-publicos\"],\n    staleTime: 30000\n  });\n\n  // Mutation para crear formulario\n  const createMutation = useMutation({\n    mutationFn: (data: FormularioFormData) => apiRequest(\"POST\", \"/api/formularios-publicos\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/formularios-publicos\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Formulario público creado\",\n        description: \"El formulario ha sido creado exitosamente.\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear el formulario público.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Mutation para actualizar formulario\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<FormularioFormData> }) => \n      apiRequest(\"PUT\", `/api/formularios-publicos/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/formularios-publicos\"] });\n      setIsDialogOpen(false);\n      setEditingFormulario(null);\n      form.reset();\n      toast({\n        title: \"Formulario actualizado\",\n        description: \"El formulario ha sido actualizado exitosamente.\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar el formulario.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Mutation para eliminar formulario\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/formularios-publicos/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/formularios-publicos\"] });\n      toast({\n        title: \"Formulario eliminado\",\n        description: \"El formulario ha sido eliminado exitosamente.\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo eliminar el formulario.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Configuración del formulario\n  const form = useForm<FormularioFormData>({\n    resolver: zodResolver(formularioSchema),\n    defaultValues: {\n      nombre: \"\",\n      descripcion: \"\",\n      nivelEducativo: \"preparatoria\",\n      activo: true,\n      configuracion: {\n        mostrarTelefono: true,\n        mostrarNivelEducativo: true,\n        camposExtra: [],\n        mensajeBienvenida: \"¡Bienvenido! Completa este formulario para comenzar tu proceso de admisión.\",\n        mensajeExito: \"¡Gracias! Hemos recibido tu información. Nos contactaremos contigo pronto.\"\n      }\n    }\n  });\n\n  const handleSubmit = (data: FormularioFormData) => {\n    if (editingFormulario) {\n      updateMutation.mutate({ id: editingFormulario.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (formulario: FormularioPublico) => {\n    setEditingFormulario(formulario);\n    form.reset({\n      nombre: formulario.nombre,\n      descripcion: formulario.descripcion || \"\",\n      nivelEducativo: formulario.nivelEducativo as any,\n      activo: formulario.activo,\n      configuracion: formulario.configuracion || {}\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"¿Estás seguro de que quieres eliminar este formulario público?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const copyToClipboard = (enlace: string) => {\n    const fullUrl = `${window.location.origin}/form/${enlace}`;\n    navigator.clipboard.writeText(fullUrl);\n    toast({\n      title: \"Enlace copiado\",\n      description: \"El enlace del formulario ha sido copiado al portapapeles.\"\n    });\n  };\n\n  const handleNewFormulario = () => {\n    setEditingFormulario(null);\n    form.reset();\n    setIsDialogOpen(true);\n  };\n\n  // Filtrar formularios por nivel educativo\n  const filteredFormularios = (selectedNivel && selectedNivel !== \"todos\") \n    ? formularios.filter((f: FormularioPublico) => f.nivelEducativo === selectedNivel)\n    : formularios;\n\n  const getEstadoBadge = (activo: boolean) => {\n    return activo ? (\n      <Badge variant=\"default\" className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100\">\n        Activo\n      </Badge>\n    ) : (\n      <Badge variant=\"secondary\">\n        Inactivo\n      </Badge>\n    );\n  };\n\n  const getNivelBadge = (nivel: string) => {\n    const colores = {\n      primaria: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100\",\n      secundaria: \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-100\",\n      preparatoria: \"bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-100\",\n      universidad: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100\"\n    };\n    \n    return (\n      <Badge variant=\"outline\" className={colores[nivel as keyof typeof colores] || \"\"}>\n        {nivel.charAt(0).toUpperCase() + nivel.slice(1)}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Formularios Públicos</h2>\n          <p className=\"text-muted-foreground\">\n            Gestiona formularios de captura de leads para diferentes niveles educativos\n          </p>\n        </div>\n        <Button onClick={handleNewFormulario} data-testid=\"button-nuevo-formulario\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Nuevo Formulario\n        </Button>\n      </div>\n\n      {/* Filtros */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex gap-4 items-center\">\n            <Label htmlFor=\"nivel-filter\">Filtrar por nivel:</Label>\n            <Select value={selectedNivel} onValueChange={setSelectedNivel}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-nivel-filter\">\n                <SelectValue placeholder=\"Todos los niveles\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"todos\">Todos los niveles</SelectItem>\n                <SelectItem value=\"primaria\">Primaria</SelectItem>\n                <SelectItem value=\"secundaria\">Secundaria</SelectItem>\n                <SelectItem value=\"preparatoria\">Preparatoria</SelectItem>\n                <SelectItem value=\"universidad\">Universidad</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Lista de formularios */}\n      <div className=\"grid gap-4\">\n        {isLoading ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <p className=\"text-muted-foreground\">Cargando formularios...</p>\n            </CardContent>\n          </Card>\n        ) : filteredFormularios.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <p className=\"text-muted-foreground\">\n                {selectedNivel \n                  ? `No hay formularios para el nivel ${selectedNivel}` \n                  : \"No hay formularios públicos creados\"}\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredFormularios.map((formulario: FormularioPublico) => (\n            <Card key={formulario.id} data-testid={`card-formulario-${formulario.id}`}>\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"space-y-1\">\n                    <CardTitle className=\"text-lg\">{formulario.nombre}</CardTitle>\n                    {formulario.descripcion && (\n                      <p className=\"text-sm text-muted-foreground\">{formulario.descripcion}</p>\n                    )}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    {getEstadoBadge(formulario.activo)}\n                    {getNivelBadge(formulario.nivelEducativo)}\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Enlace del formulario */}\n                  <div className=\"flex items-center gap-2 p-3 bg-muted rounded-lg\">\n                    <Link className=\"h-4 w-4 text-muted-foreground\" />\n                    <code className=\"text-sm flex-1 break-all\">\n                      {window.location.origin}/form/{formulario.enlace}\n                    </code>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(formulario.enlace)}\n                      data-testid={`button-copy-${formulario.id}`}\n                    >\n                      <Copy className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n\n                  {/* Acciones */}\n                  <div className=\"flex justify-between items-center pt-2\">\n                    <div className=\"text-sm text-muted-foreground\">\n                      Creado: {new Date(formulario.fechaCreacion).toLocaleDateString()}\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => window.open(`/form/${formulario.enlace}`, '_blank')}\n                        data-testid={`button-preview-${formulario.id}`}\n                      >\n                        <Eye className=\"h-4 w-4 mr-1\" />\n                        Vista Previa\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(formulario)}\n                        data-testid={`button-edit-${formulario.id}`}\n                      >\n                        <Edit className=\"h-4 w-4 mr-1\" />\n                        Editar\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(formulario.id)}\n                        data-testid={`button-delete-${formulario.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-1\" />\n                        Eliminar\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Dialog para crear/editar formulario */}\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingFormulario ? \"Editar Formulario Público\" : \"Nuevo Formulario Público\"}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"nombre\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nombre del Formulario</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Ej: Inscripciones Preparatoria 2024\" {...field} data-testid=\"input-nombre\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"nivelEducativo\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nivel Educativo</FormLabel>\n                      <FormControl>\n                        <Select value={field.value} onValueChange={field.onChange}>\n                          <SelectTrigger data-testid=\"select-nivel-educativo\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"primaria\">Primaria</SelectItem>\n                            <SelectItem value=\"secundaria\">Secundaria</SelectItem>\n                            <SelectItem value=\"preparatoria\">Preparatoria</SelectItem>\n                            <SelectItem value=\"universidad\">Universidad</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"descripcion\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Descripción (Opcional)</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Descripción breve del formulario y su propósito...\"\n                        className=\"resize-none\"\n                        {...field}\n                        data-testid=\"textarea-descripcion\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"activo\"\n                render={({ field }) => (\n                  <FormItem className=\"flex items-center justify-between\">\n                    <div>\n                      <FormLabel>Estado del Formulario</FormLabel>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Los formularios inactivos no aceptan nuevas respuestas\n                      </p>\n                    </div>\n                    <FormControl>\n                      <Switch \n                        checked={field.value} \n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-activo\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end gap-3 pt-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsDialogOpen(false)}\n                  data-testid=\"button-cancelar\"\n                >\n                  Cancelar\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-guardar\"\n                >\n                  {createMutation.isPending || updateMutation.isPending ? \"Guardando...\" : \"Guardar\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":17641},"client/src/components/prospect-kanban.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  Phone, \n  Mail, \n  User,\n  Calendar,\n  GraduationCap,\n  MoreVertical\n} from \"lucide-react\";\nimport {\n  DndContext,\n  DragOverlay,\n  useSensor,\n  useSensors,\n  PointerSensor,\n  KeyboardSensor,\n  closestCorners,\n  rectIntersection,\n  DragStartEvent,\n  DragOverEvent,\n  DragEndEvent,\n  useDroppable,\n} from \"@dnd-kit/core\";\nimport {\n  SortableContext,\n  verticalListSortingStrategy,\n  useSortable,\n} from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Definir las etapas del pipeline\nconst PIPELINE_STAGES = [\n  { id: 'nuevo', label: 'Nuevo', color: 'bg-slate-100 text-slate-800 dark:bg-slate-900 dark:text-slate-100' },\n  { id: 'primer_contacto', label: 'Primer Contacto', color: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100' },\n  { id: 'cita_agendada', label: 'Cita Agendada', color: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-100' },\n  { id: 'documentos', label: 'Documentos', color: 'bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-100' },\n  { id: 'admitido', label: 'Admitido', color: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100' },\n  { id: 'matriculado', label: 'Matriculado', color: 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-100' }\n];\n\ninterface Prospecto {\n  id: string;\n  nombre: string;\n  email: string;\n  telefono: string;\n  nivelEducativo: string;\n  origen: string;\n  estatus: string;\n  prioridad: string;\n  asesorId?: string;\n  fechaRegistro: string;\n  ultimaInteraccion?: string;\n  notas?: string;\n}\n\ninterface ProspectCardProps {\n  prospecto: Prospecto;\n  isDragging?: boolean;\n}\n\nfunction ProspectCard({ prospecto, isDragging = false }: ProspectCardProps) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging: isSortableDragging,\n  } = useSortable({\n    id: prospecto.id,\n  });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging || isSortableDragging ? 0.5 : 1,\n  };\n\n  const getPriorityColor = (prioridad: string) => {\n    switch (prioridad) {\n      case 'alta':\n        return 'border-l-red-500';\n      case 'media':\n        return 'border-l-amber-500';\n      case 'baja':\n        return 'border-l-green-500';\n      default:\n        return 'border-l-gray-300';\n    }\n  };\n\n  const getNivelIcon = (nivel: string) => {\n    return <GraduationCap className=\"h-4 w-4\" />;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('es-MX', {\n      day: '2-digit',\n      month: '2-digit',\n      year: '2-digit'\n    });\n  };\n\n  return (\n    <Card\n      ref={setNodeRef}\n      style={style}\n      className={`cursor-grab active:cursor-grabbing border-l-4 ${getPriorityColor(prospecto.prioridad)} hover-elevate`}\n      {...attributes}\n      {...listeners}\n      data-testid={`prospect-card-${prospecto.id}`}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1 min-w-0\">\n            <CardTitle className=\"text-sm font-medium truncate\" data-testid=\"prospect-name\">\n              {prospecto.nombre}\n            </CardTitle>\n            <div className=\"flex items-center gap-1 mt-1\">\n              {getNivelIcon(prospecto.nivelEducativo)}\n              <span className=\"text-xs text-muted-foreground truncate\" data-testid=\"prospect-nivel\">\n                {prospecto.nivelEducativo}\n              </span>\n            </div>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\n            <MoreVertical className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-2\">\n          {/* Información de contacto */}\n          <div className=\"space-y-1\">\n            <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n              <Mail className=\"h-3 w-3\" />\n              <span className=\"truncate\" data-testid=\"prospect-email\">{prospecto.email}</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n              <Phone className=\"h-3 w-3\" />\n              <span className=\"truncate\" data-testid=\"prospect-telefono\">{prospecto.telefono}</span>\n            </div>\n          </div>\n\n          {/* Metadatos */}\n          <div className=\"flex items-center justify-between\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {prospecto.origen}\n            </Badge>\n            <span className=\"text-xs text-muted-foreground\">\n              {formatDate(prospecto.fechaRegistro)}\n            </span>\n          </div>\n\n          {/* Asesor */}\n          {prospecto.asesorId && (\n            <div className=\"flex items-center gap-2 mt-2\">\n              <Avatar className=\"h-6 w-6\">\n                <AvatarFallback className=\"text-xs\">\n                  {prospecto.asesorId.slice(0, 2).toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n              <span className=\"text-xs text-muted-foreground truncate\">\n                Asesor asignado\n              </span>\n            </div>\n          )}\n\n          {/* Notas */}\n          {prospecto.notas && (\n            <div className=\"text-xs text-muted-foreground line-clamp-2\">\n              {prospecto.notas}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface KanbanColumnProps {\n  stage: typeof PIPELINE_STAGES[0];\n  prospectos: Prospecto[];\n  isOver?: boolean;\n}\n\nfunction KanbanColumn({ stage, prospectos, isOver }: KanbanColumnProps) {\n  const { isOver: isDroppableOver, setNodeRef } = useDroppable({\n    id: stage.id,\n  });\n\n  return (\n    <div \n      ref={setNodeRef}\n      className={`flex flex-col h-full min-w-72 transition-colors duration-200 ${\n        isDroppableOver || isOver ? 'bg-muted/50 ring-2 ring-primary/20' : ''\n      }`}\n    >\n      <div className=\"p-4 border-b\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"font-medium text-sm\" data-testid={`column-title-${stage.id}`}>\n              {stage.label}\n            </h3>\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {prospectos.length}\n            </Badge>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flex-1 p-4 space-y-3 overflow-y-auto\">\n        <SortableContext items={prospectos.map(p => p.id)} strategy={verticalListSortingStrategy}>\n          {prospectos.map((prospecto) => (\n            <ProspectCard key={prospecto.id} prospecto={prospecto} />\n          ))}\n        </SortableContext>\n        \n        {prospectos.length === 0 && (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <User className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n            <p className=\"text-sm\">No hay prospectos</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\ninterface ProspectKanbanProps {\n  className?: string;\n  prospects?: Prospecto[];\n}\n\nexport function ProspectKanban({ className, prospects = [] }: ProspectKanbanProps) {\n  const { toast } = useToast();\n  const [activeProspect, setActiveProspect] = useState<Prospecto | null>(null);\n  const [prospectos, setProspectos] = useState<Prospecto[]>(prospects);\n\n  // Actualizar prospectos cuando cambian las props\n  useEffect(() => {\n    setProspectos(prospects);\n  }, [prospects]);\n\n  // Función para actualizar estatus del prospecto localmente\n  const updateProspectoStatus = (id: string, newStatus: string) => {\n    setProspectos(prevProspectos => \n      prevProspectos.map(p => \n        p.id === id ? { ...p, estatus: newStatus } : p\n      )\n    );\n    toast({\n      title: \"Prospecto actualizado\",\n      description: \"El estatus del prospecto ha sido actualizado exitosamente.\"\n    });\n  };\n\n  // Configurar sensores de drag\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 5,\n      },\n    }),\n    useSensor(KeyboardSensor)\n  );\n\n  // Organizar prospectos por etapa\n  const prospectosPorEtapa = PIPELINE_STAGES.reduce((acc, stage) => {\n    acc[stage.id] = prospectos.filter(p => p.estatus === stage.id);\n    return acc;\n  }, {} as Record<string, Prospecto[]>);\n\n  const handleDragStart = (event: DragStartEvent) => {\n    const prospecto = prospectos.find(p => p.id === event.active.id);\n    setActiveProspect(prospecto || null);\n  };\n\n  const handleDragOver = (event: DragOverEvent) => {\n    // Aquí podríamos agregar lógica adicional si necesitamos\n  };\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    setActiveProspect(null);\n\n    const { active, over } = event;\n    \n    if (!over) return;\n\n    const prospectoId = active.id as string;\n    let newStage = over.id as string;\n\n    // Si over.id es un card ID (no un column ID), necesitamos resolver el container\n    const validStage = PIPELINE_STAGES.find(stage => stage.id === newStage);\n    if (!validStage) {\n      // over.id es probablemente un card ID, buscar el container correcto\n      const droppedOnCard = prospectos.find(p => p.id === newStage);\n      if (droppedOnCard) {\n        // Usar el estatus del card sobre el que se droppeó como el nuevo stage\n        newStage = droppedOnCard.estatus;\n      } else {\n        // Si aún no encontramos un stage válido, salir\n        return;\n      }\n    }\n\n    // Verificar nuevamente que tengamos un stage válido\n    const finalValidStage = PIPELINE_STAGES.find(stage => stage.id === newStage);\n    if (!finalValidStage) return;\n\n    // Encontrar el prospecto que se está moviendo\n    const prospecto = prospectos.find(p => p.id === prospectoId);\n    if (!prospecto || prospecto.estatus === newStage) return;\n\n    // Actualizar estatus\n    updateProspectoStatus(prospectoId, newStage);\n  };\n\n  if (prospectos.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <p className=\"text-muted-foreground\">No hay prospectos para mostrar</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`h-full ${className}`}>\n      <DndContext\n        sensors={sensors}\n        collisionDetection={rectIntersection}\n        onDragStart={handleDragStart}\n        onDragOver={handleDragOver}\n        onDragEnd={handleDragEnd}\n      >\n        <div className=\"flex gap-4 h-full overflow-x-auto pb-4\" data-testid=\"kanban-board\">\n          {PIPELINE_STAGES.map((stage) => (\n            <div\n              key={stage.id}\n              id={stage.id}\n              className=\"flex-shrink-0\"\n              data-testid={`kanban-column-${stage.id}`}\n            >\n              <KanbanColumn\n                stage={stage}\n                prospectos={prospectosPorEtapa[stage.id] || []}\n              />\n            </div>\n          ))}\n        </div>\n\n        <DragOverlay>\n          {activeProspect ? (\n            <ProspectCard prospecto={activeProspect} isDragging />\n          ) : null}\n        </DragOverlay>\n      </DndContext>\n    </div>\n  );\n}","size_bytes":11452},"client/src/pages/formulario-publico-page.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { CheckCircle, AlertCircle, Loader } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useParams } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Esquema de validación para el formulario público\nconst formularioPublicoSchema = z.object({\n  nombre: z.string().min(1, \"El nombre es requerido\"),\n  email: z.string().email(\"Ingresa un email válido\"),\n  telefono: z.string().min(10, \"El teléfono debe tener al menos 10 dígitos\"),\n  datosExtra: z.record(z.string()).optional()\n});\n\ntype FormularioPublicoData = z.infer<typeof formularioPublicoSchema>;\n\ninterface FormularioPublico {\n  id: string;\n  nombre: string;\n  descripcion?: string;\n  nivelEducativo: string;\n  configuracion: {\n    mostrarTelefono?: boolean;\n    mostrarNivelEducativo?: boolean;\n    camposExtra?: string[];\n    mensajeBienvenida?: string;\n    mensajeExito?: string;\n  };\n}\n\nexport default function FormularioPublicoPage() {\n  const { enlace } = useParams<{ enlace: string }>();\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [submitError, setSubmitError] = useState<string | null>(null);\n\n  // Query para obtener la configuración del formulario público\n  const { data: formulario, isLoading, error } = useQuery<FormularioPublico>({\n    queryKey: [`/api/public/form/${enlace}`],\n    staleTime: 300000, // 5 minutos\n    enabled: !!enlace\n  });\n\n  // Mutation para enviar el formulario\n  const submitMutation = useMutation({\n    mutationFn: (data: FormularioPublicoData) => \n      apiRequest(\"POST\", `/api/public/form/${enlace}/submit`, data),\n    onSuccess: () => {\n      setIsSubmitted(true);\n      setSubmitError(null);\n    },\n    onError: (error: any) => {\n      setSubmitError(error.message || \"Error al enviar el formulario\");\n    }\n  });\n\n  // Configuración del formulario\n  const form = useForm<FormularioPublicoData>({\n    resolver: zodResolver(formularioPublicoSchema),\n    defaultValues: {\n      nombre: \"\",\n      email: \"\",\n      telefono: \"\",\n      datosExtra: {}\n    }\n  });\n\n  const handleSubmit = (data: FormularioPublicoData) => {\n    setSubmitError(null);\n    submitMutation.mutate(data);\n  };\n\n  // Estados de carga y error\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <Loader className=\"h-8 w-8 animate-spin mx-auto mb-4 text-primary\" />\n            <p className=\"text-muted-foreground\">Cargando formulario...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error || !formulario) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <AlertCircle className=\"h-12 w-12 mx-auto mb-4 text-destructive\" />\n            <h2 className=\"text-xl font-semibold mb-2 text-foreground\">Formulario no encontrado</h2>\n            <p className=\"text-muted-foreground\">\n              El formulario que buscas no existe o ya no está disponible.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Vista de éxito después del envío\n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <CheckCircle className=\"h-16 w-16 mx-auto mb-4 text-green-500\" />\n            <h2 className=\"text-xl font-semibold mb-4 text-foreground\">¡Formulario enviado!</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              {formulario.configuracion.mensajeExito || \n               \"¡Gracias! Hemos recibido tu información. Nos contactaremos contigo pronto.\"}\n            </p>\n            <Button \n              onClick={() => window.location.reload()} \n              variant=\"outline\"\n              data-testid=\"button-enviar-otro\"\n            >\n              Enviar otro formulario\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background py-8 px-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        <Card>\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl text-foreground\" data-testid=\"titulo-formulario\">\n              {formulario.nombre}\n            </CardTitle>\n            {formulario.descripcion && (\n              <p className=\"text-muted-foreground mt-2\" data-testid=\"descripcion-formulario\">\n                {formulario.descripcion}\n              </p>\n            )}\n            <div className=\"mt-4 p-4 bg-primary/10 rounded-lg\">\n              <p className=\"text-sm text-foreground\">\n                {formulario.configuracion.mensajeBienvenida || \n                 \"¡Bienvenido! Completa este formulario para comenzar tu proceso de admisión.\"}\n              </p>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n                {/* Campo Nombre */}\n                <FormField\n                  control={form.control}\n                  name=\"nombre\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nombre Completo *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Ingresa tu nombre completo\"\n                          {...field}\n                          data-testid=\"input-nombre\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Campo Email */}\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Correo Electrónico *</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\"\n                          placeholder=\"correo@ejemplo.com\"\n                          {...field}\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Campo Teléfono - condicional */}\n                {formulario.configuracion.mostrarTelefono !== false && (\n                  <FormField\n                    control={form.control}\n                    name=\"telefono\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Teléfono *</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"tel\"\n                            placeholder=\"+52 55 1234-5678\"\n                            {...field}\n                            data-testid=\"input-telefono\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n\n                {/* Información del nivel educativo - condicional */}\n                {formulario.configuracion.mostrarNivelEducativo !== false && (\n                  <div className=\"p-4 bg-muted rounded-lg\">\n                    <Label className=\"text-sm font-medium\">Nivel Educativo de Interés</Label>\n                    <p className=\"text-sm text-muted-foreground mt-1\" data-testid=\"nivel-educativo\">\n                      {formulario.nivelEducativo.charAt(0).toUpperCase() + formulario.nivelEducativo.slice(1)}\n                    </p>\n                  </div>\n                )}\n\n                {/* Campos extra dinámicos */}\n                {formulario.configuracion.camposExtra && formulario.configuracion.camposExtra.length > 0 && (\n                  <div className=\"space-y-4\">\n                    <Label className=\"text-base font-medium\">Información Adicional</Label>\n                    {formulario.configuracion.camposExtra.map((campo, index) => (\n                      <div key={index}>\n                        <Label htmlFor={`campo-extra-${index}`} className=\"text-sm\">\n                          {campo}\n                        </Label>\n                        <Textarea\n                          id={`campo-extra-${index}`}\n                          placeholder={`Ingresa tu ${campo.toLowerCase()}`}\n                          className=\"mt-1 resize-none\"\n                          rows={3}\n                          onChange={(e) => {\n                            const datosExtra = { ...form.getValues().datosExtra };\n                            datosExtra[campo] = e.target.value;\n                            form.setValue('datosExtra', datosExtra);\n                          }}\n                          data-testid={`textarea-${campo.toLowerCase().replace(/\\\\s+/g, '-')}`}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {/* Error de envío */}\n                {submitError && (\n                  <div className=\"p-4 bg-destructive/10 border border-destructive/20 rounded-lg\">\n                    <div className=\"flex items-center gap-2\">\n                      <AlertCircle className=\"h-4 w-4 text-destructive\" />\n                      <p className=\"text-sm text-destructive\" data-testid=\"error-envio\">\n                        {submitError}\n                      </p>\n                    </div>\n                  </div>\n                )}\n\n                {/* Botón de envío */}\n                <div className=\"pt-4\">\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\"\n                    disabled={submitMutation.isPending}\n                    data-testid=\"button-enviar-formulario\"\n                  >\n                    {submitMutation.isPending ? (\n                      <>\n                        <Loader className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Enviando...\n                      </>\n                    ) : (\n                      \"Enviar Formulario\"\n                    )}\n                  </Button>\n                </div>\n\n                {/* Nota de privacidad */}\n                <div className=\"text-xs text-muted-foreground text-center pt-2\">\n                  Al enviar este formulario, aceptas que utilicemos tu información para contactarte \n                  sobre nuestros programas educativos.\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11531},"client/src/components/proceso-admision-manager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { FileText, Upload, CreditCard, GraduationCap, CheckCircle, AlertCircle, Clock, Users, Circle } from \"lucide-react\";\nimport type { Prospecto, DocumentoAdmision, Pago, Estudiante } from \"@shared/schema\";\nimport { updateDatosAcademicosSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Estados del proceso de admisión\nconst ESTADOS_ADMISION = {\n  documentos: { label: \"Documentos\", icon: FileText, color: \"orange\" },\n  admitido: { label: \"Admitido\", icon: CheckCircle, color: \"green\" },\n  matriculado: { label: \"Matriculado\", icon: GraduationCap, color: \"blue\" }\n};\n\ninterface ProcesoAdmisionManagerProps {\n  prospecto: Prospecto;\n}\n\nexport function ProcesoAdmisionManager({ prospecto }: ProcesoAdmisionManagerProps) {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"resumen\");\n  const [uploadingDocument, setUploadingDocument] = useState(false);\n\n  // Queries para datos de admisión\n  const { data: documentos = [], isLoading: loadingDocumentos } = useQuery<DocumentoAdmision[]>({\n    queryKey: ['/api/prospectos', prospecto.id, 'documentos'],\n    enabled: !!prospecto.id\n  });\n\n  const { data: pagos = [], isLoading: loadingPagos } = useQuery<Pago[]>({\n    queryKey: ['/api/prospectos', prospecto.id, 'pagos'],\n    enabled: !!prospecto.id\n  });\n\n  // Query para obtener datos del estudiante (si existe)\n  const { data: estudiante, isLoading: loadingEstudiante, refetch: refetchEstudiante } = useQuery<Estudiante>({\n    queryKey: ['/api/estudiantes', 'por-prospecto', prospecto.id],\n    enabled: !!prospecto.id && prospecto.estatus === 'matriculado'\n  });\n\n  // Form para datos académicos\n  type FormData = z.infer<typeof updateDatosAcademicosSchema>;\n  const form = useForm<FormData>({\n    resolver: zodResolver(updateDatosAcademicosSchema),\n    defaultValues: {\n      programa: estudiante?.programa || \"\",\n      modalidad: estudiante?.modalidad || \"presencial\",\n      turno: estudiante?.turno || \"matutino\", \n      fechaInicio: estudiante?.fechaInicio ? new Date(estudiante.fechaInicio) : new Date(),\n    },\n  });\n\n  // Reset form when estudiante data changes\n  if (estudiante && !form.formState.isDirty) {\n    form.reset({\n      programa: estudiante.programa || \"\",\n      modalidad: estudiante.modalidad || \"presencial\",\n      turno: estudiante.turno || \"matutino\",\n      fechaInicio: estudiante.fechaInicio ? new Date(estudiante.fechaInicio) : new Date(),\n    });\n  }\n\n  // Mutations\n  const iniciarAdmisionMutation = useMutation({\n    mutationFn: () => \n      apiRequest('POST', `/api/prospectos/${prospecto.id}/iniciar-admision`),\n    onSuccess: () => {\n      toast({\n        title: \"Proceso iniciado\",\n        description: \"El proceso de admisión ha sido iniciado exitosamente.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/prospectos'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Error al iniciar el proceso de admisión.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const subirDocumentoMutation = useMutation({\n    mutationFn: (data: any) => \n      apiRequest('POST', '/api/documentos-admision', data),\n    onSuccess: () => {\n      toast({\n        title: \"Documento subido\",\n        description: \"El documento ha sido subido exitosamente.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/prospectos', prospecto.id, 'documentos'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Error al subir el documento.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const crearPagoMutation = useMutation({\n    mutationFn: (data: any) => \n      apiRequest('POST', '/api/pagos', data),\n    onSuccess: () => {\n      toast({\n        title: \"Pago registrado\",\n        description: \"El pago ha sido registrado exitosamente.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/prospectos', prospecto.id, 'pagos'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\", \n        description: \"Error al registrar el pago.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const completarMatriculaMutation = useMutation({\n    mutationFn: (pagoId: string) => \n      apiRequest('POST', `/api/prospectos/${prospecto.id}/completar-matricula`, { pagoId }),\n    onSuccess: () => {\n      toast({\n        title: \"Matrícula completada\",\n        description: \"El estudiante ha sido matriculado exitosamente.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/prospectos'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/estudiantes', 'por-prospecto', prospecto.id] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Error al completar la matrícula.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Mutation para actualizar datos académicos\n  const updateDatosAcademicosMutation = useMutation({\n    mutationFn: (data: FormData) => {\n      if (!estudiante?.id) {\n        throw new Error(\"No se pudo encontrar el ID del estudiante\");\n      }\n      return apiRequest('PATCH', `/api/estudiantes/${estudiante.id}/datos-academicos`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Datos actualizados\",\n        description: \"Los datos académicos han sido actualizados exitosamente.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/estudiantes', 'por-prospecto', prospecto.id] });\n      queryClient.invalidateQueries({ queryKey: ['/api/estudiantes'] });\n      refetchEstudiante();\n    },\n    onError: (error: any) => {\n      console.error(\"Error updating academic data:\", error);\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.error || \"Error al actualizar los datos académicos.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Handlers\n  const handleIniciarAdmision = () => {\n    iniciarAdmisionMutation.mutate();\n  };\n\n  // Submit handler para datos académicos\n  const onSubmitDatosAcademicos = (data: FormData) => {\n    updateDatosAcademicosMutation.mutate(data);\n  };\n\n  const handleSubirDocumento = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setUploadingDocument(true);\n    \n    const formData = new FormData(e.currentTarget);\n    const tipoDocumento = formData.get('tipoDocumento') as string;\n    const comentarios = formData.get('comentarios') as string;\n    const archivo = formData.get('archivo') as File;\n    \n    if (!archivo || !tipoDocumento) {\n      toast({\n        title: \"Error\",\n        description: \"Por favor selecciona un archivo y tipo de documento.\",\n        variant: \"destructive\",\n      });\n      setUploadingDocument(false);\n      return;\n    }\n\n    // Simular subida de archivo (en producción usarías storage real)\n    const rutaArchivo = `/uploads/documentos/${prospecto.id}/${archivo.name}`;\n    \n    subirDocumentoMutation.mutate({\n      prospectoId: prospecto.id,\n      tipoDocumento,\n      nombreArchivo: archivo.name,\n      rutaArchivo,\n      tamano: archivo.size,\n      comentarios: comentarios || undefined\n    });\n    \n    setUploadingDocument(false);\n    (e.target as HTMLFormElement).reset();\n  };\n\n  const handleCrearPago = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    \n    const formData = new FormData(e.currentTarget);\n    const concepto = formData.get('concepto') as string;\n    const monto = formData.get('monto') as string;\n    const metodoPago = formData.get('metodoPago') as string;\n    \n    crearPagoMutation.mutate({\n      prospectoId: prospecto.id,\n      concepto,\n      monto,\n      metodoPago,\n      estado: 'pendiente'\n    });\n    \n    (e.target as HTMLFormElement).reset();\n  };\n\n  const handleCompletarMatricula = (pagoId: string) => {\n    completarMatriculaMutation.mutate(pagoId);\n  };\n\n  // Calcular progreso del proceso\n  const calcularProgreso = () => {\n    let progreso = 0;\n    const documentosAprobados = documentos.filter((d: DocumentoAdmision) => d.estado === 'aprobado').length;\n    const pagosCompletados = pagos.filter((p: Pago) => p.estado === 'completado').length;\n    \n    if (prospecto.estatus === 'documentos') progreso = 25;\n    if (documentosAprobados > 0) progreso = 50;\n    if (prospecto.estatus === 'admitido') progreso = 75;\n    if (prospecto.estatus === 'matriculado' || pagosCompletados > 0) progreso = 100;\n    \n    return progreso;\n  };\n\n  const progreso = calcularProgreso();\n  const estadoActual = ESTADOS_ADMISION[prospecto.estatus as keyof typeof ESTADOS_ADMISION];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header con estado y progreso */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\" data-testid=\"title-proceso-admision\">\n                <GraduationCap className=\"h-5 w-5\" />\n                Proceso de Admisión Digital\n              </CardTitle>\n              <CardDescription>\n                Gestión completa del proceso de admisión para {prospecto.nombre}\n              </CardDescription>\n            </div>\n            {estadoActual && (\n              <Badge variant=\"secondary\" className=\"flex items-center gap-1\" data-testid={`badge-estado-${prospecto.estatus}`}>\n                <estadoActual.icon className=\"h-3 w-3\" />\n                {estadoActual.label}\n              </Badge>\n            )}\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Progreso del proceso</span>\n              <span>{progreso}%</span>\n            </div>\n            <Progress value={progreso} className=\"h-2\" data-testid=\"progress-admision\" />\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Botón para iniciar proceso si está en documentos pero no iniciado */}\n      {prospecto.estatus === 'cita_agendada' && (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"text-muted-foreground\">\n                El prospecto está listo para iniciar el proceso de admisión digital\n              </div>\n              <Button \n                onClick={handleIniciarAdmision}\n                disabled={iniciarAdmisionMutation.isPending}\n                size=\"lg\"\n                data-testid=\"button-iniciar-admision\"\n              >\n                {iniciarAdmisionMutation.isPending ? (\n                  <>\n                    <Clock className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Iniciando proceso...\n                  </>\n                ) : (\n                  <>\n                    <FileText className=\"mr-2 h-4 w-4\" />\n                    Iniciar Proceso de Admisión\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Tabs para diferentes secciones */}\n      {['documentos', 'admitido', 'matriculado'].includes(prospecto.estatus) && (\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"resumen\" data-testid=\"tab-resumen\">Resumen</TabsTrigger>\n            <TabsTrigger value=\"documentos\" data-testid=\"tab-documentos\">Documentos</TabsTrigger>\n            <TabsTrigger value=\"pagos\" data-testid=\"tab-pagos\">Pagos</TabsTrigger>\n            <TabsTrigger value=\"estudiante\" data-testid=\"tab-estudiante\">Estudiante</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"resumen\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Resumen del Proceso</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"count-documentos\">\n                      {documentos.length}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Documentos</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\" data-testid=\"count-documentos-aprobados\">\n                      {documentos.filter((d: DocumentoAdmision) => d.estado === 'aprobado').length}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Aprobados</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"count-pagos\">\n                      {pagos.length}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Pagos</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"count-pagos-completados\">\n                      {pagos.filter((p: Pago) => p.estado === 'completado').length}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Completados</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"documentos\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Documentos de Admisión</CardTitle>\n                <CardDescription>\n                  Gestión de documentos requeridos para el proceso de admisión\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Formulario para subir documentos */}\n                <form onSubmit={handleSubirDocumento} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"tipoDocumento\">Tipo de Documento</Label>\n                      <select \n                        name=\"tipoDocumento\" \n                        className=\"w-full p-2 border rounded-md\"\n                        required\n                        data-testid=\"select-tipo-documento\"\n                      >\n                        <option value=\"\">Seleccionar tipo</option>\n                        <option value=\"identificacion\">Identificación</option>\n                        <option value=\"certificados\">Certificados</option>\n                        <option value=\"fotografias\">Fotografías</option>\n                        <option value=\"comprobante_domicilio\">Comprobante de Domicilio</option>\n                        <option value=\"otros\">Otros</option>\n                      </select>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"archivo\">Archivo</Label>\n                      <Input \n                        type=\"file\" \n                        name=\"archivo\" \n                        accept=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\n                        required\n                        data-testid=\"input-archivo\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"comentarios\">Comentarios (opcional)</Label>\n                    <Textarea \n                      name=\"comentarios\" \n                      placeholder=\"Comentarios adicionales sobre el documento...\"\n                      data-testid=\"textarea-comentarios\"\n                    />\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    disabled={uploadingDocument || subirDocumentoMutation.isPending}\n                    data-testid=\"button-subir-documento\"\n                  >\n                    {uploadingDocument || subirDocumentoMutation.isPending ? (\n                      <>\n                        <Clock className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Subiendo...\n                      </>\n                    ) : (\n                      <>\n                        <Upload className=\"mr-2 h-4 w-4\" />\n                        Subir Documento\n                      </>\n                    )}\n                  </Button>\n                </form>\n\n                {/* Lista de documentos */}\n                <div className=\"space-y-3\">\n                  {loadingDocumentos ? (\n                    <div className=\"text-center py-4 text-muted-foreground\">\n                      Cargando documentos...\n                    </div>\n                  ) : documentos.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <FileText className=\"mx-auto h-8 w-8 mb-2 opacity-50\" />\n                      No hay documentos subidos\n                    </div>\n                  ) : (\n                    documentos.map((documento: DocumentoAdmision) => (\n                      <div \n                        key={documento.id} \n                        className=\"flex items-center justify-between p-3 border rounded-lg\"\n                        data-testid={`documento-${documento.id}`}\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                          <div>\n                            <div className=\"font-medium\">{documento.nombreArchivo}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {documento.tipoDocumento} • {documento.fechaCarga ? new Date(documento.fechaCarga).toLocaleDateString() : 'Sin fecha'}\n                            </div>\n                          </div>\n                        </div>\n                        <Badge \n                          variant={\n                            documento.estado === 'aprobado' ? 'default' :\n                            documento.estado === 'rechazado' ? 'destructive' : 'secondary'\n                          }\n                          data-testid={`badge-estado-documento-${documento.estado}`}\n                        >\n                          {documento.estado === 'pendiente' && <Clock className=\"mr-1 h-3 w-3\" />}\n                          {documento.estado === 'aprobado' && <CheckCircle className=\"mr-1 h-3 w-3\" />}\n                          {documento.estado === 'rechazado' && <AlertCircle className=\"mr-1 h-3 w-3\" />}\n                          {documento.estado.charAt(0).toUpperCase() + documento.estado.slice(1)}\n                        </Badge>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"pagos\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Gestión de Pagos</CardTitle>\n                <CardDescription>\n                  Administración de pagos y transacciones del proceso de admisión\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Formulario para registrar pago */}\n                <form onSubmit={handleCrearPago} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"concepto\">Concepto</Label>\n                      <select \n                        name=\"concepto\" \n                        className=\"w-full p-2 border rounded-md\"\n                        required\n                        data-testid=\"select-concepto-pago\"\n                      >\n                        <option value=\"\">Seleccionar concepto</option>\n                        <option value=\"cuota_admision\">Cuota de Admisión</option>\n                        <option value=\"matricula\">Matrícula</option>\n                        <option value=\"mensualidad\">Mensualidad</option>\n                        <option value=\"otros\">Otros</option>\n                      </select>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"monto\">Monto (MXN)</Label>\n                      <Input \n                        name=\"monto\" \n                        type=\"number\" \n                        step=\"0.01\" \n                        placeholder=\"0.00\"\n                        required\n                        data-testid=\"input-monto-pago\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"metodoPago\">Método de Pago</Label>\n                      <select \n                        name=\"metodoPago\" \n                        className=\"w-full p-2 border rounded-md\"\n                        required\n                        data-testid=\"select-metodo-pago\"\n                      >\n                        <option value=\"\">Seleccionar método</option>\n                        <option value=\"stripe\">Stripe (Tarjeta)</option>\n                        <option value=\"paypal\">PayPal</option>\n                        <option value=\"transferencia\">Transferencia</option>\n                        <option value=\"efectivo\">Efectivo</option>\n                      </select>\n                    </div>\n                  </div>\n                  <Button \n                    type=\"submit\"\n                    disabled={crearPagoMutation.isPending}\n                    data-testid=\"button-crear-pago\"\n                  >\n                    {crearPagoMutation.isPending ? (\n                      <>\n                        <Clock className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Registrando...\n                      </>\n                    ) : (\n                      <>\n                        <CreditCard className=\"mr-2 h-4 w-4\" />\n                        Registrar Pago\n                      </>\n                    )}\n                  </Button>\n                </form>\n\n                {/* Lista de pagos */}\n                <div className=\"space-y-3\">\n                  {loadingPagos ? (\n                    <div className=\"text-center py-4 text-muted-foreground\">\n                      Cargando pagos...\n                    </div>\n                  ) : pagos.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <CreditCard className=\"mx-auto h-8 w-8 mb-2 opacity-50\" />\n                      No hay pagos registrados\n                    </div>\n                  ) : (\n                    pagos.map((pago: Pago) => (\n                      <div \n                        key={pago.id} \n                        className=\"flex items-center justify-between p-3 border rounded-lg\"\n                        data-testid={`pago-${pago.id}`}\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n                          <div>\n                            <div className=\"font-medium\">\n                              {pago.concepto.replace('_', ' ').charAt(0).toUpperCase() + pago.concepto.slice(1)}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              ${pago.monto} {pago.moneda} • {pago.metodoPago} • {pago.fechaPago ? new Date(pago.fechaPago).toLocaleDateString() : 'Sin fecha'}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge \n                            variant={\n                              pago.estado === 'completado' ? 'default' :\n                              pago.estado === 'fallido' ? 'destructive' : 'secondary'\n                            }\n                            data-testid={`badge-estado-pago-${pago.estado}`}\n                          >\n                            {pago.estado === 'pendiente' && <Clock className=\"mr-1 h-3 w-3\" />}\n                            {pago.estado === 'completado' && <CheckCircle className=\"mr-1 h-3 w-3\" />}\n                            {pago.estado.charAt(0).toUpperCase() + pago.estado.slice(1)}\n                          </Badge>\n                          {pago.estado === 'completado' && prospecto.estatus === 'admitido' && (\n                            <Button \n                              size=\"sm\" \n                              onClick={() => handleCompletarMatricula(pago.id)}\n                              disabled={completarMatriculaMutation.isPending}\n                              data-testid={`button-completar-matricula-${pago.id}`}\n                            >\n                              {completarMatriculaMutation.isPending ? (\n                                <Clock className=\"h-3 w-3 animate-spin\" />\n                              ) : (\n                                <>\n                                  <Users className=\"mr-1 h-3 w-3\" />\n                                  Matricular\n                                </>\n                              )}\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"estudiante\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Información del Estudiante</CardTitle>\n                <CardDescription>\n                  Datos académicos y estado de matrícula\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {prospecto.estatus === 'matriculado' ? (\n                  <div className=\"space-y-6\">\n                    {/* Estado de matriculación */}\n                    <div className=\"text-center py-6 border rounded-lg bg-green-50 dark:bg-green-900/10\">\n                      <CheckCircle className=\"mx-auto h-10 w-10 text-green-600 mb-3\" />\n                      <h3 className=\"text-lg font-semibold text-green-600 mb-1\">\n                        ¡Estudiante Matriculado!\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Proceso de admisión completado exitosamente\n                      </p>\n                    </div>\n\n                    {/* Formulario funcional para completar datos académicos */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"text-base\">Datos Académicos</CardTitle>\n                        <CardDescription>\n                          Complete la información académica del estudiante\n                        </CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        {loadingEstudiante ? (\n                          <div className=\"flex items-center justify-center py-8\">\n                            <Clock className=\"h-6 w-6 animate-spin mr-2\" />\n                            <span>Cargando datos del estudiante...</span>\n                          </div>\n                        ) : (\n                          <Form {...form}>\n                            <form onSubmit={form.handleSubmit(onSubmitDatosAcademicos)} className=\"space-y-6\">\n                              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                <FormField\n                                  control={form.control}\n                                  name=\"programa\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Programa Académico</FormLabel>\n                                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                        <FormControl>\n                                          <SelectTrigger data-testid=\"select-programa\">\n                                            <SelectValue placeholder=\"Seleccionar programa\" />\n                                          </SelectTrigger>\n                                        </FormControl>\n                                        <SelectContent>\n                                          <SelectItem value=\"ingenieria_sistemas\">Ingeniería en Sistemas</SelectItem>\n                                          <SelectItem value=\"administracion\">Administración de Empresas</SelectItem>\n                                          <SelectItem value=\"medicina\">Medicina</SelectItem>\n                                          <SelectItem value=\"derecho\">Derecho</SelectItem>\n                                          <SelectItem value=\"psicologia\">Psicología</SelectItem>\n                                          <SelectItem value=\"contaduria\">Contaduría Pública</SelectItem>\n                                          <SelectItem value=\"ingenieria_industrial\">Ingeniería Industrial</SelectItem>\n                                          <SelectItem value=\"marketing\">Marketing</SelectItem>\n                                          <SelectItem value=\"enfermeria\">Enfermería</SelectItem>\n                                        </SelectContent>\n                                      </Select>\n                                      <FormMessage data-testid=\"error-programa\" />\n                                    </FormItem>\n                                  )}\n                                />\n                                \n                                <FormField\n                                  control={form.control}\n                                  name=\"modalidad\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Modalidad de Estudio</FormLabel>\n                                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                        <FormControl>\n                                          <SelectTrigger data-testid=\"select-modalidad\">\n                                            <SelectValue placeholder=\"Seleccionar modalidad\" />\n                                          </SelectTrigger>\n                                        </FormControl>\n                                        <SelectContent>\n                                          <SelectItem value=\"presencial\">Presencial</SelectItem>\n                                          <SelectItem value=\"virtual\">Virtual</SelectItem>\n                                          <SelectItem value=\"hibrida\">Híbrida</SelectItem>\n                                        </SelectContent>\n                                      </Select>\n                                      <FormMessage data-testid=\"error-modalidad\" />\n                                    </FormItem>\n                                  )}\n                                />\n                                \n                                <FormField\n                                  control={form.control}\n                                  name=\"fechaInicio\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Fecha de Inicio Prevista</FormLabel>\n                                      <FormControl>\n                                        <Input \n                                          type=\"date\" \n                                          data-testid=\"input-fecha-inicio\"\n                                          value={field.value ? field.value.toISOString().split('T')[0] : ''}\n                                          onChange={(e) => field.onChange(e.target.value ? new Date(e.target.value) : new Date())}\n                                        />\n                                      </FormControl>\n                                      <FormMessage data-testid=\"error-fecha-inicio\" />\n                                    </FormItem>\n                                  )}\n                                />\n                                \n                                <FormField\n                                  control={form.control}\n                                  name=\"turno\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Turno</FormLabel>\n                                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                        <FormControl>\n                                          <SelectTrigger data-testid=\"select-turno\">\n                                            <SelectValue placeholder=\"Seleccionar turno\" />\n                                          </SelectTrigger>\n                                        </FormControl>\n                                        <SelectContent>\n                                          <SelectItem value=\"matutino\">Matutino</SelectItem>\n                                          <SelectItem value=\"vespertino\">Vespertino</SelectItem>\n                                          <SelectItem value=\"nocturno\">Nocturno</SelectItem>\n                                          <SelectItem value=\"mixto\">Mixto</SelectItem>\n                                        </SelectContent>\n                                      </Select>\n                                      <FormMessage data-testid=\"error-turno\" />\n                                    </FormItem>\n                                  )}\n                                />\n                              </div>\n                              \n                              <div className=\"flex justify-end\">\n                                <Button \n                                  type=\"submit\" \n                                  disabled={updateDatosAcademicosMutation.isPending}\n                                  data-testid=\"button-actualizar-datos-academicos\"\n                                >\n                                  {updateDatosAcademicosMutation.isPending ? (\n                                    <>\n                                      <Clock className=\"mr-2 h-4 w-4 animate-spin\" />\n                                      Actualizando...\n                                    </>\n                                  ) : (\n                                    <>\n                                      <FileText className=\"mr-2 h-4 w-4\" />\n                                      Actualizar Datos Académicos\n                                    </>\n                                  )}\n                                </Button>\n                              </div>\n                            </form>\n                          </Form>\n                        )}\n                      </CardContent>\n                    </Card>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <div className=\"mb-4\">\n                      <Users className=\"mx-auto h-12 w-12 mb-3 text-muted-foreground/50\" />\n                      <h4 className=\"font-semibold mb-2\">Proceso de Matriculación</h4>\n                      <p className=\"text-sm text-muted-foreground mb-4\">\n                        Para matricular al estudiante, complete estos pasos:\n                      </p>\n                    </div>\n                    \n                    {/* Lista de prerrequisitos */}\n                    <div className=\"max-w-md mx-auto space-y-2\">\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        {documentos.length > 0 ? \n                          <CheckCircle className=\"h-4 w-4 text-green-600\" /> : \n                          <Circle className=\"h-4 w-4 text-muted-foreground\" />\n                        }\n                        <span>Documentos cargados</span>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2 text-sm\">\n                        {pagos.some(p => p.estado === 'completado') ? \n                          <CheckCircle className=\"h-4 w-4 text-green-600\" /> : \n                          <Circle className=\"h-4 w-4 text-muted-foreground\" />\n                        }\n                        <span>Pago completado</span>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2 text-sm\">\n                        {prospecto.estatus === 'admitido' ? \n                          <CheckCircle className=\"h-4 w-4 text-green-600\" /> : \n                          <Circle className=\"h-4 w-4 text-muted-foreground\" />\n                        }\n                        <span>Prospecto admitido</span>\n                      </div>\n                    </div>\n                    \n                    {prospecto.estatus !== 'admitido' && (\n                      <div className=\"mt-4 p-3 bg-amber-50 dark:bg-amber-900/10 rounded-lg\">\n                        <p className=\"text-sm text-amber-700 dark:text-amber-300\">\n                          Complete los pasos del proceso de admisión para poder matricular al estudiante.\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      )}\n    </div>\n  );\n}","size_bytes":38772},"client/src/pages/proceso-admision-page.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, AlertCircle } from \"lucide-react\";\nimport { ProcesoAdmisionManager } from \"@/components/proceso-admision-manager\";\nimport type { Prospecto } from \"@shared/schema\";\n\nexport default function ProcesoAdmisionPage() {\n  const { prospectoId } = useParams();\n  const [, setLocation] = useLocation();\n\n  const { data: prospecto, isLoading, error } = useQuery<Prospecto>({\n    queryKey: ['/api/prospectos', prospectoId],\n    enabled: !!prospectoId\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center py-8\">\n          <div className=\"text-muted-foreground\">Cargando información del prospecto...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !prospecto) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-8 space-y-4\">\n              <AlertCircle className=\"mx-auto h-12 w-12 text-destructive\" />\n              <div>\n                <h3 className=\"text-lg font-semibold text-destructive mb-2\">\n                  Prospecto no encontrado\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  No se pudo cargar la información del prospecto.\n                </p>\n              </div>\n              <Button \n                variant=\"outline\" \n                onClick={() => setLocation('/prospectos')}\n                data-testid=\"button-volver-prospectos\"\n              >\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Volver a Prospectos\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Verificar si el prospecto está en una etapa válida para admisión\n  const etapasValidasParaAdmision = ['cita_agendada', 'documentos', 'admitido', 'matriculado'];\n  if (!etapasValidasParaAdmision.includes(prospecto.estatus)) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Proceso de Admisión - {prospecto.nombre}</span>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setLocation('/prospectos')}\n                data-testid=\"button-volver-prospectos-header\"\n              >\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Volver\n              </Button>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-8 space-y-4\">\n              <AlertCircle className=\"mx-auto h-12 w-12 text-orange-500\" />\n              <div>\n                <h3 className=\"text-lg font-semibold text-orange-600 mb-2\">\n                  Proceso de admisión no disponible\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  El prospecto debe estar en etapa de \"Cita Agendada\" o posterior para acceder al proceso de admisión.\n                </p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Estado actual: <span className=\"font-medium\">{prospecto.estatus}</span>\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header de navegación */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\" data-testid=\"title-proceso-admision-page\">\n            Proceso de Admisión Digital\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {prospecto.nombre} • {prospecto.email} • {prospecto.telefono}\n          </p>\n        </div>\n        <Button \n          variant=\"outline\"\n          onClick={() => setLocation('/prospectos')}\n          data-testid=\"button-volver-prospectos-main\"\n        >\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Volver a Prospectos\n        </Button>\n      </div>\n\n      {/* Componente principal del proceso */}\n      <ProcesoAdmisionManager prospecto={prospecto} />\n    </div>\n  );\n}","size_bytes":4454},"replit.md":{"content":"# CRM Educativo - Sistema de Gestión para Instituciones\n\n## Overview\n\nThis is a comprehensive CRM system specifically designed for educational institutions (K-12 to universities). The system manages the complete student prospect lifecycle from initial contact through enrollment, with role-based dashboards for Directors, Managers, and Educational Advisors. The platform includes advanced features like communication management, campaign analytics, public enrollment forms, and automated admissions processes.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite for development and build tooling\n- **UI Library**: Radix UI primitives with shadcn/ui components for consistent design system\n- **Styling**: Tailwind CSS with custom design tokens for educational branding\n- **State Management**: TanStack Query for server state, React hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Authentication**: Passport.js with local strategy and session-based auth\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **API Design**: RESTful endpoints with role-based access control\n- **File Structure**: Shared schema between frontend and backend for type consistency\n\n### Database Design\n- **Primary Tables**: Users (directors/managers/advisors), Prospects, Communications, Campaigns, Admissions Documents, Payments, Public Forms\n- **Key Relationships**: Prospects linked to advisors, communication history tracking, campaign attribution\n- **Data Flow**: Prospect lifecycle from registration → contact → appointment → documents → admission → enrollment\n\n### Role-Based Dashboard System\n- **Director Dashboard**: Executive metrics, enrollment trends, advisor performance comparisons, campaign ROI analysis\n- **Manager Dashboard**: Team oversight, advisor rankings, conversion tracking, operational metrics\n- **Advisor Dashboard**: Personal prospect pipeline, communication tools, appointment management, individual performance\n\n### Communication Integration\n- **Multi-Channel Support**: Phone calls, WhatsApp, email, in-person meetings\n- **Activity Tracking**: Duration, outcomes, follow-up scheduling\n- **Automation Ready**: Foundation for automated reminders and status updates\n\n### Public Forms System\n- **Dynamic Form Builder**: Customizable fields per education level (primary/secondary/prep/university)\n- **Public URLs**: Shareable links for marketing campaigns with tracking\n- **Lead Capture**: Automatic prospect creation from form submissions\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon PostgreSQL (serverless Postgres)\n- **Authentication**: Express sessions with Passport.js local strategy\n- **Email Service**: SendGrid for transactional emails\n- **File Storage**: Planned integration for document uploads\n\n### Payment Processing\n- **Stripe**: Complete integration for enrollment payments and billing\n- **PayPal**: Secondary payment option with server SDK integration\n\n### Development Tools\n- **Build System**: Vite with TypeScript support and hot module replacement\n- **Database Management**: Drizzle Kit for migrations and schema management\n- **Code Quality**: ESLint and TypeScript for type safety\n- **Deployment**: Replit-optimized with development banners and error overlays\n\n### UI/UX Libraries\n- **Component Library**: Radix UI primitives for accessibility\n- **Icons**: Lucide React icon set\n- **Drag & Drop**: dnd-kit for Kanban-style prospect management\n- **Charts**: Recharts for analytics visualization\n- **Animations**: CSS transitions with Tailwind utilities\n\n### Planned Integrations\n- **SMS/WhatsApp**: Planned for automated communications\n- **Calendar Systems**: For appointment scheduling integration\n- **Export Tools**: CSV/Excel/PDF generation for reports\n- **Analytics**: Enhanced tracking and reporting capabilities","size_bytes":4102},"client/src/components/estudiantes-manager.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  Search, \n  Filter, \n  Users, \n  GraduationCap, \n  Calendar, \n  Mail, \n  Phone,\n  MapPin,\n  BookOpen,\n  Clock,\n  Monitor\n} from 'lucide-react';\nimport type { Estudiante } from '@shared/schema';\n\nexport default function EstudiantesManager() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState<string>('todos');\n  const [modalityFilter, setModalityFilter] = useState<string>('todas');\n\n  // Query para obtener estudiantes\n  const { data: estudiantes = [], isLoading, error } = useQuery<Estudiante[]>({\n    queryKey: ['/api/estudiantes'],\n  });\n\n  // Filtrar estudiantes según criterios\n  const filteredEstudiantes = useMemo(() => {\n    return estudiantes.filter(estudiante => {\n      const matchesSearch = \n        estudiante.matricula.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        estudiante.programa.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        estudiante.nivelEducativo.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesStatus = statusFilter === 'todos' || estudiante.estado === statusFilter;\n      const matchesModality = modalityFilter === 'todas' || estudiante.modalidad === modalityFilter;\n      \n      return matchesSearch && matchesStatus && matchesModality;\n    });\n  }, [estudiantes, searchTerm, statusFilter, modalityFilter]);\n\n  const getEstadoBadge = (estado: string) => {\n    const variants = {\n      'activo': 'default',\n      'suspendido': 'secondary', \n      'graduado': 'secondary',\n      'retirado': 'destructive'\n    } as const;\n    \n    return (\n      <Badge variant={variants[estado as keyof typeof variants] || 'default'}>\n        {estado.charAt(0).toUpperCase() + estado.slice(1)}\n      </Badge>\n    );\n  };\n\n  const getModalidadIcon = (modalidad: string) => {\n    switch (modalidad) {\n      case 'presencial':\n        return <MapPin className=\"h-4 w-4\" />;\n      case 'virtual':\n        return <Monitor className=\"h-4 w-4\" />;\n      case 'hibrida':\n        return <BookOpen className=\"h-4 w-4\" />;\n      default:\n        return <BookOpen className=\"h-4 w-4\" />;\n    }\n  };\n\n  const formatFecha = (fecha: string | Date) => {\n    return new Date(fecha).toLocaleDateString('es-ES', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  // Estadísticas rápidas\n  const stats = useMemo(() => {\n    return {\n      total: estudiantes.length,\n      activos: estudiantes.filter(e => e.estado === 'activo').length,\n      graduados: estudiantes.filter(e => e.estado === 'graduado').length,\n      suspendidos: estudiantes.filter(e => e.estado === 'suspendido').length,\n    };\n  }, [estudiantes]);\n\n  if (error) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-destructive\">Error al cargar estudiantes</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header con estadísticas */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-total-estudiantes\">{stats.total}</p>\n                <p className=\"text-xs text-muted-foreground\">Total Estudiantes</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <GraduationCap className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-activos\">{stats.activos}</p>\n                <p className=\"text-xs text-muted-foreground\">Activos</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-5 w-5 text-purple-600\" />\n              <div>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-graduados\">{stats.graduados}</p>\n                <p className=\"text-xs text-muted-foreground\">Graduados</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"h-5 w-5 text-orange-600\" />\n              <div>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-suspendidos\">{stats.suspendidos}</p>\n                <p className=\"text-xs text-muted-foreground\">Suspendidos</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filtros */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Filter className=\"h-5 w-5\" />\n            <span>Filtros de Estudiantes</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n              <Input\n                placeholder=\"Buscar por matrícula, programa o nivel educativo...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-estudiantes\"\n              />\n            </div>\n            \n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-filtro-estado\">\n                <SelectValue placeholder=\"Estado\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"todos\">Todos los estados</SelectItem>\n                <SelectItem value=\"activo\">Activo</SelectItem>\n                <SelectItem value=\"suspendido\">Suspendido</SelectItem>\n                <SelectItem value=\"graduado\">Graduado</SelectItem>\n                <SelectItem value=\"retirado\">Retirado</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={modalityFilter} onValueChange={setModalityFilter}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-filtro-modalidad\">\n                <SelectValue placeholder=\"Modalidad\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"todas\">Todas las modalidades</SelectItem>\n                <SelectItem value=\"presencial\">Presencial</SelectItem>\n                <SelectItem value=\"virtual\">Virtual</SelectItem>\n                <SelectItem value=\"hibrida\">Híbrida</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Lista de estudiantes */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Estudiantes Matriculados</CardTitle>\n          <CardDescription>\n            Lista completa de estudiantes registrados en el sistema\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              Cargando estudiantes...\n            </div>\n          ) : filteredEstudiantes.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Users className=\"mx-auto h-8 w-8 mb-2 opacity-50\" />\n              {searchTerm || statusFilter !== 'todos' || modalityFilter !== 'todas' \n                ? 'No se encontraron estudiantes que coincidan con los filtros' \n                : 'No hay estudiantes registrados aún'}\n            </div>\n          ) : (\n            <div className=\"grid gap-4\">\n              {filteredEstudiantes.map((estudiante) => (\n                <div key={estudiante.id} \n                     className=\"border rounded-lg p-4 hover-elevate transition-colors\"\n                     data-testid={`card-estudiante-${estudiante.id}`}>\n                  <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4 items-center\">\n                    {/* Info básica */}\n                    <div className=\"md:col-span-2\">\n                      <div className=\"font-semibold\" data-testid={`text-matricula-${estudiante.id}`}>\n                        {estudiante.matricula}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {estudiante.nivelEducativo}\n                      </div>\n                    </div>\n                    \n                    {/* Programa y modalidad */}\n                    <div className=\"md:col-span-2\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        {getModalidadIcon(estudiante.modalidad)}\n                        <span className=\"text-sm font-medium\">{estudiante.programa}</span>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground capitalize\">\n                        {estudiante.modalidad}\n                      </div>\n                    </div>\n                    \n                    {/* Fechas */}\n                    <div>\n                      <div className=\"text-sm\">\n                        <span className=\"text-muted-foreground\">Inicio: </span>\n                        {formatFecha(estudiante.fechaInicio)}\n                      </div>\n                      <div className=\"text-sm\">\n                        <span className=\"text-muted-foreground\">Matrícula: </span>\n                        {formatFecha(estudiante.fechaMatricula!)}\n                      </div>\n                    </div>\n                    \n                    {/* Estado y acciones */}\n                    <div className=\"flex flex-col items-end space-y-2\">\n                      {getEstadoBadge(estudiante.estado)}\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        data-testid={`button-ver-estudiante-${estudiante.id}`}\n                      >\n                        Ver Detalles\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10945},"client/src/pages/estudiantes-page.tsx":{"content":"import EstudiantesManager from '@/components/estudiantes-manager';\n\nexport default function EstudiantesPage() {\n  return (\n    <>\n      \n      <div className=\"container mx-auto p-6 space-y-6\">\n        {/* Header de la página */}\n        <div className=\"border-b pb-4\">\n          <title>Estudiantes - CRM Educativo</title>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"title-estudiantes-page\">\n            Gestión de Estudiantes\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Administra la información de todos los estudiantes matriculados en la institución\n          </p>\n        </div>\n\n        {/* Componente principal */}\n        <EstudiantesManager />\n      </div>\n    </>\n  );\n}","size_bytes":733}},"version":1}